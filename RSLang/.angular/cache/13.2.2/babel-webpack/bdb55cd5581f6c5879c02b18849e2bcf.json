{"ast":null,"code":"import * as i3 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\n\nconst _c0 = [\"*\"];\nconst _c1 = [\"content\"];\n\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-drawer-content\");\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c3 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\n\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-sidenav-content\");\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c4 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c5 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst _c6 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\";\nconst matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [// We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), state('void', style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), transition('void => open-instant', animate('0ms')), transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\n\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\n\n\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\n\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\n\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\n\nclass MatDrawerContent extends CdkScrollable {\n  constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._container = _container;\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) {\n  return new (t || MatDrawerContent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMatDrawerContent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDrawerContent,\n  selectors: [[\"mat-drawer-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\"],\n  hostVars: 4,\n  hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: MatDrawerContent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatDrawerContent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDrawerContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: MatDrawerContent\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: MatDrawerContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(() => MatDrawerContainer)]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n\n\nclass MatDrawer {\n  constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._focusMonitor = _focusMonitor;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._interactivityChecker = _interactivityChecker;\n    this._doc = _doc;\n    this._container = _container;\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n\n    this._enableAnimations = false;\n    this._position = 'start';\n    this._mode = 'over';\n    this._disableClose = false;\n    this._opened = false;\n    /** Emits whenever the drawer has started animating. */\n\n    this._animationStarted = new Subject();\n    /** Emits whenever the drawer is done animating. */\n\n    this._animationEnd = new Subject();\n    /** Current state of the sidenav animation. */\n\n    this._animationState = 'void';\n    /** Event emitted when the drawer open state is changed. */\n\n    this.openedChange = // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter(\n    /* isAsync */\n    true);\n    /** Event emitted when the drawer has been opened. */\n\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the drawer has started opening. */\n\n    this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n    /** Event emitted when the drawer has been closed. */\n\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the drawer has started closing. */\n\n    this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Event emitted when the drawer's position changes. */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onPositionChanged = new EventEmitter();\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n\n    this._modeChanged = new Subject();\n    this.openedChange.subscribe(opened => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n        }\n\n        this._takeFocus();\n      } else if (this._isFocusWithinDrawer()) {\n        this._restoreFocus(this._openedVia || 'program');\n      }\n    });\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n        this.close();\n        event.stopPropagation();\n        event.preventDefault();\n      }));\n    }); // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      const {\n        fromState,\n        toState\n      } = event;\n\n      if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n  /** The side that the drawer is attached to. */\n\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n\n    if (value !== this._position) {\n      // Static inputs in Ivy are set before the element is in the DOM.\n      if (this._isAttached) {\n        this._updatePositionInParent(value);\n      }\n\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n\n\n  get mode() {\n    return this._mode;\n  }\n\n  set mode(value) {\n    this._mode = value;\n\n    this._updateFocusTrapState();\n\n    this._modeChanged.next();\n  }\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n\n\n  get disableClose() {\n    return this._disableClose;\n  }\n\n  set disableClose(value) {\n    this._disableClose = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n   * enabled, focus will be moved into the sidenav in `side` mode as well.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n   * instead.\n   */\n\n\n  get autoFocus() {\n    const value = this._autoFocus; // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n    // because we don't know how the sidenav is being used, but in some cases it still makes\n    // sense to do it. The consumer can explicitly set `autoFocus`.\n\n    if (value == null) {\n      if (this.mode === 'side') {\n        return 'dialog';\n      } else {\n        return 'first-tabbable';\n      }\n    }\n\n    return value;\n  }\n\n  set autoFocus(value) {\n    if (value === 'true' || value === 'false' || value == null) {\n      value = coerceBooleanProperty(value);\n    }\n\n    this._autoFocus = value;\n  }\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n\n\n  get opened() {\n    return this._opened;\n  }\n\n  set opened(value) {\n    this.toggle(coerceBooleanProperty(value));\n  }\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n\n\n  _forceFocus(element, options) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('blur', () => element.removeAttribute('tabindex'));\n        element.addEventListener('mousedown', () => element.removeAttribute('tabindex'));\n      });\n    }\n\n    element.focus(options);\n  }\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n\n\n  _focusByCssSelector(selector, options) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n  /**\n   * Moves focus into the drawer. Note that this works even if\n   * the focus trap is disabled in `side` mode.\n   */\n\n\n  _takeFocus() {\n    if (!this._focusTrap) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement; // When autoFocus is not on the sidenav, if the element cannot be focused or does\n    // not exist, focus the sidenav itself so the keyboard navigation still works.\n    // We need to check that `focus` is a function due to Universal.\n\n    switch (this.autoFocus) {\n      case false:\n      case 'dialog':\n        return;\n\n      case true:\n      case 'first-tabbable':\n        this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n          if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n            element.focus();\n          }\n        });\n\n        break;\n\n      case 'first-heading':\n        this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n        break;\n\n      default:\n        this._focusByCssSelector(this.autoFocus);\n\n        break;\n    }\n  }\n  /**\n   * Restores focus to the element that was originally focused when the drawer opened.\n   * If no element was focused at that time, the focus will be restored to the drawer.\n   */\n\n\n  _restoreFocus(focusOrigin) {\n    if (this.autoFocus === 'dialog') {\n      return;\n    }\n\n    if (this._elementFocusedBeforeDrawerWasOpened) {\n      this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n    } else {\n      this._elementRef.nativeElement.blur();\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n  }\n  /** Whether focus is currently within the drawer. */\n\n\n  _isFocusWithinDrawer() {\n    const activeEl = this._doc.activeElement;\n    return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n  }\n\n  ngAfterViewInit() {\n    this._isAttached = true;\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n    this._updateFocusTrapState(); // Only update the DOM position when the sidenav is positioned at\n    // the end since we project the sidenav before the content by default.\n\n\n    if (this._position === 'end') {\n      this._updatePositionInParent('end');\n    }\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    var _a;\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    (_a = this._anchor) === null || _a === void 0 ? void 0 : _a.remove();\n    this._anchor = null;\n\n    this._animationStarted.complete();\n\n    this._animationEnd.complete();\n\n    this._modeChanged.complete();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n\n\n  open(openedVia) {\n    return this.toggle(true, openedVia);\n  }\n  /** Close the drawer. */\n\n\n  close() {\n    return this.toggle(false);\n  }\n  /** Closes the drawer with context that the backdrop was clicked. */\n\n\n  _closeViaBackdropClick() {\n    // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n    // don't need to check whether focus is currently in the drawer, as clicking on the\n    // backdrop causes blurs the active element.\n    return this._setOpen(\n    /* isOpen */\n    false,\n    /* restoreFocus */\n    true, 'mouse');\n  }\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n\n\n  toggle(isOpen = !this.opened, openedVia) {\n    // If the focus is currently inside the drawer content and we are closing the drawer,\n    // restore the focus to the initially focused element (when the drawer opened).\n    if (isOpen && openedVia) {\n      this._openedVia = openedVia;\n    }\n\n    const result = this._setOpen(isOpen,\n    /* restoreFocus */\n    !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n\n    if (!isOpen) {\n      this._openedVia = null;\n    }\n\n    return result;\n  }\n  /**\n   * Toggles the opened state of the drawer.\n   * @param isOpen Whether the drawer should open or close.\n   * @param restoreFocus Whether focus should be restored on close.\n   * @param focusOrigin Origin to use when restoring focus.\n   */\n\n\n  _setOpen(isOpen, restoreFocus, focusOrigin) {\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n    } else {\n      this._animationState = 'void';\n\n      if (restoreFocus) {\n        this._restoreFocus(focusOrigin);\n      }\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _getWidth() {\n    return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n  }\n  /** Updates the enabled state of the focus trap. */\n\n\n  _updateFocusTrapState() {\n    if (this._focusTrap) {\n      // The focus trap is only enabled when the drawer is open in any mode other than side.\n      this._focusTrap.enabled = this.opened && this.mode !== 'side';\n    }\n  }\n  /**\n   * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n   * when it's in the `end` position so that it comes after the content and the visual order\n   * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n   * started off as `end` and was changed to `start`.\n   */\n\n\n  _updatePositionInParent(newPosition) {\n    const element = this._elementRef.nativeElement;\n    const parent = element.parentNode;\n\n    if (newPosition === 'end') {\n      if (!this._anchor) {\n        this._anchor = this._doc.createComment('mat-drawer-anchor');\n        parent.insertBefore(this._anchor, element);\n      }\n\n      parent.appendChild(element);\n    } else if (this._anchor) {\n      this._anchor.parentNode.insertBefore(element, this._anchor);\n    }\n  }\n\n}\n\nMatDrawer.ɵfac = function MatDrawer_Factory(t) {\n  return new (t || MatDrawer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.FocusTrapFactory), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.InteractivityChecker), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8));\n};\n\nMatDrawer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDrawer,\n  selectors: [[\"mat-drawer\"]],\n  viewQuery: function MatDrawer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n    }\n  },\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"],\n  hostVars: 12,\n  hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n        return ctx._animationStarted.next($event);\n      })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n        return ctx._animationEnd.next($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"align\", null);\n      i0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n      i0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n    }\n  },\n  inputs: {\n    position: \"position\",\n    mode: \"mode\",\n    disableClose: \"disableClose\",\n    autoFocus: \"autoFocus\",\n    opened: \"opened\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    openedStart: \"openedStart\",\n    _closedStream: \"closed\",\n    closedStart: \"closedStart\",\n    onPositionChanged: \"positionChanged\"\n  },\n  exportAs: [\"matDrawer\"],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"], [\"content\", \"\"]],\n  template: function MatDrawer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n  },\n  directives: [i1.CdkScrollable],\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDrawer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer',\n      exportAs: 'matDrawer',\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        '[class.mat-drawer-opened]': 'opened',\n        'tabIndex': '-1',\n        '[@transform]': '_animationState',\n        '(@transform.start)': '_animationStarted.next($event)',\n        '(@transform.done)': '_animationEnd.next($event)'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i2.FocusTrapFactory\n    }, {\n      type: i2.FocusMonitor\n    }, {\n      type: i3.Platform\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.InteractivityChecker\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDrawerContainer,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DRAWER_CONTAINER]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    disableClose: [{\n      type: Input\n    }],\n    autoFocus: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    openedStart: [{\n      type: Output\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    closedStart: [{\n      type: Output\n    }],\n    onPositionChanged: [{\n      type: Output,\n      args: ['positionChanged']\n    }],\n    _content: [{\n      type: ViewChild,\n      args: ['content']\n    }]\n  });\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n\n\nclass MatDrawerContainer {\n  constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n    this._dir = _dir;\n    this._element = _element;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /** Drawers that belong to this container. */\n\n    this._drawers = new QueryList();\n    /** Event emitted when the drawer backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n\n    this._doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n\n    this._contentMargins = {\n      left: null,\n      right: null\n    };\n    this._contentMarginChanges = new Subject(); // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n\n        this.updateContentMargins();\n      });\n    } // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n\n\n    viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n    this._autosize = defaultAutosize;\n  }\n  /** The drawer child with the `start` position. */\n\n\n  get start() {\n    return this._start;\n  }\n  /** The drawer child with the `end` position. */\n\n\n  get end() {\n    return this._end;\n  }\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n\n\n  get autosize() {\n    return this._autosize;\n  }\n\n  set autosize(value) {\n    this._autosize = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n\n\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n\n  set hasBackdrop(value) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n\n\n  get scrollable() {\n    return this._userContent || this._content;\n  }\n\n  ngAfterContentInit() {\n    this._allDrawers.changes.pipe(startWith(this._allDrawers), takeUntil(this._destroyed)).subscribe(drawer => {\n      this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n\n      this._drawers.notifyOnChanges();\n    });\n\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach(drawer => {\n        this._watchDrawerToggle(drawer);\n\n        this._watchDrawerPosition(drawer);\n\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }); // Avoid hitting the NgZone through the debounce timeout.\n\n\n    this._ngZone.runOutsideAngular(() => {\n      this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n    });\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n\n    this._doCheckSubject.complete();\n\n    this._drawers.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Calls `open` of both start and end drawers */\n\n\n  open() {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n  /** Calls `close` of both start and end drawers */\n\n\n  close() {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n\n\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._getWidth();\n      } else if (this._left.mode == 'push') {\n        const width = this._left._getWidth();\n\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._getWidth();\n      } else if (this._right.mode == 'push') {\n        const width = this._right._getWidth();\n\n        right += width;\n        left -= width;\n      }\n    } // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n\n\n    left = left || null;\n    right = right || null;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        left,\n        right\n      }; // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n\n\n  _watchDrawerToggle(drawer) {\n    drawer._animationStarted.pipe(filter(event => event.fromState !== event.toState), takeUntil(this._drawers.changes)).subscribe(event => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n    }\n  }\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n\n\n  _watchDrawerPosition(drawer) {\n    if (!drawer) {\n      return;\n    } // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n\n\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n\n\n  _watchDrawerMode(drawer) {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(() => {\n        this.updateContentMargins();\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n\n\n  _setContainerClass(isAdd) {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n  /** Validate the state of the drawer children components. */\n\n\n  _validateDrawers() {\n    this._start = this._end = null; // Ensure that we have at most one start and one end drawer.\n\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('end');\n        }\n\n        this._end = drawer;\n      } else {\n        if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('start');\n        }\n\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null; // Detect if we're LTR or RTL.\n\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n  /** Whether the container is being pushed to the side by one of the drawers. */\n\n\n  _isPushed() {\n    return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n\n    this._closeModalDrawersViaBackdrop();\n  }\n\n  _closeModalDrawersViaBackdrop() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end].filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)).forEach(drawer => drawer._closeViaBackdropClick());\n  }\n\n  _isShowingBackdrop() {\n    return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n  }\n\n  _canHaveBackdrop(drawer) {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  _isDrawerOpen(drawer) {\n    return drawer != null && drawer.opened;\n  }\n\n}\n\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) {\n  return new (t || MatDrawerContainer)(i0.ɵɵdirectiveInject(i4.Directionality, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatDrawerContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDrawerContainer,\n  selectors: [[\"mat-drawer-container\"]],\n  contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatDrawer, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    }\n  },\n  viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatDrawerContent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\"],\n  hostVars: 2,\n  hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  inputs: {\n    autosize: \"autosize\",\n    hasBackdrop: \"hasBackdrop\"\n  },\n  outputs: {\n    backdropClick: \"backdropClick\"\n  },\n  exportAs: [\"matDrawerContainer\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatDrawerContainer\n  }])],\n  ngContentSelectors: _c3,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n  template: function MatDrawerContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  directives: [MatDrawerContent, i5.NgIf],\n  styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDrawerContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-container',\n      exportAs: 'matDrawerContainer',\n      host: {\n        'class': 'mat-drawer-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_DRAWER_CONTAINER,\n        useExisting: MatDrawerContainer\n      }],\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    _allDrawers: [{\n      type: ContentChildren,\n      args: [MatDrawer, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatDrawerContent]\n    }],\n    _userContent: [{\n      type: ViewChild,\n      args: [MatDrawerContent]\n    }],\n    autosize: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    backdropClick: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSidenavContent extends MatDrawerContent {\n  constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n\n}\n\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) {\n  return new (t || MatSidenavContent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMatSidenavContent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSidenavContent,\n  selectors: [[\"mat-sidenav-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n  hostVars: 4,\n  hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: MatSidenavContent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatSidenavContent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenavContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content mat-sidenav-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: MatSidenavContent\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: MatSidenavContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(() => MatSidenavContainer)]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass MatSidenav extends MatDrawer {\n  constructor() {\n    super(...arguments);\n    this._fixedInViewport = false;\n    this._fixedTopGap = 0;\n    this._fixedBottomGap = 0;\n  }\n  /** Whether the sidenav is fixed in the viewport. */\n\n\n  get fixedInViewport() {\n    return this._fixedInViewport;\n  }\n\n  set fixedInViewport(value) {\n    this._fixedInViewport = coerceBooleanProperty(value);\n  }\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n\n\n  get fixedTopGap() {\n    return this._fixedTopGap;\n  }\n\n  set fixedTopGap(value) {\n    this._fixedTopGap = coerceNumberProperty(value);\n  }\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n\n\n  get fixedBottomGap() {\n    return this._fixedBottomGap;\n  }\n\n  set fixedBottomGap(value) {\n    this._fixedBottomGap = coerceNumberProperty(value);\n  }\n\n}\n\nMatSidenav.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSidenav_BaseFactory;\n  return function MatSidenav_Factory(t) {\n    return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = i0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav);\n  };\n}();\n\nMatSidenav.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSidenav,\n  selectors: [[\"mat-sidenav\"]],\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"],\n  hostVars: 17,\n  hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"align\", null);\n      i0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n      i0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    }\n  },\n  inputs: {\n    fixedInViewport: \"fixedInViewport\",\n    fixedTopGap: \"fixedTopGap\",\n    fixedBottomGap: \"fixedBottomGap\"\n  },\n  exportAs: [\"matSidenav\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"], [\"content\", \"\"]],\n  template: function MatSidenav_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n  },\n  directives: [i1.CdkScrollable],\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenav, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav',\n      exportAs: 'matSidenav',\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer mat-sidenav',\n        'tabIndex': '-1',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        '[class.mat-drawer-opened]': 'opened',\n        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\"\n    }]\n  }], null, {\n    fixedInViewport: [{\n      type: Input\n    }],\n    fixedTopGap: [{\n      type: Input\n    }],\n    fixedBottomGap: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatSidenavContainer extends MatDrawerContainer {}\n\nMatSidenavContainer.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSidenavContainer_BaseFactory;\n  return function MatSidenavContainer_Factory(t) {\n    return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer);\n  };\n}();\n\nMatSidenavContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSidenavContainer,\n  selectors: [[\"mat-sidenav-container\"]],\n  contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatSidenav, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n  hostVars: 2,\n  hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  exportAs: [\"matSidenavContainer\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatSidenavContainer\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n  template: function MatSidenavContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c4);\n      i0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  directives: [MatSidenavContent, i5.NgIf],\n  styles: [_c6],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenavContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-container',\n      exportAs: 'matSidenavContainer',\n      host: {\n        'class': 'mat-drawer-container mat-sidenav-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_DRAWER_CONTAINER,\n        useExisting: MatSidenavContainer\n      }],\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n    }]\n  }], null, {\n    _allDrawers: [{\n      type: ContentChildren,\n      args: [MatSidenav, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatSidenavContent]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSidenavModule {}\n\nMatSidenavModule.ɵfac = function MatSidenavModule_Factory(t) {\n  return new (t || MatSidenavModule)();\n};\n\nMatSidenavModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSidenavModule\n});\nMatSidenavModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule], CdkScrollableModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenavModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule],\n      exports: [CdkScrollableModule, MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent],\n      declarations: [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };","map":{"version":3,"sources":["D:/RSLang/RSLang/node_modules/@angular/material/fesm2015/sidenav.mjs"],"names":["i3","PlatformModule","i1","CdkScrollable","CdkScrollableModule","i5","DOCUMENT","CommonModule","i0","InjectionToken","forwardRef","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","EventEmitter","Optional","Input","Output","ViewChild","QueryList","ContentChildren","ContentChild","NgModule","MatCommonModule","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","Subject","fromEvent","merge","filter","map","mapTo","takeUntil","distinctUntilChanged","take","startWith","debounceTime","trigger","state","style","transition","animate","ANIMATION_MODULE_TYPE","i2","i4","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","constructor","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","ɵfac","ChangeDetectorRef","MatDrawerContainer","ElementRef","ScrollDispatcher","NgZone","ɵcmp","provide","useExisting","type","args","selector","template","host","changeDetection","OnPush","encapsulation","None","providers","decorators","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_interactivityChecker","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","_animationEnd","_animationState","openedChange","_openedStream","pipe","o","openedStart","e","fromState","toState","indexOf","undefined","_closedStream","closedStart","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","_openedVia","runOutsideAngular","nativeElement","event","keyCode","disableClose","run","close","stopPropagation","preventDefault","x","y","emit","value","_isAttached","_updatePositionInParent","mode","_updateFocusTrapState","next","autoFocus","_autoFocus","toggle","_forceFocus","element","options","isFocusable","tabIndex","addEventListener","removeAttribute","focus","_focusByCssSelector","elementToFocus","querySelector","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","create","ngAfterContentChecked","isBrowser","ngOnDestroy","_a","destroy","_anchor","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","_getWidth","offsetWidth","enabled","newPosition","parent","parentNode","createComment","insertBefore","appendChild","FocusTrapFactory","FocusMonitor","Platform","InteractivityChecker","exportAs","animations","_content","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","start","_start","end","_end","autosize","hasBackdrop","_backdropOverride","scrollable","_userContent","_allDrawers","changes","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","isAdd","className","ngDevMode","_onBackdropClicked","_closeModalDrawersViaBackdrop","_canHaveBackdrop","_isShowingBackdrop","Directionality","ViewportRuler","NgIf","styles","descendants","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i3 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatDrawerContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDrawerContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatDrawerContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawerContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDrawerContent, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: MatDrawerContent,\n        },\n    ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatDrawerContainer)]\n                    }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }];\n    } });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._interactivityChecker = _interactivityChecker;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange =\n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('blur', () => element.removeAttribute('tabindex'));\n                element.addEventListener('mousedown', () => element.removeAttribute('tabindex'));\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n                    if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                        element.focus();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        var _a;\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        (_a = this._anchor) === null || _a === void 0 ? void 0 : _a.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n}\nMatDrawer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDrawer, deps: [{ token: i0.ElementRef }, { token: i2.FocusTrapFactory }, { token: i2.FocusMonitor }, { token: i3.Platform }, { token: i0.NgZone }, { token: i2.InteractivityChecker }, { token: DOCUMENT, optional: true }, { token: MAT_DRAWER_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDrawer, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", directives: [{ type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i2.FocusTrapFactory }, { type: i2.FocusMonitor }, { type: i3.Platform }, { type: i0.NgZone }, { type: i2.InteractivityChecker }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDrawerContainer, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DRAWER_CONTAINER]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end)));\n    }\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDrawerContainer, deps: [{ token: i4.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MAT_DRAWER_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawerContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDrawerContainer, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n        {\n            provide: MAT_DRAWER_CONTAINER,\n            useExisting: MatDrawerContainer,\n        },\n    ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"], components: [{ type: MatDrawerContent, selector: \"mat-drawer-content\" }], directives: [{ type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i4.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSidenavContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatSidenavContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatSidenavContent, selector: \"mat-sidenav-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: MatSidenavContent,\n        },\n    ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatSidenavContainer)]\n                    }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }];\n    } });\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n}\nMatSidenav.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSidenav.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatSidenav, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", directives: [{ type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSidenavContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatSidenavContainer, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n        {\n            provide: MAT_DRAWER_CONTAINER,\n            useExisting: MatSidenavContainer,\n        },\n    ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"], components: [{ type: MatSidenavContent, selector: \"mat-sidenav-content\" }], directives: [{ type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSidenavModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavModule, declarations: [MatDrawer,\n        MatDrawerContainer,\n        MatDrawerContent,\n        MatSidenav,\n        MatSidenavContainer,\n        MatSidenavContent], imports: [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatDrawer,\n        MatDrawerContainer,\n        MatDrawerContent,\n        MatSidenav,\n        MatSidenavContainer,\n        MatSidenavContent] });\nMatSidenavModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavModule, imports: [[CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule], CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    declarations: [\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n"]},"metadata":{},"sourceType":"module"}