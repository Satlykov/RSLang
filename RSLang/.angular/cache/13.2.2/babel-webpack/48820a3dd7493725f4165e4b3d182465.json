{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@angular/flex-layout/_private-utils';\nimport { filter, tap, map, debounceTime, switchMap, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\n\nfunction removeStyles(_document, platformId) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`)); // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\n\n\nconst BROWSER_PROVIDER = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\n\nclass CoreModule {}\n\nCoreModule.ɵfac = function CoreModule_Factory(t) {\n  return new (t || CoreModule)();\n};\n\nCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CoreModule\n});\nCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [BROWSER_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [BROWSER_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * Class instances emitted [to observers] for each mql notification\n */\n\n\nclass MediaChange {\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /** Create an exact copy of the MediaChange */\n\n\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n\n\nclass StylesheetMap {\n  constructor() {\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   */\n\n\n  addStyleToElement(element, style, value) {\n    const stylesheet = this.stylesheet.get(element);\n\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n  /**\n   * Clear the virtual stylesheet\n   */\n\n\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n  /**\n   * Retrieve a given style for an HTML element\n   */\n\n\n  getStyleForElement(el, styleName) {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n\n    if (styles) {\n      const style = styles.get(styleName);\n\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n\n    return value;\n  }\n\n}\n\nStylesheetMap.ɵfac = function StylesheetMap_Factory(t) {\n  return new (t || StylesheetMap)();\n};\n\nStylesheetMap.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StylesheetMap,\n  factory: StylesheetMap.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StylesheetMap, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: [],\n  // This is disabled by default because otherwise the multiplier would\n  // run for all users, regardless of whether they're using this feature.\n  // Instead, we disable it by default, which requires this ugly cast.\n  multiplier: undefined,\n  defaultUnit: 'px',\n  detectLayoutDisplay: false\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory: () => DEFAULT_CONFIG\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\n\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory: () => false\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory: () => null\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\n\nfunction mergeAlias(dest, source) {\n  dest = dest ? dest.clone() : new MediaChange();\n\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix;\n    dest.priority = source.priority;\n  }\n\n  return dest;\n}\n/** A class that encapsulates CSS style generation for common directives */\n\n\nclass StyleBuilder {\n  constructor() {\n    /** Whether to cache the generated output styles */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n\n\n  sideEffect(_input, _styles, _parent) {}\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass StyleUtils {\n  constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n\n\n  applyStyleToElement(element, style, value = null) {\n    let styles = {};\n\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n\n\n  applyStyleToElements(style, elements = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n\n\n  getFlowDirection(target) {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n    return [value || 'row', hasInlineValue];\n  }\n\n  hasWrap(target) {\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n\n\n  lookupAttributeValue(element, attribute) {\n    var _a;\n\n    return (_a = element.getAttribute(attribute)) !== null && _a !== void 0 ? _a : '';\n  }\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n\n\n  lookupInlineStyle(element, styleName) {\n    return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : getServerStyle(element, styleName);\n  }\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n\n\n  lookupStyle(element, styleName, inlineOnly = false) {\n    let value = '';\n\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    } // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n\n\n    return value ? value.trim() : '';\n  }\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n\n\n  _applyMultiValueStyleToElement(styles, element) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values = Array.isArray(el) ? el : [el];\n      values.sort();\n\n      for (let value of values) {\n        value = value ? value + '' : '';\n\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ? element.style.setProperty(key, value) : setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n\n}\n\nStyleUtils.ɵfac = function StyleUtils_Factory(t) {\n  return new (t || StyleUtils)(i0.ɵɵinject(StylesheetMap), i0.ɵɵinject(SERVER_TOKEN), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(LAYOUT_CONFIG));\n};\n\nStyleUtils.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StyleUtils,\n  factory: StyleUtils.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StyleUtils, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StylesheetMap\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SERVER_TOKEN]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nfunction getServerStyle(element, styleName) {\n  var _a;\n\n  const styleMap = readStyleAttribute(element);\n  return (_a = styleMap[styleName]) !== null && _a !== void 0 ? _a : '';\n}\n\nfunction setServerStyle(element, styleName, styleValue) {\n  styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  const styleMap = readStyleAttribute(element);\n  styleMap[styleName] = styleValue !== null && styleValue !== void 0 ? styleValue : '';\n  writeStyleAttribute(element, styleMap);\n}\n\nfunction writeStyleAttribute(element, styleMap) {\n  let styleAttrValue = '';\n\n  for (const key in styleMap) {\n    const newValue = styleMap[key];\n\n    if (newValue) {\n      styleAttrValue += `${key}:${styleMap[key]};`;\n    }\n  }\n\n  element.setAttribute('style', styleAttrValue);\n}\n\nfunction readStyleAttribute(element) {\n  const styleMap = {};\n  const styleAttribute = element.getAttribute('style');\n\n  if (styleAttribute) {\n    const styleList = styleAttribute.split(/;+/g);\n\n    for (let i = 0; i < styleList.length; i++) {\n      const style = styleList[i].trim();\n\n      if (style.length > 0) {\n        const colonIndex = style.indexOf(':');\n\n        if (colonIndex === -1) {\n          throw new Error(`Invalid CSS style: ${style}`);\n        }\n\n        const name = style.substr(0, colonIndex).trim();\n        styleMap[name] = style.substr(colonIndex + 1).trim();\n      }\n    }\n  }\n\n  return styleMap;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** HOF to sort the breakpoints by descending priority */\n\n\nfunction sortDescendingPriority(a, b) {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\n\n\nfunction sortAscendingPriority(a, b) {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n\n\nclass MatchMedia {\n  constructor(_zone, _platformId, _document) {\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n\n    this.source = new BehaviorSubject(new MediaChange(true));\n    this.registry = new Map();\n    this.pendingRemoveListenerFns = [];\n    this._observable$ = this.source.asObservable();\n  }\n  /**\n   * Publish list of all current activations\n   */\n\n\n  get activations() {\n    const results = [];\n    this.registry.forEach((mql, key) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n  /**\n   * For the specified mediaQuery?\n   */\n\n\n  isActive(mediaQuery) {\n    var _a;\n\n    const mql = this.registry.get(mediaQuery);\n    return (_a = mql === null || mql === void 0 ? void 0 : mql.matches) !== null && _a !== void 0 ? _a : this.registerQuery(mediaQuery).some(m => m.matches);\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n\n\n  observe(mqList, filterOthers = false) {\n    if (mqList && mqList.length) {\n      const matchMedia$ = this._observable$.pipe(filter(change => !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1));\n\n      const registration$ = new Observable(observer => {\n        const matches = this.registerQuery(mqList);\n\n        if (matches.length) {\n          const lastChange = matches.pop();\n          matches.forEach(e => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n\n    return this._observable$;\n  }\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n\n\n  registerQuery(mediaQuery) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches = [];\n    buildQueryCss(list, this._document);\n    list.forEach(query => {\n      const onMQLEvent = e => {\n        this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n      };\n\n      let mql = this.registry.get(query);\n\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n    return matches;\n  }\n\n  ngOnDestroy() {\n    let fn;\n\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n\n\n  buildMQL(query) {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n\n}\n\nMatchMedia.ɵfac = function MatchMedia_Factory(t) {\n  return new (t || MatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT));\n};\n\nMatchMedia.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatchMedia,\n  factory: MatchMedia.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatchMedia, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\n\n\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\n\nfunction buildQueryCss(mediaQueries, _document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n\n  if (list.length > 0) {\n    const query = list.join(', ');\n\n    try {\n      const styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n\n      if (!styleEl.styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      _document.head.appendChild(styleEl); // Store in private global registry\n\n\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction constructMql(query, isBrowser) {\n  const canListen = isBrowser && !!window.matchMedia('all').addListener;\n  return canListen ? window.matchMedia(query) : {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {},\n    onchange: null,\n\n    addEventListener() {},\n\n    removeEventListener() {},\n\n    dispatchEvent() {\n      return false;\n    }\n\n  };\n}\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\n\n\nconst DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.98px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.98px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.98px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.98px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* tslint:disable */\n\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n  'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n  'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n  'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\n\nconst ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\n\nfunction firstUpperCase(part) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\n\n\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\n\n\nfunction validateSuffixes(list) {\n  list.forEach(bp => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\n\n\nfunction mergeByAlias(defaults, custom = []) {\n  const dict = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  }); // Merge custom breakpoints\n\n  custom.forEach(bp => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\n\n\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory: () => {\n    const breakpoints = inject(BREAKPOINT);\n    const layoutConfig = inject(LAYOUT_CONFIG);\n    const bpFlattenArray = [].concat.apply([], (breakpoints || []).map(v => Array.isArray(v) ? v : [v]));\n    const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n\nclass BreakPointRegistry {\n  constructor(list) {\n    /**\n     * Memoized BreakPoint Lookups\n     */\n    this.findByMap = new Map();\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n\n\n  findByAlias(alias) {\n    return !alias ? null : this.findWithPredicate(alias, bp => bp.alias === alias);\n  }\n\n  findByQuery(query) {\n    return this.findWithPredicate(query, bp => bp.mediaQuery === query);\n  }\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n\n\n  get overlappings() {\n    return this.items.filter(it => it.overlapping);\n  }\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n\n\n  get aliases() {\n    return this.items.map(it => it.alias);\n  }\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n\n\n  get suffixes() {\n    return this.items.map(it => {\n      var _a;\n\n      return (_a = it === null || it === void 0 ? void 0 : it.suffix) !== null && _a !== void 0 ? _a : '';\n    });\n  }\n  /**\n   * Memoized lookup using custom predicate function\n   */\n\n\n  findWithPredicate(key, searchFn) {\n    var _a;\n\n    let response = this.findByMap.get(key);\n\n    if (!response) {\n      response = (_a = this.items.find(searchFn)) !== null && _a !== void 0 ? _a : null;\n      this.findByMap.set(key, response);\n    }\n\n    return response !== null && response !== void 0 ? response : null;\n  }\n\n}\n\nBreakPointRegistry.ɵfac = function BreakPointRegistry_Factory(t) {\n  return new (t || BreakPointRegistry)(i0.ɵɵinject(BREAKPOINTS));\n};\n\nBreakPointRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BreakPointRegistry,\n  factory: BreakPointRegistry.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreakPointRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [BREAKPOINTS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\n\nclass PrintHook {\n  constructor(breakpoints, layoutConfig, _document) {\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._document = _document; // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n    //  and `afterprint` event listeners.\n\n    this.registeredBeforeAfterPrintHooks = false; // isPrintingBeforeAfterEvent is used to track if we are printing from within\n    // a `beforeprint` event handler. This prevents the typical `stopPrinting`\n    // form `interceptEvents` so that printing is not stopped while the dialog\n    // is still open. This is an extension of the `isPrinting` property on\n    // browsers which support `beforeprint` and `afterprint` events.\n\n    this.isPrintingBeforeAfterEvent = false;\n    this.beforePrintEventListeners = [];\n    this.afterPrintEventListeners = [];\n    this.formerActivations = null; // Is this service currently in print mode\n\n    this.isPrinting = false;\n    this.queue = new PrintQueue();\n    this.deactivations = [];\n  }\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n\n\n  withPrintQuery(queries) {\n    return [...queries, PRINT];\n  }\n  /** Is the MediaChange event for any 'print' @media */\n\n\n  isPrintEvent(e) {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n  /** What is the desired mqAlias to use while printing? */\n\n\n  get printAlias() {\n    var _a;\n\n    return [...((_a = this.layoutConfig.printWithBreakpoints) !== null && _a !== void 0 ? _a : [])];\n  }\n  /** Lookup breakpoints associated with print aliases. */\n\n\n  get printBreakPoints() {\n    return this.printAlias.map(alias => this.breakpoints.findByAlias(alias)).filter(bp => bp !== null);\n  }\n  /** Lookup breakpoint associated with mediaQuery */\n\n\n  getEventBreakpoints({\n    mediaQuery\n  }) {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n    return list.sort(sortDescendingPriority);\n  }\n  /** Update event with printAlias mediaQuery information */\n\n\n  updateEvent(event) {\n    var _a;\n\n    let bp = this.breakpoints.findByQuery(event.mediaQuery);\n\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = (_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _a !== void 0 ? _a : '';\n    }\n\n    return mergeAlias(event, bp);\n  } // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n\n\n  registerBeforeAfterPrintHooks(target) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n\n    this.registeredBeforeAfterPrintHooks = true;\n\n    const beforePrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n\n    const afterPrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    }; // Could we have teardown logic to remove if there are no print listeners being used?\n\n\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n  /**\n   * Prepare RxJS tap operator with partial application\n   * @return pipeable tap predicate\n   */\n\n\n  interceptEvents(target) {\n    return event => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n        } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n\n        return;\n      }\n\n      this.collectActivations(target, event);\n    };\n  }\n  /** Stop mediaChange event propagation in event streams */\n\n\n  blockPropagation() {\n    return event => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n\n\n  startPrinting(target, bpList) {\n    this.isPrinting = true;\n    this.formerActivations = target.activatedBreakpoints;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n  /** For any print de-activations, reset the entire print queue */\n\n\n  stopPrinting(target) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.formerActivations = null;\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n\n\n  collectActivations(target, event) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise, this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n        return;\n      }\n\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery); // Deactivating a breakpoint\n\n        if (bp) {\n          const hasFormerBp = this.formerActivations && this.formerActivations.includes(bp);\n          const wasActivated = !this.formerActivations && target.activatedBreakpoints.includes(bp);\n          const shouldDeactivate = hasFormerBp || wasActivated;\n\n          if (shouldDeactivate) {\n            this.deactivations.push(bp);\n            this.deactivations.sort(sortDescendingPriority);\n          }\n        }\n      }\n    }\n  }\n  /** Teardown logic for the service. */\n\n\n  ngOnDestroy() {\n    if (this._document.defaultView) {\n      this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n      this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n    }\n  }\n\n}\n\nPrintHook.ɵfac = function PrintHook_Factory(t) {\n  return new (t || PrintHook)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(DOCUMENT));\n};\n\nPrintHook.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PrintHook,\n  factory: PrintHook.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PrintHook, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})(); // ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\n\n\nclass PrintQueue {\n  constructor() {\n    /** Sorted queue with prioritized print breakpoints */\n    this.printBreakpoints = [];\n  }\n\n  addPrintBreakpoints(bpList) {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n    return this.printBreakpoints;\n  }\n  /** Add Print breakpoint to queue */\n\n\n  addBreakpoint(bp) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints] : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n  /** Restore original activated breakpoints and clear internal caches */\n\n\n  clear() {\n    this.printBreakpoints = [];\n  }\n\n} // ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n\n/** Only support intercept queueing if the Breakpoint is a print @media query */\n\n\nfunction isPrintBreakPoint(bp) {\n  var _a;\n\n  return (_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery.startsWith(PRINT)) !== null && _a !== void 0 ? _a : false;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\n\n\nclass MediaMarshaller {\n  constructor(matchMedia, breakpoints, hook) {\n    this.matchMedia = matchMedia;\n    this.breakpoints = breakpoints;\n    this.hook = hook;\n    this._useFallbacks = true;\n    this._activatedBreakpoints = [];\n    this.elementMap = new Map();\n    this.elementKeyMap = new WeakMap();\n    this.watcherMap = new WeakMap(); // special triggers to update elements\n\n    this.updateMap = new WeakMap(); // callback functions to update styles\n\n    this.clearMap = new WeakMap(); // callback functions to clear styles\n\n    this.subject = new Subject();\n    this.observeActivations();\n  }\n\n  get activatedAlias() {\n    var _a, _b;\n\n    return (_b = (_a = this.activatedBreakpoints[0]) === null || _a === void 0 ? void 0 : _a.alias) !== null && _b !== void 0 ? _b : '';\n  }\n\n  set activatedBreakpoints(bps) {\n    this._activatedBreakpoints = [...bps];\n  }\n\n  get activatedBreakpoints() {\n    return [...this._activatedBreakpoints];\n  }\n\n  set useFallbacks(value) {\n    this._useFallbacks = value;\n  }\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n\n\n  onMediaChange(mc) {\n    const bp = this.findByQuery(mc.mediaQuery);\n\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n      const bpIndex = this.activatedBreakpoints.indexOf(bp);\n\n      if (mc.matches && bpIndex === -1) {\n        this._activatedBreakpoints.push(bp);\n\n        this._activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n      } else if (!mc.matches && bpIndex !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this._activatedBreakpoints.splice(bpIndex, 1);\n\n        this._activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n      }\n    }\n  }\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n\n\n  init(element, key, updateFn, clearFn, extraTriggers = []) {\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n\n\n  getValue(element, key, bp) {\n    const bpMap = this.elementMap.get(element);\n\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n\n      if (values) {\n        return values.get(key);\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n\n\n  hasValue(element, key) {\n    const bpMap = this.elementMap.get(element);\n\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n\n\n  setValue(element, key, val, bp) {\n    var _a;\n\n    let bpMap = this.elementMap.get(element);\n\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = ((_a = bpMap.get(bp)) !== null && _a !== void 0 ? _a : new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n\n    const value = this.getValue(element, key);\n\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n  /** Track element value changes for a specific key */\n\n\n  trackValue(element, key) {\n    return this.subject.asObservable().pipe(filter(v => v.element === element && v.key === key));\n  }\n  /** update all styles for all elements on the current breakpoint */\n\n\n  updateStyles() {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el));\n      let valueMap = this.getActivatedValues(bpMap);\n\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n    });\n  }\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n\n\n  clearElement(element, key) {\n    const builders = this.clearMap.get(element);\n\n    if (builders) {\n      const clearFn = builders.get(key);\n\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({\n          element,\n          key,\n          value: ''\n        });\n      }\n    }\n  }\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n\n\n  updateElement(element, key, value) {\n    const builders = this.updateMap.get(element);\n\n    if (builders) {\n      const updateFn = builders.get(key);\n\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({\n          element,\n          key,\n          value\n        });\n      }\n    }\n  }\n  /**\n   * release all references to a given element\n   * @param element\n   */\n\n\n  releaseElement(element) {\n    const watcherMap = this.watcherMap.get(element);\n\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n\n    const elementMap = this.elementMap.get(element);\n\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n\n\n  triggerUpdate(element, key) {\n    const bpMap = this.elementMap.get(element);\n\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n  /** Cross-reference for HTMLElement with directive key */\n\n\n  buildElementKeyMap(element, key) {\n    let keyMap = this.elementKeyMap.get(element);\n\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n\n    keyMap.add(key);\n  }\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n\n\n  watchExtraTriggers(element, key, triggers) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n\n      const subscription = watchers.get(key);\n\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n  /** Breakpoint locator by mediaQuery */\n\n\n  findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n\n\n  getActivatedValues(bpMap, key) {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n          return valueMap;\n        }\n      }\n    } // On the server, we explicitly have an \"all\" section filled in to begin with.\n    // So we don't need to aggressively find a fallback if no explicit value exists.\n\n\n    if (!this._useFallbacks) {\n      return undefined;\n    }\n\n    const lastHope = bpMap.get('');\n    return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n  }\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n\n\n  observeActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    this.hook.registerBeforeAfterPrintHooks(this);\n    this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(this)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n  }\n\n}\n\nMediaMarshaller.ɵfac = function MediaMarshaller_Factory(t) {\n  return new (t || MediaMarshaller)(i0.ɵɵinject(MatchMedia), i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(PrintHook));\n};\n\nMediaMarshaller.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaMarshaller,\n  factory: MediaMarshaller.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaMarshaller, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MatchMedia\n    }, {\n      type: BreakPointRegistry\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n\nfunction initBuilderMap(map, element, key, input) {\n  var _a;\n\n  if (input !== undefined) {\n    const oldMap = (_a = map.get(element)) !== null && _a !== void 0 ? _a : new Map();\n    oldMap.set(key, input);\n    map.set(element, oldMap);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass BaseDirective2 {\n  constructor(elementRef, styleBuilder, styler, marshal) {\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /** The most recently used styles for the builder */\n\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /** Cache map for style computation */\n\n    this.styleCache = new Map();\n  }\n  /** Access to host element's parent DOM node */\n\n\n  get parentElement() {\n    return this.elementRef.nativeElement.parentElement;\n  }\n  /** Access to the HTMLElement for the directive */\n\n\n  get nativeElement() {\n    return this.elementRef.nativeElement;\n  }\n  /** Access to the activated value for the directive */\n\n\n  get activatedValue() {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n\n  set activatedValue(value) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n  }\n  /** For @Input changes */\n\n\n  ngOnChanges(changes) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n  /** Register with central marshaller service */\n\n\n  init(extraTriggers = []) {\n    this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n  }\n  /** Add styles to the element using predefined style builder */\n\n\n  addStyles(input, parent) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n    let genStyles = this.styleCache.get(input);\n\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n\n    this.mru = Object.assign({}, genStyles);\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n  /** Remove generated styles from an element using predefined style builder */\n\n\n  clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n    this.currentValue = undefined;\n  }\n  /** Force trigger style updates on DOM element */\n\n\n  triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n\n\n  getFlexFlowDirection(target, addIfMissing = false) {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n\n      return value.trim();\n    }\n\n    return 'row';\n  }\n\n  hasWrap(target) {\n    return this.styler.hasWrap(target);\n  }\n  /** Applies styles given via string pair or object map to the directive element */\n\n\n  applyStyleToElement(style, value, element = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n\n  setValue(val, bp) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n\n  updateWithValue(input) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n\n}\n\nBaseDirective2.ɵfac = function BaseDirective2_Factory(t) {\n  return new (t || BaseDirective2)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(StyleBuilder), i0.ɵɵdirectiveInject(StyleUtils), i0.ɵɵdirectiveInject(MediaMarshaller));\n};\n\nBaseDirective2.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseDirective2,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseDirective2, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: StyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n\n\nclass MockMatchMedia extends MatchMedia {\n  constructor(_zone, _platformId, _document, _breakpoints) {\n    super(_zone, _platformId, _document);\n    this._breakpoints = _breakpoints;\n    this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n\n    this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n  }\n  /** Easy method to clear all listeners for all mediaQueries */\n\n\n  clearAll() {\n    this.registry.forEach(mql => {\n      mql.destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n\n\n  activate(mediaQuery, useOverlaps = this.useOverlaps) {\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n\n\n  _validateQuery(queryOrAlias) {\n    var _a;\n\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n\n    return (_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _a !== void 0 ? _a : queryOrAlias;\n  }\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n\n\n  _activateWithOverlaps(mediaQuery, useOverlaps) {\n    var _a;\n\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n\n      const alias = (_a = bp === null || bp === void 0 ? void 0 : bp.alias) !== null && _a !== void 0 ? _a : 'unknown'; // Simulate activation of overlapping lt-<XXX> ranges\n\n      switch (alias) {\n        case 'lg':\n          this._activateByAlias(['lt-xl']);\n\n          break;\n\n        case 'md':\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n\n          break;\n\n        case 'sm':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n\n          break;\n\n        case 'xs':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n\n          break;\n      } // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n\n\n      switch (alias) {\n        case 'xl':\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n\n          break;\n\n        case 'lg':\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n\n          break;\n\n        case 'md':\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n\n          break;\n\n        case 'sm':\n          this._activateByAlias(['gt-xs']);\n\n          break;\n      }\n    } // Activate last since the responsiveActivation is watching *this* mediaQuery\n\n\n    return this._activateByQuery(mediaQuery);\n  }\n  /**\n   *\n   */\n\n\n  _activateByAlias(aliases) {\n    const activate = alias => {\n      var _a;\n\n      const bp = this._breakpoints.findByAlias(alias);\n\n      this._activateByQuery((_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _a !== void 0 ? _a : alias);\n    };\n\n    aliases.forEach(activate);\n  }\n  /**\n   *\n   */\n\n\n  _activateByQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n\n    const mql = this.registry.get(mediaQuery);\n\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n\n    return this.hasActivated;\n  }\n  /** Deactivate all current MQLs and reset the buffer */\n\n\n  _deactivateAll() {\n    this.registry.forEach(it => {\n      it.deactivate();\n    });\n    return this;\n  }\n  /** Insure the mediaQuery is registered with MatchMedia */\n\n\n  _registerMediaQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n\n\n  buildMQL(query) {\n    return new MockMediaQueryList(query);\n  }\n\n  get hasActivated() {\n    return this.activations.length > 0;\n  }\n\n}\n\nMockMatchMedia.ɵfac = function MockMatchMedia_Factory(t) {\n  return new (t || MockMatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(BreakPointRegistry));\n};\n\nMockMatchMedia.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockMatchMedia,\n  factory: MockMatchMedia.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockMatchMedia, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: BreakPointRegistry\n    }];\n  }, null);\n})();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\n\n\nclass MockMediaQueryList {\n  constructor(_mediaQuery) {\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n\n  get matches() {\n    return this._isActive;\n  }\n\n  get media() {\n    return this._mediaQuery;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n\n\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /** Notify all listeners that 'matches === TRUE' */\n\n\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n\n    return this;\n  }\n  /** Notify all listeners that 'matches === false' */\n\n\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n\n    return this;\n  }\n  /** Add a listener to our internal list to activate later */\n\n\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n\n    if (this._isActive) {\n      const cb = listener;\n      cb.call(this, {\n        matches: this.matches,\n        media: this.media\n      });\n    }\n  }\n  /** Don't need to remove listeners in the testing environment */\n\n\n  removeListener(_) {}\n\n  addEventListener(_, __, ___) {}\n\n  removeEventListener(_, __, ___) {}\n\n  dispatchEvent(_) {\n    return false;\n  }\n\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\n\n\nconst MockMatchMediaProvider = {\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\n\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\n\n\nclass MediaObserver {\n  constructor(breakpoints, matchMedia, hook) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.hook = hook;\n    /** Filter MediaChange notifications for overlapping breakpoints */\n\n    this.filterOverlaps = false;\n    this.destroyed$ = new Subject();\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(filter(changes => changes.length > 0), map(changes => changes[0]));\n  }\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   */\n\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  } // ************************************************\n  // Public Methods\n  // ************************************************\n\n  /**\n   * Observe changes to current activation 'list'\n   */\n\n\n  asObservable() {\n    return this._media$;\n  }\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param value One or more media queries (or aliases) to check.\n   * @returns Whether any of the media queries match.\n   */\n\n\n  isActive(value) {\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(alias => {\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  } // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n\n\n  watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n\n\n  buildObservable(mqList) {\n    const hasChanges = changes => {\n      const isValidQuery = change => change.mediaQuery.length > 0;\n\n      return changes.filter(isValidQuery).length > 0;\n    };\n\n    const excludeOverlaps = changes => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        var _a;\n\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return (_a = bp === null || bp === void 0 ? void 0 : bp.overlapping) !== null && _a !== void 0 ? _a : true;\n      });\n    };\n\n    const ignoreDuplicates = (previous, current) => {\n      if (previous.length !== current.length) {\n        return false;\n      }\n\n      const previousMqs = previous.map(mc => mc.mediaQuery);\n      const currentMqs = new Set(current.map(mc => mc.mediaQuery));\n      const difference = new Set(previousMqs.filter(mq => !currentMqs.has(mq)));\n      return difference.size === 0;\n    };\n    /**\n     */\n\n\n    return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(change => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), distinctUntilChanged(ignoreDuplicates), takeUntil(this.destroyed$));\n  }\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n\n\n  findAllActivations() {\n    const mergeMQAlias = change => {\n      const bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n\n    const replaceWithPrintAlias = change => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n\n    return this.matchMedia.activations.map(query => new MediaChange(true, query)).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n  }\n\n}\n\nMediaObserver.ɵfac = function MediaObserver_Factory(t) {\n  return new (t || MediaObserver)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(PrintHook));\n};\n\nMediaObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaObserver,\n  factory: MediaObserver.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n/**\n * Find associated breakpoint (if any)\n */\n\n\nfunction toMediaQuery(query, locator) {\n  var _a, _b;\n\n  const bp = (_a = locator.findByAlias(query)) !== null && _a !== void 0 ? _a : locator.findByQuery(query);\n  return (_b = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class\n */\n\n\nclass MediaTrigger {\n  constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.layoutConfig = layoutConfig;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.hasCachedRegistryMatches = false;\n    this.originalActivations = [];\n    this.originalRegistry = new Map();\n  }\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n\n\n  activate(list) {\n    list = list.map(it => it.trim()); // trim queries\n\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n    this.prepareAutoRestore();\n  }\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n\n\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      const extractQuery = change => change.mediaQuery;\n\n      const list = this.originalActivations.map(extractQuery);\n\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  } // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n\n\n  prepareAutoRestore() {\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n\n    if (enableAutoRestore) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n\n\n  deactivateAll() {\n    const list = this.currentActivations;\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n\n\n  saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      const toMediaChange = query => new MediaChange(true, query);\n\n      const mergeMQAlias = change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n\n      this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n      this.cacheRegistryMatches();\n    }\n  }\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n\n\n  setActivations(list) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n\n    this.simulateMediaChanges(list);\n  }\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n\n\n  simulateMediaChanges(queries, matches = true) {\n    const toMediaQuery = query => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n\n    const emitChangeEvent = query => this.emitChangeEvent(matches, query);\n\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n\n\n  forceRegistryMatches(queries, matches) {\n    const registry = new Map();\n    queries.forEach(query => {\n      registry.set(query, {\n        matches\n      });\n    });\n    this.matchMedia.registry = registry;\n  }\n  /**\n   * Save current MatchMedia::registry items.\n   */\n\n\n  cacheRegistryMatches() {\n    const target = this.originalRegistry;\n    target.clear();\n    this.matchMedia.registry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n  /**\n   * Restore original, 'true' registry\n   */\n\n\n  restoreRegistryMatches() {\n    const target = this.matchMedia.registry;\n    target.clear();\n    this.originalRegistry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n\n\n  emitChangeEvent(matches, query) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n\n  get currentActivations() {\n    return this.matchMedia.activations;\n  }\n\n}\n\nMediaTrigger.ɵfac = function MediaTrigger_Factory(t) {\n  return new (t || MediaTrigger)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT));\n};\n\nMediaTrigger.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaTrigger,\n  factory: MediaTrigger.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaTrigger, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\n\n\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n  let parts = [grow, shrink, basis];\n  let j = basis.indexOf('calc');\n\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = matches.length === 3 ? matches : [grow, shrink, basis];\n  }\n\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\n\n\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\nconst MULTIPLIER_SUFFIX = 'x';\n\nfunction multiply(value, multiplier) {\n  if (multiplier === undefined) {\n    return value;\n  }\n\n  const transformValue = possibleValue => {\n    const numberValue = +possibleValue.slice(0, -MULTIPLIER_SUFFIX.length);\n\n    if (value.endsWith(MULTIPLIER_SUFFIX) && !isNaN(numberValue)) {\n      return `${numberValue * multiplier.value}${multiplier.unit}`;\n    }\n\n    return value;\n  };\n\n  return value.includes(' ') ? value.split(' ').map(transformValue).join(' ') : transformValue(value);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, multiply as ɵmultiply };","map":{"version":3,"sources":["D:/RSLang/RSLang/node_modules/@angular/flex-layout/fesm2015/angular-flex-layout-core.mjs"],"names":["i0","APP_BOOTSTRAP_LISTENER","PLATFORM_ID","NgModule","Injectable","InjectionToken","Inject","inject","Directive","isPlatformBrowser","DOCUMENT","isPlatformServer","BehaviorSubject","Observable","merge","Subject","asapScheduler","of","fromEvent","applyCssPrefixes","extendObject","buildLayoutCSS","filter","tap","map","debounceTime","switchMap","distinctUntilChanged","takeUntil","take","removeStyles","_document","platformId","elements","Array","from","querySelectorAll","CLASS_NAME","classRegex","forEach","el","classList","contains","parentNode","removeChild","className","replace","BROWSER_PROVIDER","provide","useFactory","deps","multi","CoreModule","ɵfac","ɵmod","ɵinj","type","args","providers","MediaChange","constructor","matches","mediaQuery","mqAlias","suffix","priority","property","clone","StylesheetMap","stylesheet","Map","addStyleToElement","element","style","value","get","set","clearStyles","clear","getStyleForElement","styleName","styles","ɵprov","providedIn","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","multiplier","undefined","defaultUnit","detectLayoutDisplay","LAYOUT_CONFIG","factory","SERVER_TOKEN","BREAKPOINT","mergeAlias","dest","source","alias","StyleBuilder","shouldCache","sideEffect","_input","_styles","_parent","StyleUtils","_serverStylesheet","_serverModuleLoaded","_platformId","layoutConfig","applyStyleToElement","_applyMultiValueStyleToElement","applyStyleToElements","getFlowDirection","target","query","lookupStyle","hasInlineValue","lookupInlineStyle","hasWrap","lookupAttributeValue","attribute","_a","getAttribute","getPropertyValue","getServerStyle","inlineOnly","immediateValue","getComputedStyle","trim","Object","keys","sort","key","values","isArray","setProperty","setServerStyle","decorators","styleMap","readStyleAttribute","styleValue","toLowerCase","writeStyleAttribute","styleAttrValue","newValue","setAttribute","styleAttribute","styleList","split","i","length","colonIndex","indexOf","Error","name","substr","sortDescendingPriority","a","b","priorityA","priorityB","sortAscendingPriority","pA","pB","MatchMedia","_zone","registry","pendingRemoveListenerFns","_observable$","asObservable","activations","results","mql","push","isActive","registerQuery","some","m","observe","mqList","filterOthers","matchMedia$","pipe","change","registration$","observer","lastChange","pop","e","next","complete","list","buildQueryCss","onMQLEvent","run","buildMQL","addListener","removeListener","ngOnDestroy","fn","constructMql","NgZone","ALL_STYLES","mediaQueries","it","join","styleEl","createElement","styleSheet","cssText","appendChild","createTextNode","head","mq","console","error","isBrowser","canListen","window","matchMedia","media","onchange","addEventListener","removeEventListener","dispatchEvent","DEFAULT_BREAKPOINTS","overlapping","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","ORIENTATION_BREAKPOINTS","HANDSET","TABLET","WEB","ALIAS_DELIMITERS","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","validateSuffixes","bp","mergeByAlias","defaults","custom","dict","k","BREAKPOINTS","breakpoints","bpFlattenArray","concat","apply","v","builtIns","BreakPointRegistry","findByMap","items","findByAlias","findWithPredicate","findByQuery","overlappings","aliases","suffixes","searchFn","response","find","PRINT","BREAKPOINT_PRINT","PrintHook","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","formerActivations","isPrinting","queue","PrintQueue","deactivations","withPrintQuery","queries","isPrintEvent","startsWith","printAlias","printBreakPoints","getEventBreakpoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","interceptEvents","collectActivations","blockPropagation","bpList","activatedBreakpoints","addPrintBreakpoints","hasFormerBp","includes","wasActivated","shouldDeactivate","l","printBreakpoints","addBreakpoint","bpInList","isPrintBreakPoint","MediaMarshaller","hook","_useFallbacks","_activatedBreakpoints","elementMap","elementKeyMap","WeakMap","watcherMap","updateMap","clearMap","subject","observeActivations","activatedAlias","_b","bps","useFallbacks","onMediaChange","mc","bpIndex","splice","init","updateFn","clearFn","extraTriggers","initBuilderMap","buildElementKeyMap","watchExtraTriggers","getValue","bpMap","getActivatedValues","hasValue","setValue","val","updateElement","trackValue","keyMap","Set","valueMap","delete","clearElement","builders","releaseElement","s","unsubscribe","_","triggerUpdate","add","triggers","watchers","subscription","newSubscription","subscribe","currentValue","activatedBp","has","lastHope","bind","input","oldMap","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","styleCache","parentElement","nativeElement","activatedValue","ngOnChanges","changes","updateWithValue","addStyles","parent","builder","useCache","genStyles","buildStyles","assign","getFlexFlowDirection","addIfMissing","ElementRef","ɵdir","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","deactivate","MockMediaQueryList","_mediaQuery","_isActive","_listeners","callback","cb","call","listener","__","___","MockMatchMediaProvider","useClass","coerceArray","MediaObserver","filterOverlaps","destroyed$","_media$","watchActivations","media$","splitQueries","toMediaQuery","buildObservable","hasChanges","isValidQuery","excludeOverlaps","ignoreDuplicates","previous","current","previousMqs","currentMqs","difference","size","findAllActivations","mergeMQAlias","replaceWithPrintAlias","locator","reduce","a1","a2","MediaTrigger","hasCachedRegistryMatches","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","enableAutoRestore","resize$","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","cacheRegistryMatches","emitChangeEvent","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","calc","MULTIPLIER_SUFFIX","multiply","transformValue","possibleValue","numberValue","endsWith","isNaN","unit","ɵMatchMedia","ɵMockMatchMedia","ɵMockMatchMediaProvider","ɵmultiply"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@angular/flex-layout/_private-utils';\nimport { filter, tap, map, debounceTime, switchMap, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n    return () => {\n        if (isPlatformBrowser(platformId)) {\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach(el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            });\n        }\n    };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n    provide: APP_BOOTSTRAP_LISTENER,\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n}\nCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule });\nCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule, providers: [BROWSER_PROVIDER] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [BROWSER_PROVIDER]\n                }]\n        }] });\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param matches whether the mediaQuery is currently activated\n     * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n     * @param mqAlias e.g. gt-sm, md, gt-lg\n     * @param suffix e.g. GtSM, Md, GtLg\n     * @param priority the priority of activation for the given breakpoint\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.priority = priority;\n        this.property = '';\n    }\n    /** Create an exact copy of the MediaChange */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     */\n    addStyleToElement(element, style, value) {\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     */\n    getStyleForElement(el, styleName) {\n        const styles = this.stylesheet.get(el);\n        let value = '';\n        if (styles) {\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n}\nStylesheetMap.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StylesheetMap, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nStylesheetMap.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StylesheetMap, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StylesheetMap, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n    printWithBreakpoints: [],\n    mediaTriggerAutoRestore: true,\n    ssrObserveBreakpoints: [],\n    // This is disabled by default because otherwise the multiplier would\n    // run for all users, regardless of whether they're using this feature.\n    // Instead, we disable it by default, which requires this ugly cast.\n    multiplier: undefined,\n    defaultUnit: 'px',\n    detectLayoutDisplay: false,\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n    dest = dest ? dest.clone() : new MediaChange();\n    if (source) {\n        dest.mqAlias = source.alias;\n        dest.mediaQuery = source.mediaQuery;\n        dest.suffix = source.suffix;\n        dest.priority = source.priority;\n    }\n    return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n    constructor() {\n        /** Whether to cache the generated output styles */\n        this.shouldCache = true;\n    }\n    /**\n     * Run a side effect computation given the input string and the computed styles\n     * from the build task and the host configuration object\n     * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n     */\n    sideEffect(_input, _styles, _parent) {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     */\n    applyStyleToElement(element, style, value = null) {\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     */\n    applyStyleToElements(style, elements = []) {\n        const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach(el => {\n            this._applyMultiValueStyleToElement(styles, el);\n        });\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     */\n    getFlowDirection(target) {\n        const query = 'flex-direction';\n        let value = this.lookupStyle(target, query);\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n        return [value || 'row', hasInlineValue];\n    }\n    hasWrap(target) {\n        const query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     */\n    lookupAttributeValue(element, attribute) {\n        var _a;\n        return (_a = element.getAttribute(attribute)) !== null && _a !== void 0 ? _a : '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ?\n            element.style.getPropertyValue(styleName) : getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        let value = '';\n        if (element) {\n            let immediateValue = value = this.lookupInlineStyle(element, styleName);\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles).sort().forEach(key => {\n            const el = styles[key];\n            const values = Array.isArray(el) ? el : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId) ?\n                        element.style.setProperty(key, value) : setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        });\n    }\n}\nStyleUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StyleUtils, deps: [{ token: StylesheetMap }, { token: SERVER_TOKEN }, { token: PLATFORM_ID }, { token: LAYOUT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nStyleUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StyleUtils, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StyleUtils, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: StylesheetMap }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [SERVER_TOKEN]\n                    }] }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LAYOUT_CONFIG]\n                    }] }];\n    } });\nfunction getServerStyle(element, styleName) {\n    var _a;\n    const styleMap = readStyleAttribute(element);\n    return (_a = styleMap[styleName]) !== null && _a !== void 0 ? _a : '';\n}\nfunction setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = readStyleAttribute(element);\n    styleMap[styleName] = styleValue !== null && styleValue !== void 0 ? styleValue : '';\n    writeStyleAttribute(element, styleMap);\n}\nfunction writeStyleAttribute(element, styleMap) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n        const newValue = styleMap[key];\n        if (newValue) {\n            styleAttrValue += `${key}:${styleMap[key]};`;\n        }\n    }\n    element.setAttribute('style', styleAttrValue);\n}\nfunction readStyleAttribute(element) {\n    const styleMap = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n        const styleList = styleAttribute.split(/;+/g);\n        for (let i = 0; i < styleList.length; i++) {\n            const style = styleList[i].trim();\n            if (style.length > 0) {\n                const colonIndex = style.indexOf(':');\n                if (colonIndex === -1) {\n                    throw new Error(`Invalid CSS style: ${style}`);\n                }\n                const name = style.substr(0, colonIndex).trim();\n                styleMap[name] = style.substr(colonIndex + 1).trim();\n            }\n        }\n    }\n    return styleMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n    const priorityA = a ? a.priority || 0 : 0;\n    const priorityB = b ? b.priority || 0 : 0;\n    return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n    const pA = a.priority || 0;\n    const pB = b.priority || 0;\n    return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    constructor(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n        this.source = new BehaviorSubject(new MediaChange(true));\n        this.registry = new Map();\n        this.pendingRemoveListenerFns = [];\n        this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     */\n    get activations() {\n        const results = [];\n        this.registry.forEach((mql, key) => {\n            if (mql.matches) {\n                results.push(key);\n            }\n        });\n        return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     */\n    isActive(mediaQuery) {\n        var _a;\n        const mql = this.registry.get(mediaQuery);\n        return (_a = mql === null || mql === void 0 ? void 0 : mql.matches) !== null && _a !== void 0 ? _a : this.registerQuery(mediaQuery).some(m => m.matches);\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     */\n    observe(mqList, filterOthers = false) {\n        if (mqList && mqList.length) {\n            const matchMedia$ = this._observable$.pipe(filter((change) => !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1)));\n            const registration$ = new Observable((observer) => {\n                const matches = this.registerQuery(mqList);\n                if (matches.length) {\n                    const lastChange = matches.pop();\n                    matches.forEach((e) => {\n                        observer.next(e);\n                    });\n                    this.source.next(lastChange); // last match is cached\n                }\n                observer.complete();\n            });\n            return merge(registration$, matchMedia$);\n        }\n        return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     */\n    registerQuery(mediaQuery) {\n        const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        const matches = [];\n        buildQueryCss(list, this._document);\n        list.forEach((query) => {\n            const onMQLEvent = (e) => {\n                this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n            };\n            let mql = this.registry.get(query);\n            if (!mql) {\n                mql = this.buildMQL(query);\n                mql.addListener(onMQLEvent);\n                this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n                this.registry.set(query, mql);\n            }\n            if (mql.matches) {\n                matches.push(new MediaChange(true, query));\n            }\n        });\n        return matches;\n    }\n    ngOnDestroy() {\n        let fn;\n        while (fn = this.pendingRemoveListenerFns.pop()) {\n            fn();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n}\nMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MatchMedia, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MatchMedia, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document) {\n    const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n    if (list.length > 0) {\n        const query = list.join(', ');\n        try {\n            const styleEl = _document.createElement('style');\n            styleEl.setAttribute('type', 'text/css');\n            if (!styleEl.styleSheet) {\n                const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                styleEl.appendChild(_document.createTextNode(cssText));\n            }\n            _document.head.appendChild(styleEl);\n            // Store in private global registry\n            list.forEach(mq => ALL_STYLES[mq] = styleEl);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nfunction constructMql(query, isBrowser) {\n    const canListen = isBrowser && !!window.matchMedia('all').addListener;\n    return canListen ? window.matchMedia(query) : {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => {\n        },\n        removeListener: () => {\n        },\n        onchange: null,\n        addEventListener() {\n        },\n        removeEventListener() {\n        },\n        dispatchEvent() {\n            return false;\n        }\n    };\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n        priority: 1000,\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n        priority: 900,\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n        priority: 800,\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n        priority: 700,\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n        priority: 600,\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 599.98px)',\n        priority: 950,\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 959.98px)',\n        priority: 850,\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 1279.98px)',\n        priority: 750,\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        priority: 650,\n        mediaQuery: 'screen and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)',\n        priority: -950,\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)',\n        priority: -850,\n    }, {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)',\n        priority: -750,\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)',\n        priority: -650,\n    }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE },\n    { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n    let first = part.length > 0 ? part.charAt(0) : '';\n    let remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n    list.forEach((bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    });\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n    const dict = {};\n    defaults.forEach(bp => {\n        dict[bp.alias] = bp;\n    });\n    // Merge custom breakpoints\n    custom.forEach((bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    });\n    return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n        const breakpoints = inject(BREAKPOINT);\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        const bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map((v) => Array.isArray(v) ? v : [v]));\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    constructor(list) {\n        /**\n         * Memoized BreakPoint Lookups\n         */\n        this.findByMap = new Map();\n        this.items = [...list].sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     */\n    findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias === alias);\n    }\n    findByQuery(query) {\n        return this.findWithPredicate(query, (bp) => bp.mediaQuery === query);\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     */\n    get overlappings() {\n        return this.items.filter(it => it.overlapping);\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     */\n    get aliases() {\n        return this.items.map(it => it.alias);\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     */\n    get suffixes() {\n        return this.items.map(it => { var _a; return (_a = it === null || it === void 0 ? void 0 : it.suffix) !== null && _a !== void 0 ? _a : ''; });\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     */\n    findWithPredicate(key, searchFn) {\n        var _a;\n        let response = this.findByMap.get(key);\n        if (!response) {\n            response = (_a = this.items.find(searchFn)) !== null && _a !== void 0 ? _a : null;\n            this.findByMap.set(key, response);\n        }\n        return response !== null && response !== void 0 ? response : null;\n    }\n}\nBreakPointRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BreakPointRegistry, deps: [{ token: BREAKPOINTS }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakPointRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BreakPointRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BreakPointRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [BREAKPOINTS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n    alias: PRINT,\n    mediaQuery: PRINT,\n    priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n    constructor(breakpoints, layoutConfig, _document) {\n        this.breakpoints = breakpoints;\n        this.layoutConfig = layoutConfig;\n        this._document = _document;\n        // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n        //  and `afterprint` event listeners.\n        this.registeredBeforeAfterPrintHooks = false;\n        // isPrintingBeforeAfterEvent is used to track if we are printing from within\n        // a `beforeprint` event handler. This prevents the typical `stopPrinting`\n        // form `interceptEvents` so that printing is not stopped while the dialog\n        // is still open. This is an extension of the `isPrinting` property on\n        // browsers which support `beforeprint` and `afterprint` events.\n        this.isPrintingBeforeAfterEvent = false;\n        this.beforePrintEventListeners = [];\n        this.afterPrintEventListeners = [];\n        this.formerActivations = null;\n        // Is this service currently in print mode\n        this.isPrinting = false;\n        this.queue = new PrintQueue();\n        this.deactivations = [];\n    }\n    /** Add 'print' mediaQuery: to listen for matchMedia activations */\n    withPrintQuery(queries) {\n        return [...queries, PRINT];\n    }\n    /** Is the MediaChange event for any 'print' @media */\n    isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n    }\n    /** What is the desired mqAlias to use while printing? */\n    get printAlias() {\n        var _a;\n        return [...((_a = this.layoutConfig.printWithBreakpoints) !== null && _a !== void 0 ? _a : [])];\n    }\n    /** Lookup breakpoints associated with print aliases. */\n    get printBreakPoints() {\n        return this.printAlias\n            .map(alias => this.breakpoints.findByAlias(alias))\n            .filter(bp => bp !== null);\n    }\n    /** Lookup breakpoint associated with mediaQuery */\n    getEventBreakpoints({ mediaQuery }) {\n        const bp = this.breakpoints.findByQuery(mediaQuery);\n        const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n    }\n    /** Update event with printAlias mediaQuery information */\n    updateEvent(event) {\n        var _a;\n        let bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (this.isPrintEvent(event)) {\n            // Reset from 'print' to first (highest priority) print breakpoint\n            bp = this.getEventBreakpoints(event)[0];\n            event.mediaQuery = (_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _a !== void 0 ? _a : '';\n        }\n        return mergeAlias(event, bp);\n    }\n    // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n    registerBeforeAfterPrintHooks(target) {\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n            return;\n        }\n        this.registeredBeforeAfterPrintHooks = true;\n        const beforePrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            if (!this.isPrinting) {\n                this.isPrintingBeforeAfterEvent = true;\n                this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n                target.updateStyles();\n            }\n        };\n        const afterPrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            this.isPrintingBeforeAfterEvent = false;\n            if (this.isPrinting) {\n                this.stopPrinting(target);\n                target.updateStyles();\n            }\n        };\n        // Could we have teardown logic to remove if there are no print listeners being used?\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS tap operator with partial application\n     * @return pipeable tap predicate\n     */\n    interceptEvents(target) {\n        return (event) => {\n            if (this.isPrintEvent(event)) {\n                if (event.matches && !this.isPrinting) {\n                    this.startPrinting(target, this.getEventBreakpoints(event));\n                    target.updateStyles();\n                }\n                else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n                    this.stopPrinting(target);\n                    target.updateStyles();\n                }\n                return;\n            }\n            this.collectActivations(target, event);\n        };\n    }\n    /** Stop mediaChange event propagation in event streams */\n    blockPropagation() {\n        return (event) => {\n            return !(this.isPrinting || this.isPrintEvent(event));\n        };\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     */\n    startPrinting(target, bpList) {\n        this.isPrinting = true;\n        this.formerActivations = target.activatedBreakpoints;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /** For any print de-activations, reset the entire print queue */\n    stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.formerActivations = null;\n        this.queue.clear();\n        this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     */\n    collectActivations(target, event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n            if (!this.isPrintingBeforeAfterEvent) {\n                // Only clear deactivations if we aren't printing from a `beforeprint` event.\n                // Otherwise, this will clear before `stopPrinting()` is called to restore\n                // the pre-Print Activations.\n                this.deactivations = [];\n                return;\n            }\n            if (!event.matches) {\n                const bp = this.breakpoints.findByQuery(event.mediaQuery);\n                // Deactivating a breakpoint\n                if (bp) {\n                    const hasFormerBp = this.formerActivations && this.formerActivations.includes(bp);\n                    const wasActivated = !this.formerActivations && target.activatedBreakpoints.includes(bp);\n                    const shouldDeactivate = hasFormerBp || wasActivated;\n                    if (shouldDeactivate) {\n                        this.deactivations.push(bp);\n                        this.deactivations.sort(sortDescendingPriority);\n                    }\n                }\n            }\n        }\n    }\n    /** Teardown logic for the service. */\n    ngOnDestroy() {\n        if (this._document.defaultView) {\n            this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n            this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n        }\n    }\n}\nPrintHook.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PrintHook, deps: [{ token: BreakPointRegistry }, { token: LAYOUT_CONFIG }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nPrintHook.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PrintHook, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PrintHook, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: BreakPointRegistry }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LAYOUT_CONFIG]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n    constructor() {\n        /** Sorted queue with prioritized print breakpoints */\n        this.printBreakpoints = [];\n    }\n    addPrintBreakpoints(bpList) {\n        bpList.push(BREAKPOINT_PRINT);\n        bpList.sort(sortDescendingPriority);\n        bpList.forEach(bp => this.addBreakpoint(bp));\n        return this.printBreakpoints;\n    }\n    /** Add Print breakpoint to queue */\n    addBreakpoint(bp) {\n        if (!!bp) {\n            const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n            if (bpInList === undefined) {\n                // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n                // register as highest priority in the queue\n                this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n                    : [...this.printBreakpoints, bp];\n            }\n        }\n    }\n    /** Restore original activated breakpoints and clear internal caches */\n    clear() {\n        this.printBreakpoints = [];\n    }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n    var _a;\n    return (_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery.startsWith(PRINT)) !== null && _a !== void 0 ? _a : false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n    constructor(matchMedia, breakpoints, hook) {\n        this.matchMedia = matchMedia;\n        this.breakpoints = breakpoints;\n        this.hook = hook;\n        this._useFallbacks = true;\n        this._activatedBreakpoints = [];\n        this.elementMap = new Map();\n        this.elementKeyMap = new WeakMap();\n        this.watcherMap = new WeakMap(); // special triggers to update elements\n        this.updateMap = new WeakMap(); // callback functions to update styles\n        this.clearMap = new WeakMap(); // callback functions to clear styles\n        this.subject = new Subject();\n        this.observeActivations();\n    }\n    get activatedAlias() {\n        var _a, _b;\n        return (_b = (_a = this.activatedBreakpoints[0]) === null || _a === void 0 ? void 0 : _a.alias) !== null && _b !== void 0 ? _b : '';\n    }\n    set activatedBreakpoints(bps) {\n        this._activatedBreakpoints = [...bps];\n    }\n    get activatedBreakpoints() {\n        return [...this._activatedBreakpoints];\n    }\n    set useFallbacks(value) {\n        this._useFallbacks = value;\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param mc\n     */\n    onMediaChange(mc) {\n        const bp = this.findByQuery(mc.mediaQuery);\n        if (bp) {\n            mc = mergeAlias(mc, bp);\n            const bpIndex = this.activatedBreakpoints.indexOf(bp);\n            if (mc.matches && bpIndex === -1) {\n                this._activatedBreakpoints.push(bp);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n            else if (!mc.matches && bpIndex !== -1) {\n                // Remove the breakpoint when it's deactivated\n                this._activatedBreakpoints.splice(bpIndex, 1);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n        }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param element\n     * @param key\n     * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     */\n    init(element, key, updateFn, clearFn, extraTriggers = []) {\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param element\n     * @param key\n     * @param bp\n     */\n    getValue(element, key, bp) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key);\n            }\n        }\n        return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param element\n     * @param key\n     */\n    hasValue(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key) !== undefined || false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param element the element in question\n     * @param key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param bp the breakpoint suffix (empty string = default)\n     * @param val the value for the breakpoint\n     */\n    setValue(element, key, val, bp) {\n        var _a;\n        let bpMap = this.elementMap.get(element);\n        if (!bpMap) {\n            bpMap = new Map().set(bp, new Map().set(key, val));\n            this.elementMap.set(element, bpMap);\n        }\n        else {\n            const values = ((_a = bpMap.get(bp)) !== null && _a !== void 0 ? _a : new Map()).set(key, val);\n            bpMap.set(bp, values);\n            this.elementMap.set(element, bpMap);\n        }\n        const value = this.getValue(element, key);\n        if (value !== undefined) {\n            this.updateElement(element, key, value);\n        }\n    }\n    /** Track element value changes for a specific key */\n    trackValue(element, key) {\n        return this.subject\n            .asObservable()\n            .pipe(filter(v => v.element === element && v.key === key));\n    }\n    /** update all styles for all elements on the current breakpoint */\n    updateStyles() {\n        this.elementMap.forEach((bpMap, el) => {\n            const keyMap = new Set(this.elementKeyMap.get(el));\n            let valueMap = this.getActivatedValues(bpMap);\n            if (valueMap) {\n                valueMap.forEach((v, k) => {\n                    this.updateElement(el, k, v);\n                    keyMap.delete(k);\n                });\n            }\n            keyMap.forEach(k => {\n                valueMap = this.getActivatedValues(bpMap, k);\n                if (valueMap) {\n                    const value = valueMap.get(k);\n                    this.updateElement(el, k, value);\n                }\n                else {\n                    this.clearElement(el, k);\n                }\n            });\n        });\n    }\n    /**\n     * clear the styles for a given element\n     * @param element\n     * @param key\n     */\n    clearElement(element, key) {\n        const builders = this.clearMap.get(element);\n        if (builders) {\n            const clearFn = builders.get(key);\n            if (!!clearFn) {\n                clearFn();\n                this.subject.next({ element, key, value: '' });\n            }\n        }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param element\n     * @param key\n     * @param value\n     */\n    updateElement(element, key, value) {\n        const builders = this.updateMap.get(element);\n        if (builders) {\n            const updateFn = builders.get(key);\n            if (!!updateFn) {\n                updateFn(value);\n                this.subject.next({ element, key, value });\n            }\n        }\n    }\n    /**\n     * release all references to a given element\n     * @param element\n     */\n    releaseElement(element) {\n        const watcherMap = this.watcherMap.get(element);\n        if (watcherMap) {\n            watcherMap.forEach(s => s.unsubscribe());\n            this.watcherMap.delete(element);\n        }\n        const elementMap = this.elementMap.get(element);\n        if (elementMap) {\n            elementMap.forEach((_, s) => elementMap.delete(s));\n            this.elementMap.delete(element);\n        }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param element\n     * @param key\n     */\n    triggerUpdate(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const valueMap = this.getActivatedValues(bpMap, key);\n            if (valueMap) {\n                if (key) {\n                    this.updateElement(element, key, valueMap.get(key));\n                }\n                else {\n                    valueMap.forEach((v, k) => this.updateElement(element, k, v));\n                }\n            }\n        }\n    }\n    /** Cross-reference for HTMLElement with directive key */\n    buildElementKeyMap(element, key) {\n        let keyMap = this.elementKeyMap.get(element);\n        if (!keyMap) {\n            keyMap = new Set();\n            this.elementKeyMap.set(element, keyMap);\n        }\n        keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     */\n    watchExtraTriggers(element, key, triggers) {\n        if (triggers && triggers.length) {\n            let watchers = this.watcherMap.get(element);\n            if (!watchers) {\n                watchers = new Map();\n                this.watcherMap.set(element, watchers);\n            }\n            const subscription = watchers.get(key);\n            if (!subscription) {\n                const newSubscription = merge(...triggers).subscribe(() => {\n                    const currentValue = this.getValue(element, key);\n                    this.updateElement(element, key, currentValue);\n                });\n                watchers.set(key, newSubscription);\n            }\n        }\n    }\n    /** Breakpoint locator by mediaQuery */\n    findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @param bpMap\n     * @param key\n     */\n    getActivatedValues(bpMap, key) {\n        for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n            const activatedBp = this.activatedBreakpoints[i];\n            const valueMap = bpMap.get(activatedBp.alias);\n            if (valueMap) {\n                if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n                    return valueMap;\n                }\n            }\n        }\n        // On the server, we explicitly have an \"all\" section filled in to begin with.\n        // So we don't need to aggressively find a fallback if no explicit value exists.\n        if (!this._useFallbacks) {\n            return undefined;\n        }\n        const lastHope = bpMap.get('');\n        return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     */\n    observeActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        this.hook.registerBeforeAfterPrintHooks(this);\n        this.matchMedia\n            .observe(this.hook.withPrintQuery(queries))\n            .pipe(tap(this.hook.interceptEvents(this)), filter(this.hook.blockPropagation()))\n            .subscribe(this.onMediaChange.bind(this));\n    }\n}\nMediaMarshaller.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaMarshaller, deps: [{ token: MatchMedia }, { token: BreakPointRegistry }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMarshaller.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaMarshaller, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaMarshaller, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MatchMedia }, { type: BreakPointRegistry }, { type: PrintHook }]; } });\nfunction initBuilderMap(map, element, key, input) {\n    var _a;\n    if (input !== undefined) {\n        const oldMap = (_a = map.get(element)) !== null && _a !== void 0 ? _a : new Map();\n        oldMap.set(key, input);\n        map.set(element, oldMap);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n    constructor(elementRef, styleBuilder, styler, marshal) {\n        this.elementRef = elementRef;\n        this.styleBuilder = styleBuilder;\n        this.styler = styler;\n        this.marshal = marshal;\n        this.DIRECTIVE_KEY = '';\n        this.inputs = [];\n        /** The most recently used styles for the builder */\n        this.mru = {};\n        this.destroySubject = new Subject();\n        /** Cache map for style computation */\n        this.styleCache = new Map();\n    }\n    /** Access to host element's parent DOM node */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentElement;\n    }\n    /** Access to the HTMLElement for the directive */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /** Access to the activated value for the directive */\n    get activatedValue() {\n        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    set activatedValue(value) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /** For @Input changes */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach(key => {\n            if (this.inputs.indexOf(key) !== -1) {\n                const bp = key.split('.').slice(1).join('.');\n                const val = changes[key].currentValue;\n                this.setValue(val, bp);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.destroySubject.next();\n        this.destroySubject.complete();\n        this.marshal.releaseElement(this.nativeElement);\n    }\n    /** Register with central marshaller service */\n    init(extraTriggers = []) {\n        this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /** Add styles to the element using predefined style builder */\n    addStyles(input, parent) {\n        const builder = this.styleBuilder;\n        const useCache = builder.shouldCache;\n        let genStyles = this.styleCache.get(input);\n        if (!genStyles || !useCache) {\n            genStyles = builder.buildStyles(input, parent);\n            if (useCache) {\n                this.styleCache.set(input, genStyles);\n            }\n        }\n        this.mru = Object.assign({}, genStyles);\n        this.applyStyleToElement(genStyles);\n        builder.sideEffect(input, genStyles, parent);\n    }\n    /** Remove generated styles from an element using predefined style builder */\n    clearStyles() {\n        Object.keys(this.mru).forEach(k => {\n            this.mru[k] = '';\n        });\n        this.applyStyleToElement(this.mru);\n        this.mru = {};\n        this.currentValue = undefined;\n    }\n    /** Force trigger style updates on DOM element */\n    triggerUpdate() {\n        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    getFlexFlowDirection(target, addIfMissing = false) {\n        if (target) {\n            const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                const style = buildLayoutCSS(value);\n                const elements = [target];\n                this.styler.applyStyleToElements(style, elements);\n            }\n            return value.trim();\n        }\n        return 'row';\n    }\n    hasWrap(target) {\n        return this.styler.hasWrap(target);\n    }\n    /** Applies styles given via string pair or object map to the directive element */\n    applyStyleToElement(style, value, element = this.nativeElement) {\n        this.styler.applyStyleToElement(element, style, value);\n    }\n    setValue(val, bp) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    updateWithValue(input) {\n        if (this.currentValue !== input) {\n            this.addStyles(input);\n            this.currentValue = input;\n        }\n    }\n}\nBaseDirective2.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BaseDirective2, deps: [{ token: i0.ElementRef }, { token: StyleBuilder }, { token: StyleUtils }, { token: MediaMarshaller }], target: i0.ɵɵFactoryTarget.Directive });\nBaseDirective2.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: BaseDirective2, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BaseDirective2, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: StyleBuilder }, { type: StyleUtils }, { type: MediaMarshaller }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._breakpoints = _breakpoints;\n        this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n        this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n    }\n    /** Easy method to clear all listeners for all mediaQueries */\n    clearAll() {\n        this.registry.forEach((mql) => {\n            mql.destroy();\n        });\n        this.registry.clear();\n        this.useOverlaps = false;\n    }\n    /** Feature to support manual, simulated activation of a mediaQuery. */\n    activate(mediaQuery, useOverlaps = this.useOverlaps) {\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n    _validateQuery(queryOrAlias) {\n        var _a;\n        const bp = this._breakpoints.findByAlias(queryOrAlias);\n        return (_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _a !== void 0 ? _a : queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        var _a;\n        if (useOverlaps) {\n            const bp = this._breakpoints.findByQuery(mediaQuery);\n            const alias = (_a = bp === null || bp === void 0 ? void 0 : bp.alias) !== null && _a !== void 0 ? _a : 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias(['lt-xl']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['lt-xl', 'lt-lg']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n                    break;\n                case 'xs':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n                    break;\n            }\n            // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'lg':\n                    this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['gt-sm', 'gt-xs']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['gt-xs']);\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     */\n    _activateByAlias(aliases) {\n        const activate = (alias) => {\n            var _a;\n            const bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery((_a = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _a !== void 0 ? _a : alias);\n        };\n        aliases.forEach(activate);\n    }\n    /**\n     *\n     */\n    _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this._registerMediaQuery(mediaQuery);\n        }\n        const mql = this.registry.get(mediaQuery);\n        if (mql && !this.isActive(mediaQuery)) {\n            this.registry.set(mediaQuery, mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /** Deactivate all current MQLs and reset the buffer */\n    _deactivateAll() {\n        this.registry.forEach((it) => {\n            it.deactivate();\n        });\n        return this;\n    }\n    /** Insure the mediaQuery is registered with MatchMedia */\n    _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    get hasActivated() {\n        return this.activations.length > 0;\n    }\n}\nMockMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MockMatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: BreakPointRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nMockMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MockMatchMedia });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MockMatchMedia, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: BreakPointRegistry }];\n    } });\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n    constructor(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    get matches() {\n        return this._isActive;\n    }\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /** Notify all listeners that 'matches === TRUE' */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Notify all listeners that 'matches === false' */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Add a listener to our internal list to activate later */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            const cb = listener;\n            cb.call(this, { matches: this.matches, media: this.media });\n        }\n    }\n    /** Don't need to remove listeners in the testing environment */\n    removeListener(_) {\n    }\n    addEventListener(_, __, ___) {\n    }\n    removeEventListener(_, __, ___) {\n    }\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n    constructor(breakpoints, matchMedia, hook) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.hook = hook;\n        /** Filter MediaChange notifications for overlapping breakpoints */\n        this.filterOverlaps = false;\n        this.destroyed$ = new Subject();\n        this._media$ = this.watchActivations();\n        this.media$ = this._media$.pipe(filter((changes) => changes.length > 0), map((changes) => changes[0]));\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     */\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    // ************************************************\n    // Public Methods\n    // ************************************************\n    /**\n     * Observe changes to current activation 'list'\n     */\n    asObservable() {\n        return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param value One or more media queries (or aliases) to check.\n     * @returns Whether any of the media queries match.\n     */\n    isActive(value) {\n        const aliases = splitQueries(coerceArray(value));\n        return aliases.some(alias => {\n            const query = toMediaQuery(alias, this.breakpoints);\n            return query !== null && this.matchMedia.isActive(query);\n        });\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     */\n    watchActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     */\n    buildObservable(mqList) {\n        const hasChanges = (changes) => {\n            const isValidQuery = (change) => (change.mediaQuery.length > 0);\n            return (changes.filter(isValidQuery).length > 0);\n        };\n        const excludeOverlaps = (changes) => {\n            return !this.filterOverlaps ? changes : changes.filter(change => {\n                var _a;\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return (_a = bp === null || bp === void 0 ? void 0 : bp.overlapping) !== null && _a !== void 0 ? _a : true;\n            });\n        };\n        const ignoreDuplicates = (previous, current) => {\n            if (previous.length !== current.length) {\n                return false;\n            }\n            const previousMqs = previous.map(mc => mc.mediaQuery);\n            const currentMqs = new Set(current.map(mc => mc.mediaQuery));\n            const difference = new Set(previousMqs.filter(mq => !currentMqs.has(mq)));\n            return difference.size === 0;\n        };\n        /**\n         */\n        return this.matchMedia\n            .observe(this.hook.withPrintQuery(mqList))\n            .pipe(filter((change) => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), distinctUntilChanged(ignoreDuplicates), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     */\n    findAllActivations() {\n        const mergeMQAlias = (change) => {\n            const bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return mergeAlias(change, bp);\n        };\n        const replaceWithPrintAlias = (change) => {\n            return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n        };\n        return this.matchMedia\n            .activations\n            .map(query => new MediaChange(true, query))\n            .map(replaceWithPrintAlias)\n            .map(mergeMQAlias)\n            .sort(sortDescendingPriority);\n    }\n}\nMediaObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaObserver, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: PrintHook }]; } });\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n    var _a, _b;\n    const bp = (_a = locator.findByAlias(query)) !== null && _a !== void 0 ? _a : locator.findByQuery(query);\n    return (_b = bp === null || bp === void 0 ? void 0 : bp.mediaQuery) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map((query) => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n    constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.layoutConfig = layoutConfig;\n        this._platformId = _platformId;\n        this._document = _document;\n        this.hasCachedRegistryMatches = false;\n        this.originalActivations = [];\n        this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param list array of mediaQuery or alias strings\n     */\n    activate(list) {\n        list = list.map(it => it.trim()); // trim queries\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     */\n    restore() {\n        if (this.hasCachedRegistryMatches) {\n            const extractQuery = (change) => change.mediaQuery;\n            const list = this.originalActivations.map(extractQuery);\n            try {\n                this.deactivateAll();\n                this.restoreRegistryMatches();\n                this.setActivations(list);\n            }\n            finally {\n                this.originalActivations = [];\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                }\n            }\n        }\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     */\n    prepareAutoRestore() {\n        const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n        if (enableAutoRestore) {\n            const resize$ = fromEvent(window, 'resize').pipe(take(1));\n            this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     */\n    deactivateAll() {\n        const list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     */\n    saveActivations() {\n        if (!this.hasCachedRegistryMatches) {\n            const toMediaChange = (query) => new MediaChange(true, query);\n            const mergeMQAlias = (change) => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return mergeAlias(change, bp);\n            };\n            this.originalActivations = this.currentActivations\n                .map(toMediaChange)\n                .map(mergeMQAlias)\n                .sort(sortDescendingPriority);\n            this.cacheRegistryMatches();\n        }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     */\n    setActivations(list) {\n        if (!!this.originalRegistry) {\n            this.forceRegistryMatches(list, true);\n        }\n        this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     */\n    simulateMediaChanges(queries, matches = true) {\n        const toMediaQuery = (query) => {\n            const locator = this.breakpoints;\n            const bp = locator.findByAlias(query) || locator.findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        };\n        const emitChangeEvent = (query) => this.emitChangeEvent(matches, query);\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     */\n    forceRegistryMatches(queries, matches) {\n        const registry = new Map();\n        queries.forEach(query => {\n            registry.set(query, { matches });\n        });\n        this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     */\n    cacheRegistryMatches() {\n        const target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     */\n    restoreRegistryMatches() {\n        const target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     */\n    emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    get currentActivations() {\n        return this.matchMedia.activations;\n    }\n}\nMediaTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaTrigger, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: LAYOUT_CONFIG }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaTrigger.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaTrigger, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaTrigger, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LAYOUT_CONFIG]\n                    }] }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    let parts = [grow, shrink, basis];\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\nconst MULTIPLIER_SUFFIX = 'x';\nfunction multiply(value, multiplier) {\n    if (multiplier === undefined) {\n        return value;\n    }\n    const transformValue = (possibleValue) => {\n        const numberValue = +(possibleValue.slice(0, -MULTIPLIER_SUFFIX.length));\n        if (value.endsWith(MULTIPLIER_SUFFIX) && !isNaN(numberValue)) {\n            return `${numberValue * multiplier.value}${multiplier.unit}`;\n        }\n        return value;\n    };\n    return value.includes(' ') ?\n        value.split(' ').map(transformValue).join(' ') : transformValue(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, multiply as ɵmultiply };\n"]},"metadata":{},"sourceType":"module"}