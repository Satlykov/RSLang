{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport cloneDeep from 'clone-deep';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n/**\n * Throttle a function\n *\n */\n\nconst _c0 = [\"caretElm\"];\n\nfunction TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    model: a0\n  };\n};\n\nfunction TooltipContentComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, \"ng-template\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.context));\n  }\n}\n\nfunction TooltipContentComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.title, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction LegendComponent_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"header\", 4);\n    i0.ɵɵelementStart(1, \"span\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.title);\n  }\n}\n\nfunction LegendComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 6);\n    i0.ɵɵelementStart(1, \"ngx-charts-legend-entry\", 7);\n    i0.ɵɵlistener(\"select\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.labelClick.emit($event);\n    })(\"activate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activate($event);\n    })(\"deactivate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const entry_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"label\", entry_r2.label)(\"formattedLabel\", entry_r2.formattedLabel)(\"color\", entry_r2.color)(\"isActive\", ctx_r1.isActive(entry_r2));\n  }\n}\n\nfunction ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"ngx-charts-scale-legend\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r0.legendOptions && ctx_r0.legendOptions.position === ctx_r0.LegendPosition.Below)(\"valueRange\", ctx_r0.legendOptions.domain)(\"colors\", ctx_r0.legendOptions.colors)(\"height\", ctx_r0.view[1])(\"width\", ctx_r0.legendWidth);\n  }\n}\n\nfunction ChartComponent_ngx_charts_legend_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"ngx-charts-legend\", 5);\n    i0.ɵɵlistener(\"labelClick\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.legendLabelClick.emit($event);\n    })(\"labelActivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.legendLabelActivate.emit($event);\n    })(\"labelDeactivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.legendLabelDeactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r1.legendOptions && ctx_r1.legendOptions.position === ctx_r1.LegendPosition.Below)(\"data\", ctx_r1.legendOptions.domain)(\"title\", ctx_r1.legendOptions.title)(\"colors\", ctx_r1.legendOptions.colors)(\"height\", ctx_r1.view[1])(\"width\", ctx_r1.legendWidth)(\"activeEntries\", ctx_r1.activeEntries);\n  }\n}\n\nconst _c2 = [\"*\"];\nconst _c3 = [\"ngx-charts-axis-label\", \"\"];\nconst _c4 = [\"ticksel\"];\nconst _c5 = [\"ngx-charts-x-axis-ticks\", \"\"];\n\nfunction XAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.tickTransform(tick_r3));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", \"12px\");\n    i0.ɵɵattribute(\"text-anchor\", ctx_r1.textAnchor)(\"transform\", ctx_r1.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r3)), \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r5.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"y1\", -ctx_r5.gridLineHeight);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r2.tickTransform(tick_r4));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showGridLines);\n  }\n}\n\nconst _c6 = [\"ngx-charts-x-axis\", \"\"];\n\nfunction XAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.emitTicksHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"rotateTicks\", ctx_r0.rotateTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.xScale)(\"orient\", ctx_r0.xOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineHeight\", ctx_r0.dims.height)(\"width\", ctx_r0.dims.width)(\"tickValues\", ctx_r0.ticks);\n  }\n}\n\nfunction XAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.orientation.Bottom)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c7 = [\"ngx-charts-y-axis-ticks\", \"\"];\n\nfunction YAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 5);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transform(tick_r5));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", \"12px\");\n    i0.ɵɵattribute(\"dy\", ctx_r1.dy)(\"x\", ctx_r1.x1)(\"y\", ctx_r1.y1)(\"text-anchor\", ctx_r1.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r5)), \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"d\", ctx_r2.referenceAreaPath)(\"transform\", ctx_r2.gridLineTransform());\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", ctx_r8.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", -ctx_r9.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, \"line\", 8);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, \"line\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r7.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.orient === ctx_r7.Orientation.Left);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.orient === ctx_r7.Orientation.Right);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r6 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r3.transform(tick_r6));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.showGridLines);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const refLine_r10 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r12.tickTrim(ctx_r12.tickFormat(refLine_r10.value)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"dy\", ctx_r12.dy)(\"y\", -6)(\"x\", ctx_r12.gridLineWidth)(\"text-anchor\", ctx_r12.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", refLine_r10.name, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 10);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const refLine_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r11.transform(refLine_r10.value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x2\", ctx_r11.gridLineWidth)(\"transform\", ctx_r11.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r11.showRefLabels);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showRefLines);\n  }\n}\n\nconst _c8 = [\"ngx-charts-y-axis\", \"\"];\n\nfunction YAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.emitTicksWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickValues\", ctx_r0.ticks)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.yScale)(\"orient\", ctx_r0.yOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineWidth\", ctx_r0.dims.width)(\"referenceLines\", ctx_r0.referenceLines)(\"showRefLines\", ctx_r0.showRefLines)(\"showRefLabels\", ctx_r0.showRefLabels)(\"height\", ctx_r0.dims.height);\n  }\n}\n\nfunction YAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.yOrient)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c9 = [\"ngx-charts-svg-linear-gradient\", \"\"];\n\nfunction SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c10 = [\"ngx-charts-circle\", \"\"];\nconst _c11 = [\"ngx-charts-circle-series\", \"\"];\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"x\", ctx_r1.circle.cx - ctx_r1.circle.radius)(\"y\", ctx_r1.circle.cy)(\"width\", ctx_r1.circle.radius * 2)(\"height\", ctx_r1.circle.height)(\"fill\", ctx_r1.gradientFill);\n  }\n}\n\nconst _c12 = function (a0) {\n  return {\n    name: a0\n  };\n};\n\nfunction CircleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"defs\");\n    i0.ɵɵelement(2, \"g\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, \"rect\", 2);\n    i0.ɵɵelementStart(4, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_4_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick(ctx_r2.circle.data);\n    })(\"activate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_4_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.activateCircle();\n    })(\"deactivate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_4_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deactivateCircle();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.circle.gradientStops);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.isActive(i0.ɵɵpureFunction1(19, _c12, ctx_r0.circle.seriesName)));\n    i0.ɵɵproperty(\"cx\", ctx_r0.circle.cx)(\"cy\", ctx_r0.circle.cy)(\"r\", ctx_r0.circle.radius)(\"fill\", ctx_r0.circle.color)(\"pointerEvents\", ctx_r0.circle.value === 0 ? \"none\" : \"all\")(\"data\", ctx_r0.circle.value)(\"classNames\", ctx_r0.circle.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ctx_r0.circle.data);\n  }\n}\n\nconst _c13 = [\"ngx-charts-grid-panel\", \"\"];\nconst _c14 = [\"ngx-charts-grid-panel-series\", \"\"];\n\nfunction GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 1);\n  }\n\n  if (rf & 2) {\n    const gridPanel_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"grid-panel\", true)(\"odd\", gridPanel_r1.class === \"odd\")(\"even\", gridPanel_r1.class === \"even\");\n    i0.ɵɵproperty(\"height\", gridPanel_r1.height)(\"width\", gridPanel_r1.width)(\"x\", gridPanel_r1.x)(\"y\", gridPanel_r1.y);\n  }\n}\n\nconst _c15 = [\"ngx-charts-svg-radial-gradient\", \"\"];\n\nfunction SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c16 = [\"ngx-charts-area\", \"\"];\n\nfunction AreaComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c17 = [\"ngx-charts-count-up\", \"\"];\nconst _c18 = [\"tooltipAnchor\"];\nconst _c19 = [\"ngx-charts-tooltip-area\", \"\"];\n\nfunction TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"span\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tooltipItem_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", tooltipItem_r5.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getToolTipText(tooltipItem_r5), \" \");\n  }\n}\n\nfunction TooltipArea__svg_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const model_r3 = ctx.model;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", model_r3);\n  }\n}\n\nconst _c20 = [\"ngx-charts-timeline\", \"\"];\n\nfunction AdvancedLegendComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", ctx_r0.roundedTotal)(\"valueFormatting\", ctx_r0.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", legendItem_r3._value)(\"valueFormatting\", ctx_r4.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 18);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", legendItem_r3.percentage)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", legendItem_r3.percentage.toLocaleString(), \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mouseenter\", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.activate.emit(legendItem_r3.data);\n    })(\"mouseleave\", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.deactivate.emit(legendItem_r3.data);\n    })(\"click\", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.select.emit(legendItem_r3.data);\n    });\n    i0.ɵɵelement(1, \"div\", 10);\n    i0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, \"div\", 11);\n    i0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementStart(4, \"div\", 13);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, \"div\", 14);\n    i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-left-color\", legendItem_r3.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(legendItem_r3.displayLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n  }\n}\n\nconst _c21 = [\"ngx-charts-area-series\", \"\"];\nconst _c22 = [\"tooltipTemplate\"];\nconst _c23 = [\"seriesTooltipTemplate\"];\n\nfunction AreaChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"baseValue\", ctx_r2.baseValue)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"baseValue\", ctx_r19.baseValue)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nconst _c24 = function (a0, a1) {\n  return [a0, a1];\n};\n\nfunction AreaChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"activeEntries\", ctx_r2.activeEntries)(\"gradient\", ctx_r2.gradient)(\"normalized\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"showPercentage\", true)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"normalized\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c25 = \".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\";\n\nfunction AreaChartStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"activeEntries\", ctx_r2.activeEntries)(\"stacked\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 12);\n    i0.ɵɵlistener(\"select\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"stacked\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 13);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c26 = [\"ngx-charts-bar\", \"\"];\n\nfunction BarComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c27 = [\"ngx-charts-bar-label\", \"\"];\nconst _c28 = [\"ngx-charts-series-horizontal\", \"\"];\n\nfunction SeriesHorizontal__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.click($event);\n    })(\"activate\", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activate.emit($event);\n    })(\"deactivate\", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", ctx_r0.barOrientation.Horizontal)(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"ariaLabel\", bar_r2.ariaLabel)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.dataLabelWidthChanged.emit({\n        size: $event,\n        index: i_r9\n      });\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", ctx_r7.barOrientation.Horizontal);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.valueScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.groupScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.valueScale)(\"activeEntries\", ctx_r2.activeEntries)(\"yScale\", ctx_r2.innerScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"roundEdges\", ctx_r2.roundEdges)(\"animations\", ctx_r2.animations)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 7);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event, group_r7);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r2.barChartType.Normalized)(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 7);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r2.barChartType.Stacked)(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"activeEntries\", ctx_r2.activeEntries)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nconst _c29 = [\"ngx-charts-series-vertical\", \"\"];\n\nfunction SeriesVerticalComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onClick($event);\n    })(\"activate\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activate.emit($event);\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx_r0.animations)(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", ctx_r0.barOrientation.Vertical)(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"ariaLabel\", bar_r2.ariaLabel)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.dataLabelHeightChanged.emit({\n        size: $event,\n        index: i_r9\n      });\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", ctx_r7.barOrientation.Vertical);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.groupScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.valueScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_5_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarVertical2DComponent__svg_g_5_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_5_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_5_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"activeEntries\", ctx_r2.activeEntries)(\"xScale\", ctx_r2.innerScale)(\"yScale\", ctx_r2.valueScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"seriesName\", group_r7.name)(\"roundEdges\", ctx_r2.roundEdges)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 7);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onClick($event, group_r7);\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event, group_r7);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r2.barChartType.Normalized)(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 7);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const group_r7 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const index_r8 = restoredCtx.index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r2.barChartType.Stacked)(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nconst _c30 = [\"ngx-charts-box\", \"\"];\n\nfunction BoxComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.BarOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction BoxComponent__svg_line_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 6);\n  }\n\n  if (rf & 2) {\n    const line_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"hidden\", ctx_r1.hideBar);\n    i0.ɵɵattribute(\"x1\", line_r2.v1.x)(\"y1\", line_r2.v1.y)(\"x2\", line_r2.v2.x)(\"y2\", line_r2.v2.y)(\"stroke\", ctx_r1.strokeColor)(\"stroke-width\", i_r3 === 2 ? ctx_r1.medianLineWidth : ctx_r1.whiskerStrokeWidth)(\"mask\", i_r3 ? undefined : ctx_r1.maskLine);\n  }\n}\n\nconst _c31 = [\"ngx-charts-box-series\", \"\"];\n\nfunction BoxChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 5);\n    i0.ɵɵlistener(\"activate\", function BoxChartComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onActivate($event);\n    })(\"deactivate\", function BoxChartComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onDeactivate($event);\n    })(\"select\", function BoxChartComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onClick($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const result_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"yScale\", ctx_r0.yScale)(\"colors\", ctx_r0.colors)(\"roundEdges\", ctx_r0.roundEdges)(\"strokeColor\", ctx_r0.strokeColor)(\"strokeWidth\", ctx_r0.strokeWidth)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"series\", result_r1)(\"dims\", ctx_r0.dims)(\"animations\", ctx_r0.animations)(\"gradient\", ctx_r0.gradient);\n  }\n}\n\nconst _c32 = [\"ngx-charts-bubble-series\", \"\"];\n\nfunction BubbleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\");\n    i0.ɵɵelementStart(2, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_select_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const circle_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick(circle_r1.data);\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const circle_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.activateCircle(circle_r1);\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const circle_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deactivateCircle(circle_r1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"transform\", circle_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r0.showGridLines)(\"dims\", ctx_r0.dims)(\"xScale\", ctx_r0.xScale)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r1.showGridLines)(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const series_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onClick($event, series_r7);\n    })(\"activate\", function BubbleChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onActivate($event);\n    })(\"deactivate\", function BubbleChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"rScale\", ctx_r2.rScale)(\"xScaleType\", ctx_r2.xScaleType)(\"yScaleType\", ctx_r2.yScaleType)(\"xAxisLabel\", ctx_r2.xAxisLabel)(\"yAxisLabel\", ctx_r2.yAxisLabel)(\"colors\", ctx_r2.colors)(\"data\", series_r7)(\"activeEntries\", ctx_r2.activeEntries)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate);\n  }\n}\n\nconst _c33 = [\"ngx-charts-heat-map-cell\", \"\"];\n\nfunction HeatMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c34 = [\"ngx-charts-heat-map-cell-series\", \"\"];\n\nconst _c35 = function (a0, a1, a2) {\n  return {\n    series: a0,\n    name: a1,\n    value: a2\n  };\n};\n\nfunction HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick(c_r1.cell);\n    })(\"activate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.activate.emit(c_r1.cell);\n    })(\"deactivate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit(c_r1.cell);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"data\", c_r1.data)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", i0.ɵɵpureFunction3(14, _c35, c_r1.series, c_r1.label, c_r1.data));\n  }\n}\n\nfunction HeatMapComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\");\n  }\n\n  if (rf & 2) {\n    const rect_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"x\", rect_r7.x)(\"y\", rect_r7.y)(\"rx\", rect_r7.rx)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\n\nconst _c36 = [\"ngx-charts-line\", \"\"];\nconst _c37 = [\"ngx-charts-line-series\", \"\"];\n\nfunction LineSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction LineSeriesComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", ctx_r1.isActive(ctx_r1.data))(\"inactive\", ctx_r1.isInactive(ctx_r1.data));\n    i0.ɵɵproperty(\"data\", ctx_r1.data)(\"path\", ctx_r1.outerPath)(\"fill\", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))(\"opacity\", ctx_r1.rangeFillOpacity)(\"animations\", ctx_r1.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"referenceLines\", ctx_r1.referenceLines)(\"showRefLines\", ctx_r1.showRefLines)(\"showRefLabels\", ctx_r1.showRefLabels);\n  }\n}\n\nfunction LineChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"curve\", ctx_r2.curve)(\"rangeFillOpacity\", ctx_r2.rangeFillOpacity)(\"hasRange\", ctx_r2.hasRange)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event);\n    })(\"activate\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"activeEntries\", ctx_r10.activeEntries)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction LineChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function LineChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function LineChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, LineChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction LineChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"curve\", ctx_r19.curve)(\"hasRange\", ctx_r19.hasRange)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function LineChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_10__svg_g_1_Template, 2, 8, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"scaleType\", ctx_r4.scaleType)(\"legend\", ctx_r4.legend);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c38 = [\"ngx-charts-pie-label\", \"\"];\nconst _c39 = [\"ngx-charts-polar-series\", \"\"];\n\nfunction PolarSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.seriesColor)(\"name\", ctx_r0.gradientId)(\"startOpacity\", 0.25)(\"endOpacity\", 1)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction PolarSeriesComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.select.emit(circle_r2.data);\n    })(\"activate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activate.emit({\n        name: circle_r2.data.series\n      });\n    })(\"deactivate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit({\n        name: circle_r2.data.series\n      });\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", ctx_r1.inactive ? 0.2 : 1);\n    i0.ɵɵproperty(\"cx\", circle_r2.cx)(\"cy\", circle_r2.cy)(\"r\", ctx_r1.circleRadius)(\"fill\", circle_r2.color)(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipPlacement\", ctx_r1.placementTypes.Top)(\"tooltipType\", ctx_r1.styleTypes.tooltip)(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", circle_r2.data);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 8);\n  }\n\n  if (rf & 2) {\n    const r_r6 = ctx.$implicit;\n    i0.ɵɵattribute(\"r\", r_r6);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, \"circle\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.radiusTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 10);\n  }\n\n  if (rf & 2) {\n    const tick_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"data\", tick_r8)(\"radius\", ctx_r7.outerRadius)(\"label\", tick_r8.label)(\"max\", ctx_r7.outerRadius)(\"value\", ctx_r7.showGridLines ? 1 : ctx_r7.outerRadius)(\"explodeSlices\", true)(\"animations\", ctx_r7.animations)(\"labelTrim\", ctx_r7.labelTrim)(\"labelTrimSize\", ctx_r7.labelTrimSize);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.thetaTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 11);\n    i0.ɵɵlistener(\"dimensionsChanged\", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r2.yAxisScale)(\"dims\", ctx_r2.yAxisDims)(\"showGridLines\", ctx_r2.showGridLines)(\"showLabel\", ctx_r2.showYAxisLabel)(\"labelText\", ctx_r2.yAxisLabel)(\"trimTicks\", ctx_r2.trimYAxisTicks)(\"maxTickLength\", ctx_r2.maxYAxisTickLength)(\"tickFormatting\", ctx_r2.yAxisTickFormatting);\n    i0.ɵɵattribute(\"transform\", ctx_r2.transformYAxis);\n  }\n}\n\nfunction PolarChartComponent__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 12);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r3.xAxisLabel)(\"offset\", ctx_r3.labelOffset)(\"orient\", ctx_r3.orientation.Bottom)(\"height\", ctx_r3.dims.height)(\"width\", ctx_r3.dims.width);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onClick($event);\n    })(\"activate\", function PolarChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function PolarChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r4.gradient)(\"xScale\", ctx_r4.xScale)(\"yScale\", ctx_r4.yScale)(\"colors\", ctx_r4.colors)(\"data\", series_r11)(\"activeEntries\", ctx_r4.activeEntries)(\"scaleType\", ctx_r4.scaleType)(\"curve\", ctx_r4.curve)(\"rangeFillOpacity\", ctx_r4.rangeFillOpacity)(\"animations\", ctx_r4.animations)(\"tooltipDisabled\", ctx_r4.tooltipDisabled)(\"tooltipTemplate\", ctx_r4.tooltipTemplate);\n  }\n}\n\nconst _c40 = [\"ngx-charts-pie-arc\", \"\"];\n\nfunction PieArcComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", ctx_r0.fill)(\"name\", ctx_r0.radialGradientId)(\"startOpacity\", ctx_r0.startOpacity);\n  }\n}\n\nconst _c41 = [\"ngx-charts-pie-series\", \"\"];\n\nfunction PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const arc_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", arc_r1)(\"radius\", ctx_r2.outerRadius)(\"color\", ctx_r2.color(arc_r1))(\"label\", ctx_r2.labelText(arc_r1))(\"labelTrim\", ctx_r2.trimLabels)(\"labelTrimSize\", ctx_r2.maxLabelLength)(\"max\", ctx_r2.max)(\"value\", arc_r1.value)(\"explodeSlices\", ctx_r2.explodeSlices)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction PieSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, \"g\", 1);\n    i0.ɵɵelementStart(2, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.activate.emit($event);\n    })(\"deactivate\", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.deactivate.emit($event);\n    })(\"dblclick\", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.dblclick.emit($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.labelVisible(arc_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"gradient\", ctx_r0.gradient)(\"data\", arc_r1.data)(\"max\", ctx_r0.max)(\"explodeSlices\", ctx_r0.explodeSlices)(\"isActive\", ctx_r0.isActive(arc_r1.data))(\"animate\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.getTooltipTitle(arc_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", arc_r1.data);\n  }\n}\n\nconst _c42 = \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\";\nconst _c43 = [\"ngx-charts-pie-grid-series\", \"\"];\n\nfunction PieGridSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    })(\"activate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.activate.emit($event);\n    })(\"deactivate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"data\", arc_r1.data)(\"gradient\", false)(\"pointerEvents\", arc_r1.pointerEvents)(\"animate\", arc_r1.animate);\n    i0.ɵɵattribute(\"class\", arc_r1.class);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 10);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", series_r1.percent)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.percent.toLocaleString(), \" \");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 12);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", series_r1.total)(\"countPrefix\", ctx_r4.label + \": \");\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r5.label, \": \", series_r1.total.toLocaleString(), \" \");\n  }\n}\n\nconst _c44 = function (a0) {\n  return {\n    data: a0\n  };\n};\n\nfunction PieGridComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵelementStart(1, \"g\", 4);\n    i0.ɵɵlistener(\"select\", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onClick($event);\n    })(\"activate\", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onActivate($event);\n    })(\"deactivate\", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, \"text\", 5);\n    i0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, \"text\", 6);\n    i0.ɵɵelementStart(4, \"text\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, \"text\", 8);\n    i0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, \"text\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", series_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"colors\", series_r1.colors)(\"data\", series_r1.data)(\"innerRadius\", series_r1.innerRadius)(\"outerRadius\", series_r1.outerRadius)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(i0.ɵɵpureFunction1(17, _c44, series_r1)))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", series_r1.data[0].data);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n  }\n}\n\nconst _c45 = [\"textEl\"];\nconst _c46 = [\"ngx-charts-card\", \"\"];\n\nfunction CardComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"fill\", ctx_r0.bandColor)(\"transform\", ctx_r0.transformBand)(\"d\", ctx_r0.bandPath);\n  }\n}\n\nconst _c47 = [\"ngx-charts-card-series\", \"\"];\n\nfunction CardSeriesComponent__svg_rect_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 2);\n  }\n\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"fill\", ctx_r0.emptyColor);\n    i0.ɵɵattribute(\"x\", c_r2.x)(\"y\", c_r2.y)(\"width\", c_r2.width)(\"height\", c_r2.height);\n  }\n}\n\nfunction CardSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r3.x)(\"y\", c_r3.y)(\"width\", c_r3.width)(\"height\", c_r3.height)(\"color\", c_r3.color)(\"bandColor\", c_r3.bandColor)(\"textColor\", c_r3.textColor)(\"data\", c_r3.data)(\"label\", c_r3.label)(\"medianSize\", ctx_r1.medianSize)(\"valueFormatting\", ctx_r1.valueFormatting)(\"labelFormatting\", ctx_r1.labelFormatting)(\"animations\", ctx_r1.animations);\n  }\n}\n\nconst _c48 = [\"ngx-charts-tree-map-cell\", \"\"];\n\nfunction TreeMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"countTo\", ctx_r2.value)(\"valueFormatting\", ctx_r2.valueFormatting);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.formattedValue, \" \");\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"foreignObject\", 4);\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, \"span\", 6);\n    i0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    i0.ɵɵattribute(\"x\", ctx_r1.x)(\"y\", ctx_r1.y)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"color\", ctx_r1.getTextColor())(\"height\", ctx_r1.height + \"px\")(\"width\", ctx_r1.width + \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.formattedLabel, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.animations);\n  }\n}\n\nconst _c49 = [\"ngx-charts-tree-map-cell-series\", \"\"];\n\nfunction TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", c_r1.data)(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"label\", c_r1.label)(\"value\", c_r1.value)(\"valueFormatting\", ctx_r0.valueFormatting)(\"labelFormatting\", ctx_r0.labelFormatting)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", c_r1.data);\n  }\n}\n\nconst _c50 = [\"valueTextEl\"];\nconst _c51 = [\"unitsTextEl\"];\n\nfunction LinearGaugeComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.transformLine)(\"stroke\", ctx_r0.colors.getColor(ctx_r0.units));\n  }\n}\n\nfunction LinearGaugeComponent__svg_line_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transformLine)(\"stroke\", ctx_r1.colors.getColor(ctx_r1.units));\n  }\n}\n\nconst _c52 = function () {\n  return {};\n};\n\nconst _c53 = [\"ngx-charts-gauge-arc\", \"\"];\nconst _c54 = [\"ngx-charts-gauge-axis\", \"\"];\n\nfunction GaugeAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r3.line);\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵelementStart(1, \"text\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"text-anchor\", tick_r4.textAnchor);\n    i0.ɵɵattribute(\"transform\", tick_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tick_r4.text, \" \");\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r5.line);\n  }\n}\n\nfunction GaugeComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onActivate($event);\n    })(\"deactivate\", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.rotation);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"backgroundArc\", arc_r3.backgroundArc)(\"valueArc\", arc_r3.valueArc)(\"cornerRadius\", ctx_r0.cornerRadius)(\"colors\", ctx_r0.colors)(\"isActive\", ctx_r0.isActive(arc_r3.valueArc.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"valueFormatting\", ctx_r0.valueFormatting)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction GaugeComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"bigSegments\", ctx_r1.bigSegments)(\"smallSegments\", ctx_r1.smallSegments)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"radius\", ctx_r1.outerRadius)(\"angleSpan\", ctx_r1.angleSpan)(\"valueScale\", ctx_r1.valueScale)(\"startAngle\", ctx_r1.startAngle)(\"tickFormatting\", ctx_r1.axisTickFormatting);\n  }\n}\n\nfunction GaugeComponent__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 7, 8);\n    i0.ɵɵelementStart(2, \"tspan\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"tspan\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.textTransform);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.displayValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.units);\n  }\n}\n\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n\nvar PlacementTypes;\n\n(function (PlacementTypes) {\n  PlacementTypes[\"Top\"] = \"top\";\n  PlacementTypes[\"Bottom\"] = \"bottom\";\n  PlacementTypes[\"Left\"] = \"left\";\n  PlacementTypes[\"Right\"] = \"right\";\n  PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Top) {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Bottom) {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Left) {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Right) {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\n\n\nclass PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Top) {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Bottom) {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Left) {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Right) {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n    let flip = false;\n\n    if (placement === PlacementTypes.Right) {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Left) {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Top) {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Bottom) {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static determinePlacement(placement, elmDim, hostDim, spacing) {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.Right) {\n        return PlacementTypes.Left;\n      } else if (placement === PlacementTypes.Left) {\n        return PlacementTypes.Right;\n      } else if (placement === PlacementTypes.Top) {\n        return PlacementTypes.Bottom;\n      } else if (placement === PlacementTypes.Bottom) {\n        return PlacementTypes.Top;\n      }\n    }\n\n    return placement;\n  }\n\n}\n\nclass TooltipContentComponent {\n  constructor(element, renderer, platformId) {\n    this.element = element;\n    this.renderer = renderer;\n    this.platformId = platformId;\n  }\n\n  get cssClasses() {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  ngAfterViewInit() {\n    setTimeout(this.position.bind(this));\n  }\n\n  position() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect(); // if no dims were found, never show\n\n    if (!hostDim.height && !hostDim.width) return;\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    } // animate its entry\n\n\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim) {\n    const {\n      top,\n      left\n    } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim) {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const {\n      top,\n      left\n    } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim) {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  onWindowResize() {\n    this.position();\n  }\n\n}\n\nTooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) {\n  return new (t || TooltipContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipContentComponent,\n  selectors: [[\"ngx-tooltip-content\"]],\n  viewQuery: function TooltipContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function TooltipContentComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, i0.ɵɵresolveWindow);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClasses);\n    }\n  },\n  inputs: {\n    host: \"host\",\n    showCaret: \"showCaret\",\n    type: \"type\",\n    placement: \"placement\",\n    alignment: \"alignment\",\n    spacing: \"spacing\",\n    cssClass: \"cssClass\",\n    title: \"title\",\n    template: \"template\",\n    context: \"context\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[3, \"hidden\"], [\"caretElm\", \"\"], [1, \"tooltip-content\"], [4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function TooltipContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"span\", 0, 1);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, \"span\", 3);\n      i0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, \"span\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"tooltip-caret position-\", ctx.placement, \"\");\n      i0.ɵɵproperty(\"hidden\", !ctx.showCaret);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n    }\n  },\n  directives: [i2.NgIf, i2.NgTemplateOutlet],\n  styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"],\n  encapsulation: 2\n});\n\n__decorate([throttleable(100)], TooltipContentComponent.prototype, \"onWindowResize\", null);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-tooltip-content',\n      template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    host: [{\n      type: Input\n    }],\n    showCaret: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    placement: [{\n      type: Input\n    }],\n    alignment: [{\n      type: Input\n    }],\n    spacing: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    caretElm: [{\n      type: ViewChild,\n      args: ['caretElm']\n    }],\n    cssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    onWindowResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }]\n  });\n})();\n\nclass InjectionRegisteryService {\n  constructor(injectionService) {\n    this.injectionService = injectionService;\n    this.defaults = {};\n    this.components = new Map();\n  }\n\n  getByType(type = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings) {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type, bindings) {\n    bindings = this.assignDefaults(bindings);\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n    return component;\n  }\n\n  destroy(instance) {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll() {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type) {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  injectComponent(type, bindings) {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  assignDefaults(bindings) {\n    const inputs = Object.assign({}, this.defaults.inputs);\n    const outputs = Object.assign({}, this.defaults.outputs);\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = {\n        inputs: bindings\n      };\n    }\n\n    if (inputs) {\n      bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);\n    }\n\n    if (outputs) {\n      bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);\n    }\n\n    return bindings;\n  }\n\n  register(type, component) {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n\n}\n\nfunction isViewContainerRef(x) {\n  return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n\n\nclass InjectionService {\n  constructor(applicationRef, componentFactoryResolver, injector) {\n    this.applicationRef = applicationRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.injector = injector;\n  }\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n\n\n  static setGlobalRootViewContainer(container) {\n    InjectionService.globalRootViewContainer = container;\n  }\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainer() {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n    throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n  }\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n\n\n  setRootViewContainer(container) {\n    this._container = container;\n  }\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getComponentRootNode(component) {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n\n    if (component.hostView && component.hostView.rootNodes.length > 0) {\n      return component.hostView.rootNodes[0];\n    } // the top most component root node has no `hostView`\n\n\n    return component.location.nativeElement;\n  }\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainerNode(component) {\n    return this.getComponentRootNode(component);\n  }\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n\n\n  projectComponentBindings(component, bindings) {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n\n\n  appendComponent(componentClass, bindings = {}, location) {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n    const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n    const portal = new ComponentPortal(componentClass);\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n\n}\n\nInjectionService.globalRootViewContainer = null;\n\nInjectionService.ɵfac = function InjectionService_Factory(t) {\n  return new (t || InjectionService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector));\n};\n\nInjectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InjectionService,\n  factory: InjectionService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InjectionService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ApplicationRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\nclass TooltipService extends InjectionRegisteryService {\n  constructor(injectionService) {\n    super(injectionService);\n    this.type = TooltipContentComponent;\n  }\n\n}\n\nTooltipService.ɵfac = function TooltipService_Factory(t) {\n  return new (t || TooltipService)(i0.ɵɵinject(InjectionService));\n};\n\nTooltipService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TooltipService,\n  factory: TooltipService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: InjectionService\n    }];\n  }, null);\n})();\n\nvar LegendPosition;\n\n(function (LegendPosition) {\n  LegendPosition[\"Right\"] = \"right\";\n  LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\n\nvar LegendType;\n\n(function (LegendType) {\n  LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n  LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n\n(function (ScaleType) {\n  ScaleType[\"Time\"] = \"time\";\n  ScaleType[\"Linear\"] = \"linear\";\n  ScaleType[\"Ordinal\"] = \"ordinal\";\n  ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n  constructor() {\n    this.horizontal = false;\n  }\n\n  ngOnChanges(changes) {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n\n\n  gradientString(colors, splits) {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n    return pairs.join(', ');\n  }\n\n}\n\nScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) {\n  return new (t || ScaleLegendComponent)();\n};\n\nScaleLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScaleLegendComponent,\n  selectors: [[\"ngx-charts-scale-legend\"]],\n  inputs: {\n    valueRange: \"valueRange\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    horizontal: \"horizontal\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 10,\n  consts: [[1, \"scale-legend\"], [1, \"scale-legend-label\"], [1, \"scale-legend-wrap\"]],\n  template: function ScaleLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"span\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"div\", 2);\n      i0.ɵɵelementStart(5, \"div\", 1);\n      i0.ɵɵelementStart(6, \"span\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.horizontal ? undefined : ctx.height, \"px\")(\"width\", ctx.width, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background\", ctx.gradient);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());\n    }\n  },\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScaleLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-scale-legend',\n      template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"]\n    }]\n  }], null, {\n    valueRange: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\n\n\nfunction formatLabel(label) {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\n\n\nfunction escapeLabel(label) {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n\nclass LegendEntryComponent {\n  constructor() {\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.toggle = new EventEmitter();\n  }\n\n  get trimmedLabel() {\n    return this.formattedLabel || '(empty)';\n  }\n\n  onMouseEnter() {\n    this.activate.emit({\n      name: this.label\n    });\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit({\n      name: this.label\n    });\n  }\n\n}\n\nLegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) {\n  return new (t || LegendEntryComponent)();\n};\n\nLegendEntryComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendEntryComponent,\n  selectors: [[\"ngx-charts-legend-entry\"]],\n  hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function LegendEntryComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function LegendEntryComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    color: \"color\",\n    label: \"label\",\n    formattedLabel: \"formattedLabel\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    toggle: \"toggle\"\n  },\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"-1\", 3, \"title\", \"click\"], [1, \"legend-label-color\", 3, \"click\"], [1, \"legend-label-text\"]],\n  template: function LegendEntryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_0_listener() {\n        return ctx.select.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementStart(1, \"span\", 1);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_1_listener() {\n        return ctx.toggle.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵproperty(\"title\", ctx.formattedLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background-color\", ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.trimmedLabel, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendEntryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend-entry',\n      template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    formattedLabel: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    toggle: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LegendComponent {\n  constructor(cd) {\n    this.cd = cd;\n    this.horizontal = false;\n    this.labelClick = new EventEmitter();\n    this.labelActivate = new EventEmitter();\n    this.labelDeactivate = new EventEmitter();\n    this.legendEntries = [];\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries() {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nLegendComponent.ɵfac = function LegendComponent_Factory(t) {\n  return new (t || LegendComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendComponent,\n  selectors: [[\"ngx-charts-legend\"]],\n  inputs: {\n    data: \"data\",\n    title: \"title\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    activeEntries: \"activeEntries\",\n    horizontal: \"horizontal\"\n  },\n  outputs: {\n    labelClick: \"labelClick\",\n    labelActivate: \"labelActivate\",\n    labelDeactivate: \"labelDeactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 9,\n  consts: [[\"class\", \"legend-title\", 4, \"ngIf\"], [1, \"legend-wrap\"], [1, \"legend-labels\"], [\"class\", \"legend-label\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"legend-title\"], [1, \"legend-title-text\"], [1, \"legend-label\"], [3, \"label\", \"formattedLabel\", \"color\", \"isActive\", \"select\", \"activate\", \"deactivate\"]],\n  template: function LegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, \"header\", 0);\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵelementStart(3, \"ul\", 2);\n      i0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, \"li\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.title == null ? null : ctx.title.length) > 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"max-height\", ctx.height - 45, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendEntries)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [LegendEntryComponent, i2.NgIf, i2.NgForOf],\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend',\n      template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }],\n    labelClick: [{\n      type: Output\n    }],\n    labelActivate: [{\n      type: Output\n    }],\n    labelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartComponent {\n  constructor() {\n    this.showLegend = false;\n    this.animations = true;\n    this.legendLabelClick = new EventEmitter();\n    this.legendLabelActivate = new EventEmitter();\n    this.legendLabelDeactivate = new EventEmitter();\n    this.LegendPosition = LegendPosition;\n    this.LegendType = LegendType;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    let legendColumns = 0;\n\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n        if (this.legendType === LegendType.ScaleLegend) {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n    this.chartWidth = Math.floor(this.view[0] * chartColumns / 12.0);\n    this.legendWidth = !this.legendOptions || this.legendOptions.position === LegendPosition.Right ? Math.floor(this.view[0] * legendColumns / 12.0) : this.chartWidth;\n  }\n\n  getLegendType() {\n    return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n  }\n\n}\n\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\n\nChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"ngx-charts-chart\"]],\n  inputs: {\n    view: \"view\",\n    showLegend: \"showLegend\",\n    legendOptions: \"legendOptions\",\n    legendType: \"legendType\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    legendLabelClick: \"legendLabelClick\",\n    legendLabelActivate: \"legendLabelActivate\",\n    legendLabelDeactivate: \"legendLabelDeactivate\"\n  },\n  features: [i0.ɵɵProvidersFeature([TooltipService]), i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 5,\n  vars: 6,\n  consts: [[1, \"ngx-charts-outer\"], [1, \"ngx-charts\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\", 4, \"ngIf\"], [1, \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\"], [1, \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"svg\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, \"ngx-charts-scale-legend\", 2);\n      i0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, \"ngx-charts-legend\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.view[0], \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.chartWidth)(\"height\", ctx.view[1]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.ScaleLegend);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.Legend);\n    }\n  },\n  directives: [ScaleLegendComponent, LegendComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartComponent, [{\n    type: Component,\n    args: [{\n      providers: [TooltipService],\n      selector: 'ngx-charts-chart',\n      template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    view: [{\n      type: Input\n    }],\n    showLegend: [{\n      type: Input\n    }],\n    legendOptions: [{\n      type: Input\n    }],\n    legendType: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    legendLabelClick: [{\n      type: Output\n    }],\n    legendLabelActivate: [{\n      type: Output\n    }],\n    legendLabelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Visibility Observer\n */\n\n\nclass VisibilityObserver {\n  constructor(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.visible = new EventEmitter();\n    this.isVisible = false;\n    this.runCheck();\n  }\n\n  destroy() {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange() {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck() {\n    const check = () => {\n      if (!this.element) {\n        return;\n      } // https://davidwalsh.name/offsetheight-visibility\n\n\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n\n}\n\nVisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n  return new (t || VisibilityObserver)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nVisibilityObserver.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: VisibilityObserver,\n  selectors: [[\"visibility-observer\"]],\n  outputs: {\n    visible: \"visible\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VisibilityObserver, [{\n    type: Directive,\n    args: [{\n      selector: 'visibility-observer'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    visible: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n  constructor(chartElement, zone, cd, platformId) {\n    this.chartElement = chartElement;\n    this.zone = zone;\n    this.cd = cd;\n    this.platformId = platformId;\n    this.scheme = 'cool';\n    this.schemeType = ScaleType.Ordinal;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.bindWindowResizeEvent(); // listen for visibility of the element for hidden by default scenario\n\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    } // default values if width or height are 0 or undefined\n\n\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims() {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return {\n        width,\n        height\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n\n\n  formatDates() {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n\n      if (isDate(g.label)) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n\n          if (isDate(d.label)) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  unbindEvents() {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  bindWindowResizeEvent() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = fromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n\n\n  cloneData(data) {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n\n}\n\nBaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) {\n  return new (t || BaseChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nBaseChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BaseChartComponent,\n  selectors: [[\"base-chart\"]],\n  inputs: {\n    results: \"results\",\n    view: \"view\",\n    scheme: \"scheme\",\n    schemeType: \"schemeType\",\n    customColors: \"customColors\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  template: function BaseChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-chart',\n      template: ` <div></div> `\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    results: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"Top\"] = \"top\";\n  Orientation[\"Bottom\"] = \"bottom\";\n  Orientation[\"Left\"] = \"left\";\n  Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n  constructor(element) {\n    this.textHeight = 25;\n    this.margin = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Bottom:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Left:\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      case Orientation.Right:\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      default:\n    }\n  }\n\n}\n\nAxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) {\n  return new (t || AxisLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAxisLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AxisLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-axis-label\", \"\"]],\n  inputs: {\n    orient: \"orient\",\n    label: \"label\",\n    offset: \"offset\",\n    width: \"width\",\n    height: \"height\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c3,\n  decls: 2,\n  vars: 6,\n  template: function AxisLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"stroke-width\", ctx.strokeWidth)(\"x\", ctx.x)(\"y\", ctx.y)(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxisLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-axis-label]',\n      template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    orient: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction trimLabel(s, max = 16) {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n\nvar TextAnchor;\n\n(function (TextAnchor) {\n  TextAnchor[\"Start\"] = \"start\";\n  TextAnchor[\"Middle\"] = \"middle\";\n  TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.rotateTicks = true;\n    this.dimensionsChanged = new EventEmitter();\n    this.verticalSpacing = 20;\n    this.rotateLabels = false;\n    this.innerTickSize = 6;\n    this.outerTickSize = 6;\n    this.tickPadding = 3;\n    this.textAnchor = TextAnchor.Middle;\n    this.maxTicksLength = 0;\n    this.maxAllowedLength = 16;\n    this.height = 0;\n    this.approxHeight = 10;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({\n        height: this.approxHeight\n      });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({\n        height: this.height\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n    this.adjustedScale = this.scale.bandwidth ? function (d) {\n      return this.scale(d) + this.scale.bandwidth() * 0.5;\n    } : this.scale;\n    this.textTransform = '';\n\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = TextAnchor.End;\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = TextAnchor.Middle;\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks) {\n    let angle = 0;\n    this.maxTicksLength = 0;\n\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n\n    const wordWidth = len * charWidth;\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length); // calculate optimal angle\n\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth) {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick) {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform() {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n}\n\nXAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) {\n  return new (t || XAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nXAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis-ticks\", \"\"]],\n  viewQuery: function XAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineHeight: \"gridLineHeight\",\n    width: \"width\",\n    rotateTicks: \"rotateTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [4, \"ngIf\"], [\"y2\", \"0\", 1, \"gridline-path\", \"gridline-path-vertical\"]],\n  template: function XAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 5, 7, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, \"g\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineHeight: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass XAxisComponent {\n  constructor() {\n    this.rotateTicks = true;\n    this.showGridLines = false;\n    this.xOrient = Orientation.Bottom;\n    this.xAxisOffset = 0;\n    this.dimensionsChanged = new EventEmitter();\n    this.xAxisClassName = 'x axis';\n    this.labelOffset = 0;\n    this.fill = 'none';\n    this.stroke = 'stroke';\n    this.tickStroke = '#ccc';\n    this.strokeWidth = 'none';\n    this.padding = 5;\n    this.orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({\n    height\n  }) {\n    const newLabelOffset = height + 25 + 5;\n\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          height\n        });\n      }, 0);\n    }\n  }\n\n}\n\nXAxisComponent.ɵfac = function XAxisComponent_Factory(t) {\n  return new (t || XAxisComponent)();\n};\n\nXAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis\", \"\"]],\n  viewQuery: function XAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(XAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    xScale: \"xScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    rotateTicks: \"rotateTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    ticks: \"ticks\",\n    xAxisTickCount: \"xAxisTickCount\",\n    xOrient: \"xOrient\",\n    xAxisOffset: \"xAxisOffset\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c6,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function XAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 12, \"g\", 0);\n      i0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.xAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  directives: [XAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis]',\n      template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    xScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    xAxisTickCount: [{\n      type: Input\n    }],\n    xOrient: [{\n      type: Input\n    }],\n    xAxisOffset: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [XAxisTicksComponent]\n    }]\n  });\n})();\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\n\n\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n  let retval = '';\n  w = Math.floor(w);\n  h = Math.floor(h);\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n  return retval;\n}\n\nclass YAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.showRefLabels = false;\n    this.showRefLines = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.innerTickSize = 6;\n    this.tickPadding = 3;\n    this.verticalSpacing = 20;\n    this.textAnchor = TextAnchor.Middle;\n    this.width = 0;\n    this.outerTickSize = 6;\n    this.rotateLabels = false;\n    this.referenceLineLength = 0;\n    this.Orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({\n        width: this.width\n      });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({\n        width\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    let scale;\n    const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth ? function (d) {\n      return scale(d) + scale.bandwidth() * 0.5;\n    } : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Bottom:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Left:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.End;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      case Orientation.Right:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.Start;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      default:\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines() {\n    this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n    this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n    this.referenceLineLength = this.referenceLines.length;\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [false, false, false, false]);\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight) {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick) {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform() {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth() {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n\n}\n\nYAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) {\n  return new (t || YAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nYAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis-ticks\", \"\"]],\n  viewQuery: function YAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineWidth: \"gridLineWidth\",\n    height: \"height\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    showRefLines: \"showRefLines\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c7,\n  decls: 6,\n  vars: 4,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"reference-area\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [1, \"reference-area\"], [4, \"ngIf\"], [\"class\", \"gridline-path gridline-path-horizontal\", \"x1\", \"0\", 4, \"ngIf\"], [\"x1\", \"0\", 1, \"gridline-path\", \"gridline-path-horizontal\"], [\"x1\", \"0\", 1, \"refline-path\", \"gridline-path-horizontal\"], [1, \"refline-label\"]],\n  template: function YAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 5, 9, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, \"path\", 2);\n      i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, \"g\", 3);\n      i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.referenceLines);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineWidth: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass YAxisComponent {\n  constructor() {\n    this.showGridLines = false;\n    this.yOrient = Orientation.Left;\n    this.yAxisOffset = 0;\n    this.dimensionsChanged = new EventEmitter();\n    this.yAxisClassName = 'y axis';\n    this.labelOffset = 15;\n    this.fill = 'none';\n    this.stroke = '#CCC';\n    this.tickStroke = '#CCC';\n    this.strokeWidth = 1;\n    this.padding = 5;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.offset = -(this.yAxisOffset + this.padding);\n\n    if (this.yOrient === Orientation.Right) {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({\n    width\n  }) {\n    if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    }\n  }\n\n}\n\nYAxisComponent.ɵfac = function YAxisComponent_Factory(t) {\n  return new (t || YAxisComponent)();\n};\n\nYAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis\", \"\"]],\n  viewQuery: function YAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(YAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    yScale: \"yScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    ticks: \"ticks\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    yAxisTickCount: \"yAxisTickCount\",\n    yOrient: \"yOrient\",\n    referenceLines: \"referenceLines\",\n    showRefLines: \"showRefLines\",\n    showRefLabels: \"showRefLabels\",\n    yAxisOffset: \"yAxisOffset\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c8,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function YAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 14, \"g\", 0);\n      i0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.yAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  directives: [YAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis]',\n      template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    yScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    yAxisTickCount: [{\n      type: Input\n    }],\n    yOrient: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    yAxisOffset: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [YAxisTicksComponent]\n    }]\n  });\n})();\n\nclass AxesModule {}\n\nAxesModule.ɵfac = function AxesModule_Factory(t) {\n  return new (t || AxesModule)();\n};\n\nAxesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AxesModule\n});\nAxesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n      exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n    }]\n  }], null, null);\n})();\n\nvar StyleTypes;\n\n(function (StyleTypes) {\n  StyleTypes[\"popover\"] = \"popover\";\n  StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n\n(function (ShowTypes) {\n  ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n  ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n  ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n  constructor(tooltipService, viewContainerRef, renderer) {\n    this.tooltipService = tooltipService;\n    this.viewContainerRef = viewContainerRef;\n    this.renderer = renderer;\n    this.tooltipCssClass = '';\n    this.tooltipAppendToBody = true;\n    this.tooltipSpacing = 10;\n    this.tooltipDisabled = false;\n    this.tooltipShowCaret = true;\n    this.tooltipPlacement = PlacementTypes.Top;\n    this.tooltipAlignment = PlacementTypes.Center;\n    this.tooltipType = StyleTypes.popover;\n    this.tooltipCloseOnClickOutside = true;\n    this.tooltipCloseOnMouseLeave = true;\n    this.tooltipHideTimeout = 300;\n    this.tooltipShowTimeout = 100;\n    this.tooltipShowEvent = ShowTypes.all;\n    this.tooltipImmediateExit = false;\n    this.show = new EventEmitter();\n    this.hide = new EventEmitter();\n  }\n\n  get listensForFocus() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  get listensForHover() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  ngOnDestroy() {\n    this.hideTooltip(true);\n  }\n\n  onFocus() {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  onBlur() {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  onMouseEnter() {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  onMouseLeave(target) {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate) {\n    if (this.component || this.tooltipDisabled) return;\n    const time = immediate ? 0 : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options); // add a tiny timeout to avoid event re-triggers\n\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip) {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    }); // content mouse leave listener\n\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    } // content close on click outside\n\n\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate = false) {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent(); // emit events\n\n      this.hide.emit(true); // destroy component\n\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  createBoundOptions() {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n\n}\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(i0.ɵɵdirectiveInject(TooltipService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nTooltipDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"ngx-tooltip\", \"\"]],\n  hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function TooltipDirective_focusin_HostBindingHandler() {\n        return ctx.onFocus();\n      })(\"blur\", function TooltipDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler($event) {\n        return ctx.onMouseLeave($event.target);\n      })(\"click\", function TooltipDirective_click_HostBindingHandler() {\n        return ctx.onMouseClick();\n      });\n    }\n  },\n  inputs: {\n    tooltipCssClass: \"tooltipCssClass\",\n    tooltipTitle: \"tooltipTitle\",\n    tooltipAppendToBody: \"tooltipAppendToBody\",\n    tooltipSpacing: \"tooltipSpacing\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipShowCaret: \"tooltipShowCaret\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipAlignment: \"tooltipAlignment\",\n    tooltipType: \"tooltipType\",\n    tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\",\n    tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\",\n    tooltipHideTimeout: \"tooltipHideTimeout\",\n    tooltipShowTimeout: \"tooltipShowTimeout\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipShowEvent: \"tooltipShowEvent\",\n    tooltipContext: \"tooltipContext\",\n    tooltipImmediateExit: \"tooltipImmediateExit\"\n  },\n  outputs: {\n    show: \"show\",\n    hide: \"hide\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-tooltip]'\n    }]\n  }], function () {\n    return [{\n      type: TooltipService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    tooltipCssClass: [{\n      type: Input\n    }],\n    tooltipTitle: [{\n      type: Input\n    }],\n    tooltipAppendToBody: [{\n      type: Input\n    }],\n    tooltipSpacing: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipShowCaret: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipAlignment: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    tooltipCloseOnClickOutside: [{\n      type: Input\n    }],\n    tooltipCloseOnMouseLeave: [{\n      type: Input\n    }],\n    tooltipHideTimeout: [{\n      type: Input\n    }],\n    tooltipShowTimeout: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipShowEvent: [{\n      type: Input\n    }],\n    tooltipContext: [{\n      type: Input\n    }],\n    tooltipImmediateExit: [{\n      type: Input\n    }],\n    show: [{\n      type: Output\n    }],\n    hide: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focusin']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave', ['$event.target']]\n    }],\n    onMouseClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nclass TooltipModule {}\n\nTooltipModule.ɵfac = function TooltipModule_Factory(t) {\n  return new (t || TooltipModule)();\n};\n\nTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [InjectionService, TooltipService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TooltipContentComponent, TooltipDirective],\n      providers: [InjectionService, TooltipService],\n      exports: [TooltipContentComponent, TooltipDirective],\n      imports: [CommonModule],\n      entryComponents: [TooltipContentComponent]\n    }]\n  }], null, null);\n})();\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\n\nfunction id() {\n  let newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4); // append a 'a' because neo gets mad\n\n  newId = `a${newId}`; // ensure not already used\n\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n\nvar BarOrientation;\n\n(function (BarOrientation) {\n  BarOrientation[\"Vertical\"] = \"vertical\";\n  BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n  constructor() {\n    this.orientation = BarOrientation.Vertical;\n  }\n\n  ngOnChanges(changes) {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === BarOrientation.Horizontal) {\n      this.x2 = '100%';\n    } else if (this.orientation === BarOrientation.Vertical) {\n      this.y1 = '100%';\n    }\n  }\n\n}\n\nSvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) {\n  return new (t || SvgLinearGradientComponent)();\n};\n\nSvgLinearGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgLinearGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-linear-gradient\", \"\"]],\n  inputs: {\n    orientation: \"orientation\",\n    name: \"name\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c9,\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgLinearGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"linearGradient\", 0);\n      i0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"x1\", ctx.x1)(\"y1\", ctx.y1)(\"x2\", ctx.x2)(\"y2\", ctx.y2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  directives: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgLinearGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-linear-gradient]',\n      template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    orientation: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass CircleComponent {\n  constructor() {\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes) {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n\n}\n\nCircleComponent.ɵfac = function CircleComponent_Factory(t) {\n  return new (t || CircleComponent)();\n};\n\nCircleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleComponent,\n  selectors: [[\"g\", \"ngx-charts-circle\", \"\"]],\n  hostBindings: function CircleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CircleComponent_click_HostBindingHandler() {\n        return ctx.onClick();\n      })(\"mouseenter\", function CircleComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function CircleComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    cx: \"cx\",\n    cy: \"cy\",\n    r: \"r\",\n    fill: \"fill\",\n    stroke: \"stroke\",\n    data: \"data\",\n    classNames: \"classNames\",\n    circleOpacity: \"circleOpacity\",\n    pointerEvents: \"pointerEvents\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c10,\n  decls: 1,\n  vars: 8,\n  template: function CircleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"circle\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke)(\"opacity\", ctx.circleOpacity)(\"class\", ctx.classNames)(\"pointer-events\", ctx.pointerEvents);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle]',\n      template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    r: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    classNames: [{\n      type: Input\n    }],\n    circleOpacity: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar SeriesType;\n\n(function (SeriesType) {\n  SeriesType[\"Standard\"] = \"standard\";\n  SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\n\nclass CircleSeriesComponent {\n  constructor() {\n    this.type = SeriesType.Standard;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barVisible = false;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges() {\n    this.update();\n  }\n\n  update() {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle() {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d, i) {\n    const seriesName = this.data.name;\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n    let cx;\n\n    if (this.scaleType === ScaleType.Time) {\n      cx = this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n    let color;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      if (this.type === SeriesType.Standard) {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({\n    tooltipLabel,\n    value,\n    seriesName,\n    min,\n    max\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min, max) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n\n        result += min.toLocaleString();\n\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [{\n      offset: 0,\n      color,\n      opacity: 0.2\n    }, {\n      offset: 100,\n      color,\n      opacity: 1\n    }];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle() {\n    this.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle() {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n}\n\nCircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) {\n  return new (t || CircleSeriesComponent)();\n};\n\nCircleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-circle-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    type: \"type\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c11,\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"class\", \"tooltip-bar\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [1, \"tooltip-bar\"]],\n  template: function CircleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 5, 21, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.circle);\n    }\n  },\n  directives: [SvgLinearGradientComponent, CircleComponent, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle-series]',\n      template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 1\n      }))])])]\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GridPanelComponent {}\n\nGridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) {\n  return new (t || GridPanelComponent)();\n};\n\nGridPanelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel\", \"\"]],\n  inputs: {\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\"\n  },\n  attrs: _c13,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke\", \"none\", 1, \"gridpanel\"]],\n  template: function GridPanelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"rect\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"height\", ctx.height)(\"width\", ctx.width)(\"x\", ctx.x)(\"y\", ctx.y);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel]',\n      template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ClassEnum;\n\n(function (ClassEnum) {\n  ClassEnum[\"Odd\"] = \"odd\";\n  ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\n\nclass GridPanelSeriesComponent {\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels() {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = ClassEnum.Odd;\n\n      if (this.orient === BarOrientation.Vertical) {\n        const position = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === BarOrientation.Horizontal) {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n\n}\n\nGridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) {\n  return new (t || GridPanelSeriesComponent)();\n};\n\nGridPanelSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    orient: \"orient\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c14,\n  decls: 1,\n  vars: 1,\n  consts: [[\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\", \"grid-panel\", \"odd\", \"even\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\"]],\n  template: function GridPanelSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridPanels);\n    }\n  },\n  directives: [GridPanelComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel-series]',\n      template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }]\n  });\n})();\n\nclass SvgRadialGradientComponent {\n  constructor() {\n    this.endOpacity = 1;\n    this.cx = 0;\n    this.cy = 0;\n  }\n\n  get stops() {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value) {\n    this.stopsInput = value;\n  }\n\n  ngOnChanges(changes) {\n    this.r = '30%';\n\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [{\n        offset: 0,\n        color: this.color,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.color,\n        opacity: this.endOpacity\n      }];\n    }\n  }\n\n}\n\nSvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) {\n  return new (t || SvgRadialGradientComponent)();\n};\n\nSvgRadialGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgRadialGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-radial-gradient\", \"\"]],\n  inputs: {\n    color: \"color\",\n    name: \"name\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    cx: \"cx\",\n    cy: \"cy\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c15,\n  decls: 2,\n  vars: 5,\n  consts: [[\"gradientUnits\", \"userSpaceOnUse\", 3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgRadialGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"radialGradient\", 0);\n      i0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  directives: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgRadialGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-radial-gradient]',\n      template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass AreaComponent {\n  constructor(element) {\n    this.opacity = 1;\n    this.startOpacity = 0.5;\n    this.endOpacity = 1;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.animationsLoaded = false;\n    this.hasGradient = false;\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    if (!this.animationsLoaded) {\n      this.loadAnimation();\n      this.animationsLoaded = true;\n    }\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation() {\n    this.areaPath = this.startingPath;\n    setTimeout(this.updatePathEl.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: this.endOpacity\n    }];\n  }\n\n}\n\nAreaComponent.ɵfac = function AreaComponent_Factory(t) {\n  return new (t || AreaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaComponent,\n  selectors: [[\"g\", \"ngx-charts-area\", \"\"]],\n  inputs: {\n    data: \"data\",\n    path: \"path\",\n    startingPath: \"startingPath\",\n    fill: \"fill\",\n    opacity: \"opacity\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    gradient: \"gradient\",\n    stops: \"stops\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c16,\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [1, \"area\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function AreaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(1, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"opacity\", ctx.opacity);\n      i0.ɵɵattribute(\"d\", ctx.areaPath)(\"fill\", ctx.gradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  directives: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area]',\n      template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    startingPath: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})(); // Robert Penner's easeOutExpo\n\n\nfunction easeOutExpo(t, b, c, d) {\n  return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\n\n\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\n\n\nfunction decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n\n\nclass CountUpDirective {\n  constructor(cd, element) {\n    this.cd = cd;\n    this.countDuration = 1;\n    this.countPrefix = '';\n    this.countSuffix = '';\n    this.countChange = new EventEmitter();\n    this.countFinish = new EventEmitter();\n    this.value = '';\n    this._countDecimals = 0;\n    this._countTo = 0;\n    this._countFrom = 0;\n    this.nativeElement = element.nativeElement;\n  }\n\n  set countDecimals(val) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals() {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo() {\n    return this._countTo;\n  }\n\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom() {\n    return this._countFrom;\n  }\n\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start() {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({\n      value,\n      progress,\n      finished\n    }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({\n        value: this.value,\n        progress\n      });\n      if (finished) this.countFinish.emit({\n        value: this.value,\n        progress\n      });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n\n}\n\nCountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n  return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCountUpDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CountUpDirective,\n  selectors: [[\"\", \"ngx-charts-count-up\", \"\"]],\n  inputs: {\n    countDuration: \"countDuration\",\n    countPrefix: \"countPrefix\",\n    countSuffix: \"countSuffix\",\n    valueFormatting: \"valueFormatting\",\n    countDecimals: \"countDecimals\",\n    countTo: \"countTo\",\n    countFrom: \"countFrom\"\n  },\n  outputs: {\n    countChange: \"countChange\",\n    countFinish: \"countFinish\"\n  },\n  attrs: _c17,\n  decls: 1,\n  vars: 1,\n  template: function CountUpDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountUpDirective, [{\n    type: Component,\n    args: [{\n      selector: '[ngx-charts-count-up]',\n      template: ` {{ value }} `\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    countDuration: [{\n      type: Input\n    }],\n    countPrefix: [{\n      type: Input\n    }],\n    countSuffix: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    countDecimals: [{\n      type: Input\n    }],\n    countTo: [{\n      type: Input\n    }],\n    countFrom: [{\n      type: Input\n    }],\n    countChange: [{\n      type: Output\n    }],\n    countFinish: [{\n      type: Output\n    }]\n  });\n})(); // If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\n\n\nlet root;\n\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} // tslint:disable-next-line:variable-name\n\n\nconst MouseEvent = root.MouseEvent;\n\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, {\n      bubbles,\n      cancelable\n    });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n\nclass TooltipArea {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.anchorOpacity = 0;\n    this.anchorPos = -1;\n    this.anchorValues = [];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.showPercentage = false;\n    this.tooltipDisabled = false;\n    this.hover = new EventEmitter();\n  }\n\n  getValues(xVal) {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n\n        let color;\n\n        if (this.colors.scaleType === ScaleType.Linear) {\n          let v = val;\n\n          if (item.d1) {\n            v = item.d1;\n          }\n\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n    this.anchorValues = this.getValues(closestPoint);\n\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = (minIndex + maxIndex) / 2 | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip() {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip() {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem) {\n    let result = '';\n\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n\n    result += ': ';\n\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n\n        result += tooltipItem.min.toLocaleString();\n\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n\n      result += ')';\n    }\n\n    return result;\n  }\n\n}\n\nTooltipArea.ɵfac = function TooltipArea_Factory(t) {\n  return new (t || TooltipArea)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipArea.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipArea,\n  selectors: [[\"g\", \"ngx-charts-tooltip-area\", \"\"]],\n  viewQuery: function TooltipArea_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c18, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);\n    }\n  },\n  inputs: {\n    dims: \"dims\",\n    xSet: \"xSet\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    results: \"results\",\n    colors: \"colors\",\n    showPercentage: \"showPercentage\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    hover: \"hover\"\n  },\n  attrs: _c19,\n  decls: 6,\n  vars: 18,\n  consts: [[\"y\", \"0\", 1, \"tooltip-area\", 2, \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mousemove\", \"mouseleave\"], [\"defaultTooltipTemplate\", \"\"], [\"y\", \"0\", \"ngx-tooltip\", \"\", 1, \"tooltip-anchor\", 3, \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipSpacing\", \"tooltipTemplate\", \"tooltipContext\", \"tooltipImmediateExit\"], [\"tooltipAnchor\", \"\"], [1, \"area-tooltip-container\"], [\"class\", \"tooltip-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"tooltip-item\"], [1, \"tooltip-item-color\"]],\n  template: function TooltipArea_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵelementStart(1, \"rect\", 0);\n      i0.ɵɵlistener(\"mousemove\", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) {\n        return ctx.mouseMove($event);\n      })(\"mouseleave\", function TooltipArea_Template__svg_rect_mouseleave_1_listener() {\n        return ctx.hideTooltip();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(4, \"rect\", 2, 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(3);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", 0)(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"opacity\", ctx.anchorOpacity)(\"pointer-events\", \"none\");\n      i0.ɵɵproperty(\"@animationState\", ctx.anchorOpacity !== 0 ? \"active\" : \"inactive\")(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Right)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipSpacing\", 15)(\"tooltipTemplate\", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)(\"tooltipContext\", ctx.anchorValues)(\"tooltipImmediateExit\", true);\n      i0.ɵɵattribute(\"x\", ctx.anchorPos)(\"width\", 1)(\"height\", ctx.dims.height);\n    }\n  },\n  directives: [i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition('inactive => active', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 0.7\n    }))]), transition('active => inactive', [style({\n      opacity: 0.7\n    }), animate(250, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipArea, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tooltip-area]',\n      template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition('inactive => active', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 0.7\n      }))]), transition('active => inactive', [style({\n        opacity: 0.7\n      }), animate(250, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    xSet: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    showPercentage: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    hover: [{\n      type: Output\n    }],\n    tooltipAnchor: [{\n      type: ViewChild,\n      args: ['tooltipAnchor', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass Timeline {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.height = 50;\n    this.select = new EventEmitter();\n    this.onDomainChange = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update() {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n    this.cd.markForCheck();\n  }\n\n  getXDomain() {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush() {\n    if (this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush = brushX().extent([[0, 0], [width, height]]).on('brush end', ({\n      selection\n    }) => {\n      const newSelection = selection || this.xScale.range();\n      const newDomain = newSelection.map(this.xScale.invert);\n      this.onDomainChange.emit(newDomain);\n      this.cd.markForCheck();\n    });\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush() {\n    if (!this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush.extent([[0, 0], [width, height]]);\n    select(this.element).select('.brush').call(this.brush); // clear hardcoded properties so they can be defined by CSS\n\n    select(this.element).select('.selection').attr('fill', undefined).attr('stroke', undefined).attr('fill-opacity', undefined);\n    this.cd.markForCheck();\n  }\n\n  getDims() {\n    const width = this.view[0];\n    const dims = {\n      width,\n      height: this.height\n    };\n    return dims;\n  }\n\n}\n\nTimeline.ɵfac = function Timeline_Factory(t) {\n  return new (t || Timeline)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTimeline.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Timeline,\n  selectors: [[\"g\", \"ngx-charts-timeline\", \"\"]],\n  inputs: {\n    view: \"view\",\n    results: \"results\",\n    scheme: \"scheme\",\n    customColors: \"customColors\",\n    legend: \"legend\",\n    autoScale: \"autoScale\",\n    scaleType: \"scaleType\",\n    height: \"height\"\n  },\n  outputs: {\n    select: \"select\",\n    onDomainChange: \"onDomainChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c20,\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[1, \"timeline\"], [\"in\", \"SourceGraphic\", \"type\", \"matrix\", \"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"], [1, \"embedded-chart\"], [\"x\", \"0\", \"y\", \"0\", 1, \"brush-background\"], [1, \"brush\"]],\n  template: function Timeline_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"filter\");\n      i0.ɵɵelement(2, \"feColorMatrix\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 2);\n      i0.ɵɵprojection(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"rect\", 3);\n      i0.ɵɵelement(6, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.filterId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵattribute(\"width\", ctx.view[0])(\"height\", ctx.height);\n    }\n  },\n  styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Timeline, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-timeline]',\n      template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    view: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    onDomainChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedLegendComponent {\n  constructor() {\n    this.label = 'Total';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.legendItems = [];\n\n    this.labelFormatting = label => label;\n\n    this.percentageFormatting = percentage => percentage;\n\n    this.defaultValueFormatting = value => value.toLocaleString();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getTotal() {\n    return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n  }\n\n  update() {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems() {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? value / this.total * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nAdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) {\n  return new (t || AdvancedLegendComponent)();\n};\n\nAdvancedLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedLegendComponent,\n  selectors: [[\"ngx-charts-advanced-legend\"]],\n  inputs: {\n    width: \"width\",\n    data: \"data\",\n    colors: \"colors\",\n    label: \"label\",\n    animations: \"animations\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 7,\n  consts: [[1, \"advanced-pie-legend\"], [\"class\", \"total-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"total-value\", 4, \"ngIf\"], [1, \"total-label\"], [1, \"legend-items-container\"], [1, \"legend-items\"], [\"tabindex\", \"-1\", \"class\", \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-count-up\", \"\", 1, \"total-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"total-value\"], [\"tabindex\", \"-1\", 1, \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\"], [1, \"item-color\"], [\"class\", \"item-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"item-value\", 4, \"ngIf\"], [1, \"item-label\"], [\"class\", \"item-percent\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"item-percent\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"item-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"item-value\"], [\"ngx-charts-count-up\", \"\", 1, \"item-percent\", 3, \"countTo\", \"countSuffix\"], [1, \"item-percent\"]],\n  template: function AdvancedLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, \"div\", 1);\n      i0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendItems)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [CountUpDirective, i2.NgIf, i2.NgForOf],\n  styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-legend',\n      template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"]\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nconst COMPONENTS = [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent];\n\nclass ChartCommonModule {}\n\nChartCommonModule.ɵfac = function ChartCommonModule_Factory(t) {\n  return new (t || ChartCommonModule)();\n};\n\nChartCommonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ChartCommonModule\n});\nChartCommonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartCommonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AxesModule, TooltipModule],\n      declarations: [...COMPONENTS, VisibilityObserver],\n      exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n    }]\n  }], null, null);\n})();\n\nfunction calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = ScaleType.Ordinal,\n  legendPosition = LegendPosition.Right,\n  columns = 12\n}) {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === LegendPosition.Right) {\n    if (legendType === ScaleType.Ordinal) {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = chartWidth * columns / 12;\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n\nlet colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\n\nclass ColorHelper {\n  constructor(scheme, type, domain, customColors) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    let colorScale;\n\n    switch (type) {\n      case ScaleType.Quantile:\n        colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Ordinal:\n        colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Linear:\n        {\n          const colorDomain = [...scheme.domain];\n\n          if (colorDomain.length === 1) {\n            colorDomain.push(colorDomain[0]);\n            this.colorDomain = colorDomain;\n          }\n\n          const points = range(0, 1, 1.0 / colorDomain.length);\n          colorScale = scaleLinear().range(colorDomain).domain(points);\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n\n    if (this.scaleType === ScaleType.Linear) {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found; // todo type customColors\n\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n    const endColor = this.getColor(value); // generate the stops\n\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = (s.offset - startVal) / (endVal - startVal) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n\n}\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\n\n\nfunction getUniqueXDomainValues(results) {\n  const valueSet = new Set();\n\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n\n  return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\n\n\nfunction getScaleType(values, checkDateType = true) {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n\n    if (allDates) {\n      return ScaleType.Time;\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n\n  if (allNumbers) {\n    return ScaleType.Linear;\n  }\n\n  return ScaleType.Ordinal;\n}\n\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n  const scaleType = getScaleType(values);\n  let xSet = [];\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n  }\n\n  let min;\n  let max;\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const mappedValues = values.map(v => Number(v));\n    min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n    max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n  }\n\n  if (scaleType === ScaleType.Time) {\n    domain = [new Date(min), new Date(max)];\n    xSet = [...values].sort((a, b) => {\n      const aDate = a.getTime();\n      const bDate = b.getTime();\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    });\n  } else if (scaleType === ScaleType.Linear) {\n    domain = [min, max]; // Use compare function to sort numbers numerically\n\n    xSet = [...values].sort((a, b) => a - b);\n  } else {\n    domain = values;\n    xSet = values;\n  }\n\n  return {\n    domain,\n    xSet,\n    scaleType\n  };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nfunction sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n\nclass AreaSeriesComponent {\n  constructor() {\n    this.baseValue = 'auto';\n    this.stacked = false;\n    this.normalized = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradient();\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area().x(xProperty).y0((d, i) => this.yScale(d.d0)).y1((d, i) => this.yScale(d.d1));\n      startingArea = area().x(xProperty).y0(d => this.yScale.range()[0]).y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area().x(xProperty).y0(() => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.yScale(d.value));\n      startingArea = area().x(xProperty).y0(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n    this.opacity = 0.8;\n    let data = this.data.series;\n\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nAreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) {\n  return new (t || AreaSeriesComponent)();\n};\n\nAreaSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-area-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    baseValue: \"baseValue\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    stacked: \"stacked\",\n    normalized: \"normalized\",\n    gradient: \"gradient\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c21,\n  decls: 1,\n  vars: 12,\n  consts: [[\"ngx-charts-area\", \"\", 1, \"area-series\", 3, \"data\", \"path\", \"fill\", \"stops\", \"startingPath\", \"opacity\", \"gradient\", \"animations\"]],\n  template: function AreaSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"fill\", ctx.colors.getColor(ctx.data.name))(\"stops\", ctx.gradientStops)(\"startingPath\", ctx.startingPath)(\"opacity\", ctx.opacity)(\"gradient\", ctx.gradient || ctx.hasGradient)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [AreaComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area-series]',\n      template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    stacked: [{\n      type: Input\n    }],\n    normalized: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AreaChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.baseValue = 'auto';\n    this.autoScale = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values) {\n    let date = true;\n    let num = true;\n\n    for (const value of values) {\n      if (isDate(value)) {\n        date = false;\n      }\n\n      if (isNumber(value)) {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return ScaleType.Time;\n    }\n\n    if (num) {\n      return ScaleType.Linear;\n    }\n\n    return ScaleType.Ordinal;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartComponent_BaseFactory;\n  return function AreaChartComponent_Factory(t) {\n    return (ɵAreaChartComponent_BaseFactory || (ɵAreaChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartComponent)))(t || AreaChartComponent);\n  };\n}();\n\nAreaChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartComponent,\n  selectors: [[\"ngx-charts-area-chart\"]],\n  contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    baseValue: \"baseValue\",\n    autoScale: \"autoScale\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showXAxisLabel = false;\n    this.showYAxisLabel = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.yDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.seriesType = SeriesType;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      let total = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = d.d0 * 100 / total;\n          d.d1 = d.d1 * 100 / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartNormalizedComponent_BaseFactory;\n  return function AreaChartNormalizedComponent_Factory(t) {\n    return (ɵAreaChartNormalizedComponent_BaseFactory || (ɵAreaChartNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent)))(t || AreaChartNormalizedComponent);\n  };\n}();\n\nAreaChartNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartNormalizedComponent,\n  selectors: [[\"ngx-charts-area-chart-normalized\"]],\n  contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"activeEntries\", \"gradient\", \"normalized\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"normalized\", \"curve\", \"animations\"]],\n  template: function AreaChartNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.seriesType = SeriesType;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartStackedComponent_BaseFactory;\n  return function AreaChartStackedComponent_Factory(t) {\n    return (ɵAreaChartStackedComponent_BaseFactory || (ɵAreaChartStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartStackedComponent)))(t || AreaChartStackedComponent);\n  };\n}();\n\nAreaChartStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartStackedComponent,\n  selectors: [[\"ngx-charts-area-chart-stacked\"]],\n  contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"activeEntries\", \"stacked\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"stacked\", \"curve\", \"animations\"]],\n  template: function AreaChartStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartModule {}\n\nAreaChartModule.ɵfac = function AreaChartModule_Factory(t) {\n  return new (t || AreaChartModule)();\n};\n\nAreaChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AreaChartModule\n});\nAreaChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n      exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass BarComponent {\n  constructor(element) {\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n\n    this.update();\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation() {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === BarOrientation.Vertical) {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && (this.orientation === BarOrientation.Vertical && this.height === 0 || this.orientation === BarOrientation.Horizontal && this.width === 0);\n  }\n\n}\n\nBarComponent.ɵfac = function BarComponent_Factory(t) {\n  return new (t || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarComponent,\n  selectors: [[\"g\", \"ngx-charts-bar\", \"\"]],\n  hostBindings: function BarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BarComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BarComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    orientation: \"orientation\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    stops: \"stops\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c26,\n  decls: 2,\n  vars: 8,\n  consts: [[4, \"ngIf\"], [\"stroke\", \"none\", \"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function BarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"path\", 1);\n      i0.ɵɵlistener(\"click\", function BarComponent_Template__svg_path_click_1_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  directives: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar]',\n      template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar BarChartType;\n\n(function (BarChartType) {\n  BarChartType[\"Standard\"] = \"standard\";\n  BarChartType[\"Normalized\"] = \"normalized\";\n  BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n\n(function (D0Types) {\n  D0Types[\"positive\"] = \"positive\";\n  D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n  constructor(element) {\n    this.dimensionsChanged = new EventEmitter();\n    this.horizontalPadding = 2;\n    this.verticalPadding = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getSize() {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return {\n      height: h,\n      width: w,\n      negative: this.value < 0\n    };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update() {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth; // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n\n}\n\nBarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) {\n  return new (t || BarLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-bar-label\", \"\"]],\n  inputs: {\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    barX: \"barX\",\n    barY: \"barY\",\n    barWidth: \"barWidth\",\n    barHeight: \"barHeight\",\n    orientation: \"orientation\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c27,\n  decls: 2,\n  vars: 5,\n  consts: [[\"alignment-baseline\", \"middle\", 1, \"textDataLabel\"]],\n  template: function BarLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.formatedValue, \" \");\n    }\n  },\n  styles: [\".textDataLabel[_ngcontent-%COMP%]{font-size:11px}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar-label]',\n      template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".textDataLabel{font-size:11px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    barX: [{\n      type: Input\n    }],\n    barY: [{\n      type: Input\n    }],\n    barWidth: [{\n      type: Input\n    }],\n    barHeight: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass SeriesHorizontal {\n  constructor() {\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelWidthChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type;\n    d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n    this.bars = this.series.map(d => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === BarChartType.Standard) {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n\n        bar.y = this.yScale(label);\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0; // if total is positive then we show it on the right, otherwise on the left\n\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        var _a;\n\n        const section = {};\n        section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data) {\n    this.select.emit(data);\n  }\n\n}\n\nSeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) {\n  return new (t || SeriesHorizontal)();\n};\n\nSeriesHorizontal.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesHorizontal,\n  selectors: [[\"g\", \"ngx-charts-series-horizontal\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelWidthChanged: \"dataLabelWidthChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c28,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesHorizontal_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  directives: [BarComponent, BarLabelComponent, i2.NgForOf, TooltipDirective, i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesHorizontal, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-horizontal]',\n      template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelWidthChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarHorizontalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain() {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalComponent_BaseFactory;\n  return function BarHorizontalComponent_Factory(t) {\n    return (ɵBarHorizontalComponent_BaseFactory || (ɵBarHorizontalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalComponent)))(t || BarHorizontalComponent);\n  };\n}();\n\nBarHorizontalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalComponent,\n  selectors: [[\"ngx-charts-bar-horizontal\"]],\n  contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    xScaleMin: \"xScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"activeEntries\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"]],\n  template: function BarHorizontalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"select\", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"dataLabelWidthChanged\", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) {\n        return ctx.onDataLabelMaxWidthChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontal2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontal2DComponent_BaseFactory;\n  return function BarHorizontal2DComponent_Factory(t) {\n    return (ɵBarHorizontal2DComponent_BaseFactory || (ɵBarHorizontal2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontal2DComponent)))(t || BarHorizontal2DComponent);\n  };\n}();\n\nBarHorizontal2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontal2DComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-2d\"]],\n  contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"activeEntries\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontal2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 17, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.valueScale)(\"yScale\", ctx.groupScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontal2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalNormalizedComponent_BaseFactory;\n  return function BarHorizontalNormalizedComponent_Factory(t) {\n    return (ɵBarHorizontalNormalizedComponent_BaseFactory || (ɵBarHorizontalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent)))(t || BarHorizontalNormalizedComponent);\n  };\n}();\n\nBarHorizontalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-normalized\"]],\n  contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarHorizontalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 15, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalStackedComponent_BaseFactory;\n  return function BarHorizontalStackedComponent_Factory(t) {\n    return (ɵBarHorizontalStackedComponent_BaseFactory || (ɵBarHorizontalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent)))(t || BarHorizontalStackedComponent);\n  };\n}();\n\nBarHorizontalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalStackedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-stacked\"]],\n  contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"series\", \"activeEntries\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 17, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass SeriesVerticalComponent {\n  constructor() {\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelHeightChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    let width;\n\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === BarChartType.Standard) {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        var _a;\n\n        const section = {};\n        section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n}\n\nSeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) {\n  return new (t || SeriesVerticalComponent)();\n};\n\nSeriesVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesVerticalComponent,\n  selectors: [[\"g\", \"ngx-charts-series-vertical\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelHeightChanged: \"dataLabelHeightChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c29,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 1, 22, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  directives: [BarComponent, BarLabelComponent, i2.NgForOf, TooltipDirective, i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-vertical]',\n      template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Vertical\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelHeightChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarVerticalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain() {\n    const values = this.results.map(d => d.value);\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n\n    return [min, max];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalComponent_BaseFactory;\n  return function BarVerticalComponent_Factory(t) {\n    return (ɵBarVerticalComponent_BaseFactory || (ɵBarVerticalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalComponent)))(t || BarVerticalComponent);\n  };\n}();\n\nBarVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalComponent,\n  selectors: [[\"ngx-charts-bar-vertical\"]],\n  contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"activeEntries\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"activate\", \"deactivate\", \"select\", \"dataLabelHeightChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n  template: function BarVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"activate\", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"select\", function BarVerticalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"dataLabelHeightChanged\", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) {\n        return ctx.onDataLabelMaxHeightChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVertical2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.scaleType = ScaleType.Ordinal;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVertical2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVertical2DComponent_BaseFactory;\n  return function BarVertical2DComponent_Factory(t) {\n    return (ɵBarVertical2DComponent_BaseFactory || (ɵBarVertical2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVertical2DComponent)))(t || BarVertical2DComponent);\n  };\n}();\n\nBarVertical2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVertical2DComponent,\n  selectors: [[\"ngx-charts-bar-vertical-2d\"]],\n  contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    scaleType: \"scaleType\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVertical2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 1, 17, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.groupScale)(\"yScale\", ctx.valueScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Vertical);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVertical2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalNormalizedComponent_BaseFactory;\n  return function BarVerticalNormalizedComponent_Factory(t) {\n    return (ɵBarVerticalNormalizedComponent_BaseFactory || (ɵBarVerticalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent)))(t || BarVerticalNormalizedComponent);\n  };\n}();\n\nBarVerticalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-normalized\"]],\n  contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarVerticalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 15, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalStackedComponent_BaseFactory;\n  return function BarVerticalStackedComponent_Factory(t) {\n    return (ɵBarVerticalStackedComponent_BaseFactory || (ɵBarVerticalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalStackedComponent)))(t || BarVerticalStackedComponent);\n  };\n}();\n\nBarVerticalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalStackedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-stacked\"]],\n  contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVerticalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 17, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarChartModule {}\n\nBarChartModule.ɵfac = function BarChartModule_Factory(t) {\n  return new (t || BarChartModule)();\n};\n\nBarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BarChartModule\n});\nBarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n      exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n    }]\n  }], null, null);\n})();\n\nclass BoxComponent {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.BarOrientation = BarOrientation;\n    this.initialized = false;\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.nativeElm = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update() {\n    this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n    this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n    this.medianLineWidth = 1.5 * this.strokeWidth;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updateLineEl();\n    this.updatePathEl();\n    this.checkToHideBar();\n    this.maskLineId = 'mask' + id().toString();\n    this.maskLine = `url(#${this.maskLineId})`;\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  loadAnimation() {\n    this.boxPath = this.oldPath = this.getStartingPath();\n    this.oldLineCoordinates = this.getStartingLineCoordinates();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const nodeBar = select(this.nativeElm).selectAll('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      nodeBar.attr('d', this.oldPath).transition().ease(easeSinInOut).duration(500).attrTween('d', this.pathTween(path, 4));\n    } else {\n      nodeBar.attr('d', path);\n    }\n\n    this.oldPath = path;\n  }\n\n  updateLineEl() {\n    const lineEl = select(this.nativeElm).selectAll('.bar-line');\n    const lineCoordinates = this.lineCoordinates;\n    const oldLineCoordinates = this.oldLineCoordinates;\n\n    if (this.animations) {\n      lineEl.attr('x1', (_, index) => oldLineCoordinates[index].v1.x).attr('y1', (_, index) => oldLineCoordinates[index].v1.y).attr('x2', (_, index) => oldLineCoordinates[index].v2.x).attr('y2', (_, index) => oldLineCoordinates[index].v2.y).transition().ease(easeSinInOut).duration(500).attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    } else {\n      lineEl.attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    }\n\n    this.oldLineCoordinates = [...lineCoordinates];\n  }\n  /**\n   * See [D3 Selections](https://www.d3indepth.com/selections/)\n   * @param d The joined data.\n   * @param index The index of the element within the selection\n   * @param node The node element (Line).\n   */\n\n\n  lineTween(attr, d, index, node) {\n    const nodeLineEl = node[index];\n    return nodeLineEl[attr].baseVal.value;\n  } // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n\n\n  pathTween(d1, precision) {\n    return function () {\n      // tslint:disable-next-line: no-this-assignment\n      const path0 = this;\n      const path1 = this.cloneNode();\n      path1.setAttribute('d', d1);\n      const n0 = path0 === null || path0 === void 0 ? void 0 : path0.getTotalLength();\n      const n1 = path1 === null || path1 === void 0 ? void 0 : path1.getTotalLength(); // Uniform sampling of distance based on specified precision.\n\n      const distances = [0];\n      let i = 0;\n      const dt = precision / Math.max(n0, n1);\n\n      while (i < 1) {\n        distances.push(i);\n        i += dt;\n      }\n\n      distances.push(1); // Compute point-interpolators at each distance.\n\n      const points = distances.map(t => {\n        const p0 = path0.getPointAtLength(t * n0);\n        const p1 = path1.getPointAtLength(t * n1);\n        return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n      }); // 't': T is the fraction of time (between 0 and 1) since the transition began.\n\n      return t => {\n        return t < 1 ? 'M' + points.map(p => p(t)).join('L') : d1;\n      };\n    };\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    const radius = this.roundEdges ? 1 : 0;\n    const {\n      x,\n      y\n    } = this.lineCoordinates[2].v1;\n    return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n  }\n\n  getPath() {\n    const radius = this.getRadius();\n    let path = '';\n    path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n    return path;\n  }\n\n  getStartingLineCoordinates() {\n    if (!this.animations) {\n      return [...this.lineCoordinates];\n    }\n\n    const lineCoordinates = cloneDeep(this.lineCoordinates);\n    lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y = lineCoordinates[2].v1.y;\n    return lineCoordinates;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getGradient() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      edges = [true, true, true, true];\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && this.height === 0;\n  }\n\n}\n\nBoxComponent.ɵfac = function BoxComponent_Factory(t) {\n  return new (t || BoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxComponent,\n  selectors: [[\"g\", \"ngx-charts-box\", \"\"]],\n  hostBindings: function BoxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BoxComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BoxComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    lineCoordinates: \"lineCoordinates\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    gradientStops: \"gradientStops\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c30,\n  decls: 9,\n  vars: 13,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"height\", \"100%\", \"width\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"1\"], [\"fill\", \"black\", \"fill-opacity\", \"1\", 1, \"bar\"], [\"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"class\", \"bar-line\", \"fill\", \"none\", 3, \"hidden\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"fill\", \"none\", 1, \"bar-line\"]],\n  template: function BoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"defs\");\n      i0.ɵɵtemplate(1, BoxComponent__svg_g_1_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementStart(2, \"mask\");\n      i0.ɵɵelementStart(3, \"g\");\n      i0.ɵɵelement(4, \"rect\", 1);\n      i0.ɵɵelement(5, \"path\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"g\");\n      i0.ɵɵelementStart(7, \"path\", 3);\n      i0.ɵɵlistener(\"click\", function BoxComponent_Template__svg_path_click_7_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BoxComponent__svg_line_8_Template, 1, 9, \"line\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.maskLineId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"d\", ctx.boxPath);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.boxPath)(\"stroke\", ctx.strokeColor)(\"stroke-width\", ctx.boxStrokeWidth)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.lineCoordinates);\n    }\n  },\n  directives: [SvgLinearGradientComponent, i2.NgIf, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box]',\n      template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    lineCoordinates: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    gradientStops: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BoxSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n    const seriesName = this.series.name; // Calculate Quantile and Whiskers for each box serie.\n\n    this.counts = this.series.series;\n    const mappedCounts = this.counts.map(serie => Number(serie.value));\n    this.whiskers = [min(mappedCounts), max(mappedCounts)]; // We get the group count and must sort it in order to retrieve quantiles.\n\n    const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n    this.quartiles = this.getBoxQuantiles(groupCounts);\n    this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n    const value = this.quartiles[1];\n    const formattedLabel = formatLabel(seriesName);\n    const box = {\n      value,\n      data: this.counts,\n      label: seriesName,\n      formattedLabel,\n      width,\n      height: 0,\n      x: 0,\n      y: 0,\n      roundEdges: this.roundEdges,\n      quartiles: this.quartiles,\n      lineCoordinates: this.lineCoordinates\n    };\n    box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n    box.x = this.xScale(seriesName.toString());\n    box.y = this.yScale(this.quartiles[2]);\n    box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n\n    if (this.colors.scaleType === ScaleType.Ordinal) {\n      box.color = this.colors.getColor(seriesName);\n    } else {\n      box.color = this.colors.getColor(this.quartiles[1]);\n      box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n    }\n\n    const tooltipLabel = formattedLabel;\n    const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n    box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n    this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n    this.box = box;\n  }\n\n  getBoxQuantiles(inputData) {\n    return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n  }\n\n  getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n    // The X value is not being centered, so had to sum half the width to align it.\n    const commonX = this.xScale(seriesName);\n    const offsetX = commonX + barWidth / 2;\n    const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n    const whiskerLineWidth = Math.max(barWidth / 3, 1);\n    const whiskerZero = this.yScale(whiskers[0]);\n    const whiskerOne = this.yScale(whiskers[1]);\n    const median = this.yScale(quartiles[1]);\n    const topLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerZero\n      }\n    };\n    const medianLine = {\n      v1: {\n        x: offsetX + medianLineWidth / 2,\n        y: median\n      },\n      v2: {\n        x: offsetX - medianLineWidth / 2,\n        y: median\n      }\n    };\n    const bottomLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerOne\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerOne\n      }\n    };\n    const verticalLine = {\n      v1: {\n        x: offsetX,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX,\n        y: whiskerOne\n      }\n    };\n    return [verticalLine, topLine, medianLine, bottomLine];\n  }\n\n  updateTooltipSettings() {\n    if (this.tooltipDisabled) {\n      this.tooltipPlacement = undefined;\n      this.tooltipType = undefined;\n    } else {\n      if (!this.tooltipPlacement) {\n        this.tooltipPlacement = PlacementTypes.Top;\n      }\n\n      if (!this.tooltipType) {\n        this.tooltipType = StyleTypes.tooltip;\n      }\n    }\n  }\n\n}\n\nBoxSeriesComponent.ɵfac = function BoxSeriesComponent_Factory(t) {\n  return new (t || BoxSeriesComponent)();\n};\n\nBoxSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-box-series\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    animations: \"animations\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipType: \"tooltipType\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c31,\n  decls: 1,\n  vars: 22,\n  consts: [[\"ngx-charts-box\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"roundEdges\", \"fill\", \"gradientStops\", \"strokeColor\", \"strokeWidth\", \"data\", \"lineCoordinates\", \"gradient\", \"ariaLabel\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"animations\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BoxSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"select\", function BoxSeriesComponent_Template__svg_g_select_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BoxSeriesComponent_Template__svg_g_activate_0_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function BoxSeriesComponent_Template__svg_g_deactivate_0_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations)(\"width\", ctx.box.width)(\"height\", ctx.box.height)(\"x\", ctx.box.x)(\"y\", ctx.box.y)(\"roundEdges\", ctx.box.roundEdges)(\"fill\", ctx.box.color)(\"gradientStops\", ctx.box.gradientStops)(\"strokeColor\", ctx.strokeColor)(\"strokeWidth\", ctx.strokeWidth)(\"data\", ctx.box.data)(\"lineCoordinates\", ctx.box.lineCoordinates)(\"gradient\", ctx.gradient)(\"ariaLabel\", ctx.box.ariaLabel)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.tooltipPlacement)(\"tooltipType\", ctx.tooltipType)(\"tooltipTitle\", ctx.tooltipTitle)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.box.data)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [BoxComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box-series]',\n      template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BoxChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    /** Show or hide the legend. */\n\n    this.legend = false;\n    this.legendPosition = LegendPosition.Right;\n    this.legendTitle = 'Legend';\n    this.showGridLines = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.strokeColor = '#FFFFFF';\n    this.strokeWidth = 2;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    /** Chart Margins (For each side, counterclock wise). */\n\n    this.margin = [10, 20, 10, 20];\n    /** Chart X axis dimension. */\n\n    this.xAxisHeight = 0;\n    /** Chart Y axis dimension. */\n\n    this.yAxisWidth = 0;\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  setColors() {\n    let domain = [];\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  setScales() {\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n  }\n\n  getXScale(domain, width) {\n    const scale = scaleBand().domain(domain.map(d => d.toString())).rangeRound([0, width]).padding(0.5);\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().domain(domain).range([height, 0]);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getUniqueBoxChartXDomainValues(results) {\n    const valueSet = new Set();\n\n    for (const result of results) {\n      valueSet.add(result.name);\n    }\n\n    return Array.from(valueSet);\n  }\n\n  getXDomain() {\n    let domain = [];\n    const values = this.getUniqueBoxChartXDomainValues(this.results);\n    let min;\n    let max;\n\n    if (typeof values[0] === 'string') {\n      domain = values.map(val => val.toString());\n    } else if (typeof values[0] === 'number') {\n      const mappedValues = values.map(v => Number(v));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [min, max];\n    } else {\n      const mappedValues = values.map(v => Number(new Date(v)));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [new Date(min), new Date(max)];\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    const mappedValues = values.map(v => Number(v));\n    const min = Math.min(...mappedValues);\n    const max = Math.max(...mappedValues);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => `${d.name}`);\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  onActivate(data) {\n    this.activate.emit(data);\n  }\n\n  onDeactivate(data) {\n    this.deactivate.emit(data);\n  }\n\n  getLegendOptions() {\n    const legendOpts = {\n      scaleType: this.schemeType,\n      colors: this.colors,\n      domain: [],\n      position: this.legendPosition,\n      title: this.legendTitle\n    };\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      legendOpts.domain = this.xDomain;\n      legendOpts.colors = this.colors;\n    } else {\n      legendOpts.domain = this.yDomain;\n      legendOpts.colors = this.colors.scale;\n    }\n\n    return legendOpts;\n  }\n\n}\n\nBoxChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBoxChartComponent_BaseFactory;\n  return function BoxChartComponent_Factory(t) {\n    return (ɵBoxChartComponent_BaseFactory || (ɵBoxChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BoxChartComponent)))(t || BoxChartComponent);\n  };\n}();\n\nBoxChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxChartComponent,\n  selectors: [[\"ngx-charts-box-chart\"]],\n  contentQueries: function BoxChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendPosition: \"legendPosition\",\n    legendTitle: \"legendTitle\",\n    legendOptionsConfig: \"legendOptionsConfig\",\n    showGridLines: \"showGridLines\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    roundDomains: \"roundDomains\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    roundEdges: \"roundEdges\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 21,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"box-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"dims\", \"yScale\", \"showLabel\", \"labelText\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-box-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"roundEdges\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"series\", \"dims\", \"animations\", \"gradient\", \"activate\", \"deactivate\", \"select\"]],\n  template: function BoxChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_2_listener($event) {\n        return ctx.updateXAxisHeight($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 3);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_3_listener($event) {\n        return ctx.updateYAxisWidth($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\");\n      i0.ɵɵtemplate(5, BoxChartComponent__svg_g_5_Template, 2, 12, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(18, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"xScale\", ctx.xScale)(\"showLabel\", ctx.showXAxisLabel)(\"labelText\", ctx.xAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"yScale\", ctx.yScale)(\"showLabel\", ctx.showYAxisLabel)(\"labelText\", ctx.yAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, BoxSeriesComponent, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-box-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendOptionsConfig: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass BoxChartModule {}\n\nBoxChartModule.ɵfac = function BoxChartModule_Factory(t) {\n  return new (t || BoxChartModule)();\n};\n\nBoxChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BoxChartModule\n});\nBoxChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n      exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n    }]\n  }], null, null);\n})();\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nfunction getScale(domain, range, scaleType, roundDomains) {\n  switch (scaleType) {\n    case ScaleType.Time:\n      return scaleTime().range(range).domain(domain);\n\n    case ScaleType.Linear:\n      {\n        const scale = scaleLinear().range(range).domain(domain);\n\n        if (roundDomains) {\n          return scale.nice();\n        }\n\n        return scale;\n      }\n\n    case ScaleType.Ordinal:\n      return scalePoint().range([range[0], range[1]]).domain(domain.map(r => r.toString()));\n\n    default:\n      return undefined;\n  }\n}\n\nclass BubbleSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.circles = this.getCircles();\n  }\n\n  getCircles() {\n    const seriesName = this.data.name;\n    return this.data.series.map((d, i) => {\n      if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n        const y = d.y;\n        const x = d.x;\n        const r = d.r;\n        const radius = this.rScale(r || 1);\n        const tooltipLabel = formatLabel(d.name);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n        const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n        const isActive = !this.activeEntries.length ? true : this.isActive({\n          name: seriesName\n        });\n        const opacity = isActive ? 1 : 0.3;\n        const data = Object.assign({}, d, {\n          series: seriesName,\n          name: d.name,\n          value: d.y,\n          x: d.x,\n          radius: d.r\n        });\n        return {\n          data,\n          x,\n          y,\n          r,\n          classNames: [`circle-data-${i}`],\n          value: y,\n          label: x,\n          cx,\n          cy,\n          radius,\n          tooltipLabel,\n          color,\n          opacity,\n          seriesName,\n          isActive,\n          transform: `translate(${cx},${cy})`\n        };\n      }\n    }).filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle) {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name = hasSeriesName && hasTooltipLabel ? `${circle.seriesName} • ${circle.tooltipLabel}` : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle) {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({\n        name: circle.seriesName\n      });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle) {\n    circle.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle(circle) {\n    circle.barVisible = false;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n  trackBy(index, circle) {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n\n}\n\nBubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) {\n  return new (t || BubbleSeriesComponent)();\n};\n\nBubbleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-bubble-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    rScale: \"rScale\",\n    xScaleType: \"xScaleType\",\n    yScaleType: \"yScaleType\",\n    colors: \"colors\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c32,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [CircleComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }), animate(250, style({\n      opacity: 1,\n      transform: 'scale(1)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bubble-series]',\n      template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), animate(250, style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))])])]\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    rScale: [{\n      type: Input\n    }],\n    xScaleType: [{\n      type: Input\n    }],\n    yScaleType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BubbleChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.showGridLines = true;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.maxRadius = 10;\n    this.minRadius = 3;\n    this.schemeType = ScaleType.Ordinal;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.scaleType = ScaleType.Linear;\n    this.margin = [10, 20, 10, 20];\n    this.bubblePadding = [0, 0, 0, 0];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.activeEntries = [];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n    const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n    this.data = this.results;\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n    this.legendOptions = this.getLegendOptions();\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  hideCircles() {\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n\n    let height = this.dims.height;\n\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height) {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width) {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range) {\n    const scale = scaleLinear().range(range).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain() {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nBubbleChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBubbleChartComponent_BaseFactory;\n  return function BubbleChartComponent_Factory(t) {\n    return (ɵBubbleChartComponent_BaseFactory || (ɵBubbleChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BubbleChartComponent)))(t || BubbleChartComponent);\n  };\n}();\n\nBubbleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleChartComponent,\n  selectors: [[\"ngx-charts-bubble-chart\"]],\n  contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function BubbleChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    showGridLines: \"showGridLines\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    maxRadius: \"maxRadius\",\n    minRadius: \"minRadius\",\n    autoScale: \"autoScale\",\n    schemeType: \"schemeType\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"activeEntries\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bubble-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"x\", \"0\", \"y\", \"0\", 1, \"bubble-chart-area\", 2, \"fill\", \"rgb(255, 0, 0)\", \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mouseenter\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-bubble-series\", \"\", 3, \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"xAxisLabel\", \"yAxisLabel\", \"colors\", \"data\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"rect\", 4);\n      i0.ɵɵlistener(\"mouseenter\", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() {\n        return ctx.deactivateAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"g\");\n      i0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 13, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"activeEntries\", ctx.activeEntries)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, BubbleSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bubble-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    showGridLines: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    maxRadius: [{\n      type: Input\n    }],\n    minRadius: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BubbleChartModule {}\n\nBubbleChartModule.ɵfac = function BubbleChartModule_Factory(t) {\n  return new (t || BubbleChartModule)();\n};\n\nBubbleChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BubbleChartModule\n});\nBubbleChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BubbleChartComponent, BubbleSeriesComponent],\n      exports: [BubbleChartComponent, BubbleSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass HeatMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.transform = `translate(${this.x} , ${this.y})`;\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n}\n\nHeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) {\n  return new (t || HeatMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nHeatMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell\", \"\"]],\n  hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function HeatMapCellComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function HeatMapCellComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    data: \"data\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c33,\n  decls: 3,\n  vars: 5,\n  consts: [[1, \"cell\"], [4, \"ngIf\"], [\"rx\", \"3\", 1, \"cell\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function HeatMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"rect\", 2);\n      i0.ɵɵlistener(\"click\", function HeatMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height);\n    }\n  },\n  directives: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass HeatCellSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n    return cells;\n  }\n\n  getTooltipText({\n    label,\n    data,\n    series\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nHeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) {\n  return new (t || HeatCellSeriesComponent)();\n};\n\nHeatCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    colors: \"colors\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c34,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function HeatCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [HeatMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass HeatMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.innerPadding = 8;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.tooltipDisabled = false;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.scaleType = ScaleType.Linear;\n  }\n\n  update() {\n    super.update();\n    this.formatDates();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n    this.scaleType = getScaleType(this.valueDomain, false);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === ScaleType.Linear) {\n      let min = this.min;\n      let max = this.max;\n\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n\n\n  getDimension(value, index = 0, N, L) {\n    if (typeof value === 'string') {\n      value = value.replace('[', '').replace(']', '').replace('px', '') // tslint:disable-next-line: quotemark\n      .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n\n    return N / (L / +value + 1);\n  }\n\n  getXScale() {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale() {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects() {\n    const rects = [];\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n    return rects;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n      title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nHeatMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵHeatMapComponent_BaseFactory;\n  return function HeatMapComponent_Factory(t) {\n    return (ɵHeatMapComponent_BaseFactory || (ɵHeatMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(HeatMapComponent)))(t || HeatMapComponent);\n  };\n}();\n\nHeatMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapComponent,\n  selectors: [[\"ngx-charts-heat-map\"]],\n  contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    innerPadding: \"innerPadding\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    min: \"min\",\n    max: \"max\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"legendOptions\", \"legendLabelClick\"], [1, \"heat-map\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-heat-map-cell-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n  template: function HeatMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n      i0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n      i0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, \"rect\", 4);\n      i0.ɵɵelementStart(5, \"g\", 5);\n      i0.ɵɵlistener(\"select\", function HeatMapComponent_Template__svg_g_select_5_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function HeatMapComponent_Template__svg_g_activate_5_listener($event) {\n        return ctx.onActivate($event, undefined);\n      })(\"deactivate\", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) {\n        return ctx.onDeactivate($event, undefined);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"animations\", ctx.animations)(\"legendOptions\", ctx.legendOptions);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rects);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"data\", ctx.results)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, HeatCellSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-heat-map',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass HeatMapModule {}\n\nHeatMapModule.ɵfac = function HeatMapModule_Factory(t) {\n  return new (t || HeatMapModule)();\n};\n\nHeatMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HeatMapModule\n});\nHeatMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n      exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n    }]\n  }], null, null);\n})();\n\nclass LineComponent {\n  constructor(element) {\n    this.element = element;\n    this.fill = 'none';\n    this.animations = true; // @Output() select = new EventEmitter();\n\n    this.initialized = false;\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl() {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n}\n\nLineComponent.ɵfac = function LineComponent_Factory(t) {\n  return new (t || LineComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nLineComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineComponent,\n  selectors: [[\"g\", \"ngx-charts-line\", \"\"]],\n  inputs: {\n    path: \"path\",\n    stroke: \"stroke\",\n    data: \"data\",\n    fill: \"fill\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c36,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke-width\", \"1.5px\", 1, \"line\"]],\n  template: function LineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"path\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@animationState\", \"active\");\n      i0.ɵɵattribute(\"d\", ctx.initialPath)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke);\n    }\n  },\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      strokeDasharray: 2000,\n      strokeDashoffset: 2000\n    }), animate(1000, style({\n      strokeDashoffset: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line]',\n      template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        strokeDasharray: 2000,\n        strokeDashoffset: 2000\n      }), animate(1000, style({\n        strokeDashoffset: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    path: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const data = this.sortData(this.data.series);\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator() {\n    return line().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  getRangeGenerator() {\n    return area().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value)).y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value)).curve(this.curve);\n  }\n\n  getAreaGenerator() {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area().x(xProperty).y0(() => this.yScale.range()[0]).y1(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nLineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) {\n  return new (t || LineSeriesComponent)();\n};\n\nLineSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-line-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    hasRange: \"hasRange\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c37,\n  decls: 6,\n  vars: 22,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-area\", \"\", 1, \"line-highlight\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"startOpacity\", \"gradient\", \"stops\", \"animations\"], [\"ngx-charts-line\", \"\", 1, \"line-series\", 3, \"data\", \"path\", \"stroke\", \"animations\"], [\"ngx-charts-area\", \"\", \"class\", \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"active\", \"inactive\", \"opacity\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"ngx-charts-area\", \"\", 1, \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"animations\"]],\n  template: function LineSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 1);\n      i0.ɵɵelement(4, \"g\", 2);\n      i0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.areaPath)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))(\"opacity\", 0.25)(\"startOpacity\", 0)(\"gradient\", true)(\"stops\", ctx.areaGradientStops)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"stroke\", ctx.stroke)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasRange);\n    }\n  },\n  directives: [SvgLinearGradientComponent, AreaComponent, LineComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line-series]',\n      template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    hasRange: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showRefLines = false;\n    this.showRefLabels = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nLineChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLineChartComponent_BaseFactory;\n  return function LineChartComponent_Factory(t) {\n    return (ɵLineChartComponent_BaseFactory || (ɵLineChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LineChartComponent)))(t || LineChartComponent);\n  };\n}();\n\nLineChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"ngx-charts-line-chart\"]],\n  contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function LineChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function LineChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showRefLines: \"showRefLines\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"line-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"hasRange\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"curve\", \"hasRange\", \"animations\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 12, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 11, \"g\", 4);\n      i0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-line-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LineChartModule {}\n\nLineChartModule.ɵfac = function LineChartModule_Factory(t) {\n  return new (t || LineChartModule)();\n};\n\nLineChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LineChartModule\n});\nLineChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n      exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PieLabelComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.animations = true;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes) {\n    this.setTransforms();\n    this.update();\n  }\n\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n\n  update() {\n    let startRadius = this.radius;\n\n    if (this.explodeSlices) {\n      startRadius = this.radius * this.value / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius); // Calculate innerPos then scale outer position to match label position\n\n    const innerPos = innerArc.centroid(this.data);\n    let scale = this.data.pos[1] / innerPos[1];\n\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX() {\n    return this.data.pos[0];\n  }\n\n  get textY() {\n    return this.data.pos[1];\n  }\n\n  textAnchor() {\n    return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n}\n\nPieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) {\n  return new (t || PieLabelComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nPieLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-label\", \"\"]],\n  inputs: {\n    data: \"data\",\n    radius: \"radius\",\n    label: \"label\",\n    color: \"color\",\n    max: \"max\",\n    value: \"value\",\n    explodeSlices: \"explodeSlices\",\n    animations: \"animations\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c38,\n  decls: 6,\n  vars: 17,\n  consts: [[\"dy\", \".35em\", 1, \"pie-label\"], [\"fill\", \"none\", 1, \"pie-label-line\", \"line\"]],\n  template: function PieLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"title\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(2, \"g\");\n      i0.ɵɵelementStart(3, \"text\", 0);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"transform\", ctx.styleTransform)(\"transition\", ctx.textTransition);\n      i0.ɵɵattribute(\"transform\", ctx.attrTransform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", ctx.textAnchor())(\"shape-rendering\", \"crispEdges\");\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵattribute(\"d\", ctx.line)(\"stroke\", ctx.color);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-label]',\n      template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PolarSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.circleRadius = 3;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const line = this.getLineGenerator();\n    const data = this.sortData(this.data.series);\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n    this.path = line(data) || '';\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n\n    if (this.scaleType === ScaleType.Time) {\n      return this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      return this.xScale(Number(label));\n    }\n\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator() {\n    return lineRadial().angle(d => this.getAngle(d)).radius(d => this.getRadius(d)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      return sortByTime(data, 'name');\n    }\n\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n\n}\n\nPolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) {\n  return new (t || PolarSeriesComponent)();\n};\n\nPolarSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-polar-series\", \"\"]],\n  inputs: {\n    name: \"name\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    gradient: \"gradient\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c39,\n  decls: 5,\n  vars: 11,\n  consts: [[1, \"polar-charts-series\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-line\", \"\", 1, \"polar-series-path\", 3, \"path\", \"stroke\", \"fill\", \"animations\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 2);\n      i0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 12, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.active)(\"inactive\", ctx.inactive);\n      i0.ɵɵproperty(\"path\", ctx.path)(\"stroke\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"animations\", ctx.animations);\n      i0.ɵɵattribute(\"fill-opacity\", ctx.rangeFillOpacity);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles);\n    }\n  },\n  directives: [SvgRadialGradientComponent, LineComponent, CircleComponent, i2.NgIf, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-polar-series]',\n      template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nconst twoPI = 2 * Math.PI;\n\nclass PolarChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveCardinalClosed;\n    this.activeEntries = [];\n    this.rangeFillOpacity = 0.15;\n    this.trimYAxisTicks = true;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showSeriesOnHover = true;\n    this.gradient = false;\n    this.yAxisMinScale = 0;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter(); // series: any; // ???\n\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.orientation = Orientation;\n  }\n\n  update() {\n    super.update();\n    this.setDims();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n    const outerRadius = this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5);\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n    this.yAxisDims = Object.assign(Object.assign({}, this.dims), {\n      width: halfWidth\n    });\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n    const minDistance = 10;\n    /* from pie chart, abstract out -*/\n\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j]; // if they're on the same side\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()) {\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n\n    return values;\n  }\n\n  getYValues() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()) {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n    min = Math.max(0, min);\n\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    switch (this.scaleType) {\n      case ScaleType.Time:\n        return scaleTime().range([0, width]).domain(domain);\n\n      case ScaleType.Linear:\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n\n      default:\n        return scalePoint().range([0, width - twoPI / domain.length]).padding(0).domain(domain);\n    }\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === ScaleType.Ordinal) {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nPolarChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPolarChartComponent_BaseFactory;\n  return function PolarChartComponent_Factory(t) {\n    return (ɵPolarChartComponent_BaseFactory || (ɵPolarChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PolarChartComponent)))(t || PolarChartComponent);\n  };\n}();\n\nPolarChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarChartComponent,\n  selectors: [[\"ngx-charts-polar-chart\"]],\n  contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showSeriesOnHover: \"showSeriesOnHover\",\n    gradient: \"gradient\",\n    yAxisMinScale: \"yAxisMinScale\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"polar-chart\", \"chart\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"polar-chart-background\"], [4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"gridline-path radial-gridline-path\", \"cx\", \"0\", \"cy\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"gridline-path\", \"radial-gridline-path\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"], [\"ngx-charts-polar-series\", \"\", 3, \"gradient\", \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\");\n      i0.ɵɵelement(3, \"circle\", 2);\n      i0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, \"g\", 3);\n      i0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 9, \"g\", 4);\n      i0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, \"g\", 5);\n      i0.ɵɵelementStart(8, \"g\");\n      i0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"r\", ctx.outerRadius);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showGridLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis && ctx.showXAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25, \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-polar-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showSeriesOnHover: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    yAxisMinScale: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieArcComponent {\n  constructor(element) {\n    this.startAngle = 0;\n    this.endAngle = Math.PI * 2;\n    this.cornerRadius = 0;\n    this.explodeSlices = false;\n    this.gradient = false;\n    this.animate = true;\n    this.pointerEvents = true;\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update() {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc() {\n    let outerRadius = this.outerRadius;\n\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = this.outerRadius * this.value / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().attrTween('d', function (d) {\n      this._current = this._current || d;\n      const copyOfD = Object.assign({}, d);\n      copyOfD.endAngle = copyOfD.startAngle;\n      const interpolater = interpolate(copyOfD, copyOfD);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    }).transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  updateAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  onClick() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n\n}\n\nPieArcComponent.ɵfac = function PieArcComponent_Factory(t) {\n  return new (t || PieArcComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieArcComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-arc\", \"\"]],\n  inputs: {\n    fill: \"fill\",\n    startAngle: \"startAngle\",\n    endAngle: \"endAngle\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    cornerRadius: \"cornerRadius\",\n    value: \"value\",\n    max: \"max\",\n    data: \"data\",\n    explodeSlices: \"explodeSlices\",\n    gradient: \"gradient\",\n    animate: \"animate\",\n    pointerEvents: \"pointerEvents\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c40,\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"arc-group\"], [4, \"ngIf\"], [1, \"arc\", 3, \"click\", \"dblclick\", \"mouseenter\", \"mouseleave\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\"]],\n  template: function PieArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"path\", 2);\n      i0.ɵɵlistener(\"click\", function PieArcComponent_Template__svg_path_click_2_listener() {\n        return ctx.onClick();\n      })(\"dblclick\", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) {\n        return ctx.onDblClick($event);\n      })(\"mouseenter\", function PieArcComponent_Template__svg_path_mouseenter_2_listener() {\n        return ctx.activate.emit(ctx.data);\n      })(\"mouseleave\", function PieArcComponent_Template__svg_path_mouseleave_2_listener() {\n        return ctx.deactivate.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"pointer-events\", ctx.getPointerEvents());\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"fill\", ctx.getGradient());\n    }\n  },\n  directives: [SvgRadialGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-arc]',\n      template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    endAngle: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieSeriesComponent {\n  constructor() {\n    this.series = [];\n    this.innerRadius = 60;\n    this.outerRadius = 80;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    const pieGenerator = pie().value(d => d.value).sort(null);\n    const arcData = pieGenerator(this.series);\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc() {\n    const factor = 1.5;\n    return arc().innerRadius(this.outerRadius * factor).outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData) {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n\n        if (!this.labelVisible(b)) {\n          continue;\n        } // if they're on the same side\n\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc) {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc) {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n\n    return this.label(myArc);\n  }\n\n  label(myArc) {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc) {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc) {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n}\n\nPieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) {\n  return new (t || PieSeriesComponent)();\n};\n\nPieSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    series: \"series\",\n    dims: \"dims\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    explodeSlices: \"explodeSlices\",\n    showLabels: \"showLabels\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c41,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"gradient\", \"data\", \"max\", \"explodeSlices\", \"isActive\", \"animate\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", \"dblclick\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\"]],\n  template: function PieSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [PieLabelComponent, PieArcComponent, i2.NgForOf, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-series]',\n      template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    colors: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    showLabels: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width * 4 / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nAdvancedPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAdvancedPieChartComponent_BaseFactory;\n  return function AdvancedPieChartComponent_Factory(t) {\n    return (ɵAdvancedPieChartComponent_BaseFactory || (ɵAdvancedPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AdvancedPieChartComponent)))(t || AdvancedPieChartComponent);\n  };\n}();\n\nAdvancedPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedPieChartComponent,\n  selectors: [[\"ngx-charts-advanced-pie-chart\"]],\n  contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    valueFormatting: \"valueFormatting\",\n    nameFormatting: \"nameFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 37,\n  consts: [[1, \"advanced-pie\", \"chart\"], [3, \"view\", \"showLegend\", \"animations\"], [1, \"pie\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"innerRadius\", \"activeEntries\", \"outerRadius\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"animations\", \"select\", \"activate\", \"deactivate\"], [1, \"advanced-pie-legend-wrapper\"], [3, \"data\", \"colors\", \"width\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\", \"select\", \"activate\", \"deactivate\"]],\n  template: function AdvancedPieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵelementStart(2, \"ngx-charts-chart\", 1);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(3, \"g\", 2);\n      i0.ɵɵelementStart(4, \"g\", 3);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelementStart(6, \"ngx-charts-advanced-legend\", 5);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.dims.width, \"px\")(\"height\", ctx.dims.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(34, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.results)(\"innerRadius\", ctx.innerRadius)(\"activeEntries\", ctx.activeEntries)(\"outerRadius\", ctx.outerRadius)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.width - ctx.dims.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.results)(\"colors\", ctx.colors)(\"width\", ctx.width - ctx.dims.width - ctx.margin[1])(\"label\", ctx.label)(\"animations\", ctx.animations)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.nameFormatting)(\"percentageFormatting\", ctx.percentageFormatting);\n    }\n  },\n  directives: [ChartComponent, PieSeriesComponent, AdvancedLegendComponent],\n  styles: [_c25, \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedPieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-pie-chart',\n      template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"]\n    }]\n  }], null, {\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    nameFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.labels = false;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.explodeSlices = false;\n    this.doughnut = false;\n    this.arcWidth = 0.25;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.dblclick = new EventEmitter();\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  update() {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n\n    this.innerRadius = 0;\n\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain(); // sort data according to domain\n\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  hasNoOptionalMarginsSet() {\n    return !this.margins || this.margins.length <= 0;\n  }\n\n}\n\nPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieChartComponent_BaseFactory;\n  return function PieChartComponent_Factory(t) {\n    return (ɵPieChartComponent_BaseFactory || (ɵPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieChartComponent)))(t || PieChartComponent);\n  };\n}();\n\nPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieChartComponent,\n  selectors: [[\"ngx-charts-pie-chart\"]],\n  contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    labels: \"labels\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    explodeSlices: \"explodeSlices\",\n    doughnut: \"doughnut\",\n    arcWidth: \"arcWidth\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    margins: \"margins\"\n  },\n  outputs: {\n    dblclick: \"dblclick\",\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 24,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"pie-chart\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"showLabels\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"activeEntries\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"dblclick\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      })(\"legendLabelClick\", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"dblclick\", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) {\n        return ctx.dblclick.emit($event);\n      })(\"select\", function PieChartComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function PieChartComponent_Template__svg_g_activate_2_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(21, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.translation);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.data)(\"showLabels\", ctx.labels)(\"labelFormatting\", ctx.labelFormatting)(\"trimLabels\", ctx.trimLabels)(\"maxLabelLength\", ctx.maxLabelLength)(\"activeEntries\", ctx.activeEntries)(\"innerRadius\", ctx.innerRadius)(\"outerRadius\", ctx.outerRadius)(\"explodeSlices\", ctx.explodeSlices)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  directives: [ChartComponent, PieSeriesComponent],\n  styles: [_c25, _c42],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"]\n    }]\n  }], null, {\n    labels: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    doughnut: [{\n      type: Input\n    }],\n    arcWidth: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    margins: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nfunction gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale = scaleBand();\n  const yScale = scaleBand();\n  const width = dims.width;\n  const height = dims.height;\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n  const xDomain = [];\n  const yDomain = [];\n\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => d ? d.value : 0).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n  constructor(element) {\n    this.innerRadius = 70;\n    this.outerRadius = 80;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.layout = pie().value(d => d.data.value).sort(null);\n    this.arcs = this.getArcs();\n  }\n\n  getArcs() {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data) {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  label(arc) {\n    return arc.data.name;\n  }\n\n  color(arc) {\n    return this.colors(this.label(arc));\n  }\n\n}\n\nPieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) {\n  return new (t || PieGridSeriesComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieGridSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-grid-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    data: \"data\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c43,\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"pie-grid-arcs\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieGridSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [PieArcComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-grid-series]',\n      template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    colors: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieGridComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.minWidth = 150;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n    this.series = this.getSeries();\n    this.setColors();\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({\n    data\n  }) {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries() {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n      let count = 0;\n\n      const colors = () => {\n        count += 1;\n\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [d, {\n          data: {\n            other: true,\n            value: total - value,\n            name: d.data.name\n          }\n        }]\n      };\n    });\n  }\n\n  getTotal() {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nPieGridComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieGridComponent_BaseFactory;\n  return function PieGridComponent_Factory(t) {\n    return (ɵPieGridComponent_BaseFactory || (ɵPieGridComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieGridComponent)))(t || PieGridComponent);\n  };\n}();\n\nPieGridComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridComponent,\n  selectors: [[\"ngx-charts-pie-grid\"]],\n  contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    designatedTotal: \"designatedTotal\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    minWidth: \"minWidth\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"pie-grid\", \"chart\"], [\"class\", \"pie-grid-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"pie-grid-item\"], [\"ngx-charts-pie-grid-series\", \"\", \"ngx-tooltip\", \"\", 3, \"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countPrefix\", 4, \"ngIf\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\", 3, \"countTo\", \"countSuffix\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 1, \"label\", 3, \"countTo\", \"countPrefix\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 1, \"label\"]],\n  template: function PieGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, \"g\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(5, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.series);\n    }\n  },\n  directives: [ChartComponent, PieGridSeriesComponent, CountUpDirective, i2.NgForOf, TooltipDirective, i2.NgIf],\n  styles: [_c25, \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-grid',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"]\n    }]\n  }], null, {\n    designatedTotal: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieChartModule {}\n\nPieChartModule.ɵfac = function PieChartModule_Factory(t) {\n  return new (t || PieChartModule)();\n};\n\nPieChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PieChartModule\n});\nPieChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n      exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PolarChartModule {}\n\nPolarChartModule.ɵfac = function PolarChartModule_Factory(t) {\n  return new (t || PolarChartModule)();\n};\n\nPolarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PolarChartModule\n});\nPolarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, LineChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, LineChartModule],\n      declarations: [PolarChartComponent, PolarSeriesComponent],\n      exports: [PolarChartComponent, PolarSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\n\nclass CardComponent {\n  constructor(element, cd, zone, platformId) {\n    this.cd = cd;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.value = '';\n    this.textFontSize = 12;\n    this.textTransform = '';\n    this.initialized = false;\n    this.bandHeight = 10;\n    this.textPadding = [10, 20, 5, 20];\n    this.labelFontSize = 15;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n\n  update() {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n      this.label = this.label ? this.label : this.data.name;\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n      const value = hasValue ? valueFormatting(cardData) : '';\n      this.value = this.paddedValue(value);\n      this.setPadding();\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n\n        this.value = value;\n\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n\n    return value;\n  }\n\n  startCount() {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({\n        value,\n        finished\n      }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({\n            label: this.label,\n            data: this.data,\n            value\n          });\n\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText() {\n    this.zone.run(() => {\n      const {\n        width,\n        height\n      } = this.textEl.nativeElement.getBoundingClientRect();\n\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n    this.setPadding();\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n}\n\nCardComponent.ɵfac = function CardComponent_Factory(t) {\n  return new (t || CardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardComponent,\n  selectors: [[\"g\", \"ngx-charts-card\", \"\"]],\n  viewQuery: function CardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    data: \"data\",\n    medianSize: \"medianSize\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c46,\n  decls: 10,\n  vars: 25,\n  consts: [[1, \"cell\", 3, \"click\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card\"], [\"class\", \"card-band\", \"stroke\", \"none\", 4, \"ngIf\"], [\"x\", \"5\", \"alignment-baseline\", \"hanging\", 1, \"trimmed-label\"], [3, \"innerHTML\"], [\"text-anchor\", \"start\", \"alignment-baseline\", \"hanging\", 1, \"value-text\"], [\"textEl\", \"\"], [\"stroke\", \"none\", 1, \"card-band\"]],\n  template: function CardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"click\", function CardComponent_Template__svg_g_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelement(1, \"rect\", 1);\n      i0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n      i0.ɵɵelementStart(3, \"title\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"foreignObject\", 3);\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(6, \"p\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(7, \"text\", 5, 6);\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.color);\n      i0.ɵɵattribute(\"width\", ctx.cardWidth)(\"height\", ctx.cardHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.bandColor && ctx.bandColor !== ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.cardHeight - ctx.textPadding[2])(\"width\", ctx.textWidth)(\"height\", ctx.labelFontSize + ctx.textPadding[2]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"color\", ctx.textColor)(\"font-size\", ctx.labelFontSize, \"px\")(\"line-height\", ctx.labelFontSize, \"px\");\n      i0.ɵɵproperty(\"innerHTML\", ctx.formattedLabel, i0.ɵɵsanitizeHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.textColor)(\"font-size\", ctx.textFontSize, \"pt\");\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.textPadding[0]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  directives: [i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    medianSize: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl', {\n        static: false\n      }]\n    }]\n  });\n})();\n/**\n * Converts a hex to RGB\n *\n * @export\n */\n\n\nfunction hexToRgb(value) {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\n\n\nfunction invertColor(value) {\n  const color = d3_color.rgb(value);\n  const {\n    r,\n    g,\n    b,\n    opacity\n  } = color;\n\n  if (opacity === 0) {\n    return color.toString();\n  }\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n  return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\n\n\nfunction shadeRGBColor({\n  r,\n  g,\n  b\n}, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n  constructor() {\n    this.innerPadding = 15;\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data.map(d => {\n        const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n        return hasValue ? valueFormatting({\n          data: d.data,\n          label: d ? d.data.name : '',\n          value: d && d.data ? d.data.value : ''\n        }).length : 0;\n      }).sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards() {\n    const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card) {\n    return card.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nCardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) {\n  return new (t || CardSeriesComponent)();\n};\n\nCardSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-card-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    innerPadding: \"innerPadding\",\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c47,\n  decls: 2,\n  vars: 4,\n  consts: [[\"class\", \"card-empty\", \"rx\", \"3\", \"ry\", \"3\", 3, \"fill\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card-empty\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function CardSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, \"rect\", 0);\n      i0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.emptySlots)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cards)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [CardComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card-series]',\n      template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NumberCardComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.innerPadding = 15;\n    this.margin = [10, 10, 10, 10];\n  }\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({\n        value: null\n      });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nNumberCardComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵNumberCardComponent_BaseFactory;\n  return function NumberCardComponent_Factory(t) {\n    return (ɵNumberCardComponent_BaseFactory || (ɵNumberCardComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NumberCardComponent)))(t || NumberCardComponent);\n  };\n}();\n\nNumberCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NumberCardComponent,\n  selectors: [[\"ngx-charts-number-card\"]],\n  inputs: {\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    innerPadding: \"innerPadding\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    designatedTotal: \"designatedTotal\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"number-card\", \"chart\"], [\"ngx-charts-card-series\", \"\", 3, \"colors\", \"cardColor\", \"bandColor\", \"textColor\", \"emptyColor\", \"data\", \"dims\", \"innerPadding\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function NumberCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function NumberCardComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"clickable\", ctx.clickable);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"cardColor\", ctx.cardColor)(\"bandColor\", ctx.bandColor)(\"textColor\", ctx.textColor)(\"emptyColor\", ctx.emptyColor)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"innerPadding\", ctx.innerPadding)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [ChartComponent, CardSeriesComponent],\n  styles: [_c25, \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-number-card',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"]\n    }]\n  }], null, {\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    designatedTotal: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NumberCardModule {}\n\nNumberCardModule.ɵfac = function NumberCardModule_Factory(t) {\n  return new (t || NumberCardModule)();\n};\n\nNumberCardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NumberCardModule\n});\nNumberCardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n      exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n    }]\n  }], null, null);\n})();\n\nclass TreeMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n    this.orientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update() {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n    this.animateToCurrentForm();\n  }\n\n  getTextColor() {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: 0.3\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n}\n\nTreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) {\n  return new (t || TreeMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nTreeMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell\", \"\"]],\n  inputs: {\n    data: \"data\",\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c48,\n  decls: 4,\n  vars: 7,\n  consts: [[4, \"ngIf\"], [1, \"cell\", 3, \"click\"], [\"class\", \"treemap-label\", 3, \"pointer-events\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [1, \"treemap-label\"], [1, \"treemap-label\", 3, \"innerHTML\"], [\"class\", \"treemap-val\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"treemap-val\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"treemap-val\", 3, \"countTo\", \"valueFormatting\"], [1, \"treemap-val\"]],\n  template: function TreeMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵelementStart(2, \"rect\", 1);\n      i0.ɵɵlistener(\"click\", function TreeMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, \"foreignObject\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.width >= 70 && ctx.height >= 35);\n    }\n  },\n  directives: [SvgLinearGradientComponent, CountUpDirective, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell]',\n      template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapCellSeriesComponent {\n  constructor() {\n    this.gradient = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.styleTypes = StyleTypes;\n    this.placementTypes = PlacementTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    return this.data.children.filter(d => {\n      return d.depth === 1;\n    }).map((d, index) => {\n      const label = d.id;\n      return {\n        data: d.data,\n        x: d.x0,\n        y: d.y0,\n        width: d.x1 - d.x0,\n        height: d.y1 - d.y0,\n        fill: this.colors.getColor(label),\n        label,\n        value: d.value\n      };\n    });\n  }\n\n  getTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nTreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) {\n  return new (t || TreeMapCellSeriesComponent)();\n};\n\nTreeMapCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c49,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\"]],\n  template: function TreeMapCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [TreeMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.margin = [10, 10, 10, 10];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.domain = this.getDomain();\n    this.treemap = treemap().size([this.dims.width, this.dims.height]);\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n    const root = stratify().id(d => {\n      let label = d.name;\n\n      if (label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label.toLocaleString();\n      }\n\n      return label;\n    }).parentId(d => d.isRoot ? null : 'root')([rootNode, ...this.results]).sum(d => d.value);\n    this.data = this.treemap(root);\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nTreeMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵTreeMapComponent_BaseFactory;\n  return function TreeMapComponent_Factory(t) {\n    return (ɵTreeMapComponent_BaseFactory || (ɵTreeMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TreeMapComponent)))(t || TreeMapComponent);\n  };\n}();\n\nTreeMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapComponent,\n  selectors: [[\"ngx-charts-tree-map\"]],\n  contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    results: \"results\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 16,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"tree-map\", \"chart\"], [\"ngx-charts-tree-map-cell-series\", \"\", 3, \"colors\", \"data\", \"dims\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"select\"]],\n  template: function TreeMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function TreeMapComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(13, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [ChartComponent, TreeMapCellSeriesComponent],\n  styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-tree-map',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"]\n    }]\n  }], null, {\n    results: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass TreeMapModule {}\n\nTreeMapModule.ɵfac = function TreeMapModule_Factory(t) {\n  return new (t || TreeMapModule)();\n};\n\nTreeMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeMapModule\n});\nTreeMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n      exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n    }]\n  }], null, null);\n})();\n\nvar ElementType;\n\n(function (ElementType) {\n  ElementType[\"Value\"] = \"value\";\n  ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\n\nclass LinearGaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.min = 0;\n    this.max = 100;\n    this.value = 0;\n    this.margin = [10, 20, 10, 20];\n    this.valueResizeScale = 1;\n    this.unitsResizeScale = 1;\n    this.valueTextTransform = '';\n    this.valueTranslate = '';\n    this.unitsTextTransform = '';\n    this.unitsTranslate = '';\n    this.barOrientation = BarOrientation;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText(ElementType.Value);\n      this.scaleText(ElementType.Units);\n    });\n  }\n\n  update() {\n    super.update();\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.setColors();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText(ElementType.Value), 50);\n      setTimeout(() => this.scaleText(ElementType.Units), 50);\n    }\n  }\n\n  getValueDomain() {\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat = true) {\n    let el;\n    let resizeScale;\n\n    if (element === ElementType.Value) {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const {\n      width,\n      height\n    } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === ElementType.Value) {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n\n      this.cd.markForCheck();\n\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  onClick() {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n  }\n\n}\n\nLinearGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLinearGaugeComponent_BaseFactory;\n  return function LinearGaugeComponent_Factory(t) {\n    return (ɵLinearGaugeComponent_BaseFactory || (ɵLinearGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LinearGaugeComponent)))(t || LinearGaugeComponent);\n  };\n}();\n\nLinearGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LinearGaugeComponent,\n  selectors: [[\"ngx-charts-linear-gauge\"]],\n  viewQuery: function LinearGaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c50, 5);\n      i0.ɵɵviewQuery(_c51, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    value: \"value\",\n    units: \"units\",\n    previousValue: \"previousValue\",\n    valueFormatting: \"valueFormatting\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 15,\n  vars: 38,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"click\"], [1, \"linear-gauge\", \"chart\"], [\"ngx-charts-bar\", \"\", 1, \"background-bar\", 3, \"width\", \"height\", \"x\", \"y\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"ngx-charts-bar\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\", 4, \"ngIf\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\", 4, \"ngIf\"], [\"alignment-baseline\", \"after-edge\", 1, \"value\"], [\"valueTextEl\", \"\"], [\"alignment-baseline\", \"before-edge\", 1, \"units\"], [\"unitsTextEl\", \"\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\"]],\n  template: function LinearGaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"click\", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵelement(3, \"g\", 3);\n      i0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, \"line\", 4);\n      i0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, \"line\", 5);\n      i0.ɵɵelementStart(6, \"g\");\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵelementStart(8, \"text\", 6, 7);\n      i0.ɵɵtext(10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"g\");\n      i0.ɵɵelementStart(12, \"text\", 8, 9);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(33, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"width\", ctx.dims.width)(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"data\", i0.ɵɵpureFunction0(36, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"width\", ctx.valueScale(ctx.value))(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"fill\", ctx.colors.getColor(ctx.units))(\"data\", i0.ɵɵpureFunction0(37, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.valueTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.valueTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayValue, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.unitsTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.unitsTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.units, \" \");\n    }\n  },\n  directives: [ChartComponent, BarComponent, i2.NgIf],\n  styles: [_c25, \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LinearGaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-linear-gauge',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"]\n    }]\n  }], null, {\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    previousValue: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    valueTextEl: [{\n      type: ViewChild,\n      args: ['valueTextEl']\n    }],\n    unitsTextEl: [{\n      type: ViewChild,\n      args: ['unitsTextEl']\n    }]\n  });\n})();\n\nclass GaugeArcComponent {\n  constructor() {\n    this.isActive = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  tooltipText(arc) {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n}\n\nGaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) {\n  return new (t || GaugeArcComponent)();\n};\n\nGaugeArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeArcComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-arc\", \"\"]],\n  inputs: {\n    backgroundArc: \"backgroundArc\",\n    valueArc: \"valueArc\",\n    cornerRadius: \"cornerRadius\",\n    colors: \"colors\",\n    isActive: \"isActive\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  attrs: _c53,\n  decls: 2,\n  vars: 23,\n  consts: [[\"ngx-charts-pie-arc\", \"\", 1, \"background-arc\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"data\", \"animate\", \"pointerEvents\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"fill\", \"data\", \"animate\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function GaugeArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵlistener(\"select\", function GaugeArcComponent_Template__svg_g_select_1_listener($event) {\n        return ctx.select.emit($event);\n      })(\"activate\", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.backgroundArc.endAngle)(\"innerRadius\", ctx.backgroundArc.innerRadius)(\"outerRadius\", ctx.backgroundArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"data\", ctx.backgroundArc.data)(\"animate\", false)(\"pointerEvents\", false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.valueArc.endAngle)(\"innerRadius\", ctx.valueArc.innerRadius)(\"outerRadius\", ctx.valueArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"fill\", ctx.colors.getColor(ctx.valueArc.data.name))(\"data\", ctx.valueArc.data)(\"animate\", ctx.animations)(\"isActive\", ctx.isActive)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Top)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipTitle\", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.valueArc.data);\n    }\n  },\n  directives: [PieArcComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-arc]',\n      template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    backgroundArc: [{\n      type: Input\n    }],\n    valueArc: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GaugeAxisComponent {\n  constructor() {\n    this.rotate = '';\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks() {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = angleDeg * Math.PI / 180;\n      const textAnchor = this.getTextAnchor(angleDeg);\n      let skip = false;\n\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = smallAngleDeg * Math.PI / 180;\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = TextAnchor.Middle;\n\n    if (angle > 45 && angle <= 135) {\n      textAnchor = TextAnchor.Start;\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = TextAnchor.End;\n    }\n\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle) {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n    const points = [{\n      x: x1,\n      y: y1\n    }, {\n      x: x2,\n      y: y2\n    }];\n    const lineGenerator = line().x(d => d.x).y(d => d.y);\n    return lineGenerator(points);\n  }\n\n}\n\nGaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) {\n  return new (t || GaugeAxisComponent)();\n};\n\nGaugeAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-axis\", \"\"]],\n  inputs: {\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    min: \"min\",\n    max: \"max\",\n    angleSpan: \"angleSpan\",\n    startAngle: \"startAngle\",\n    radius: \"radius\",\n    valueScale: \"valueScale\",\n    tickFormatting: \"tickFormatting\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c54,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gauge-tick gauge-tick-large\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gauge-tick gauge-tick-small\", 4, \"ngFor\", \"ngForOf\"], [1, \"gauge-tick\", \"gauge-tick-large\"], [\"alignment-baseline\", \"central\"], [1, \"gauge-tick\", \"gauge-tick-small\"]],\n  template: function GaugeAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, \"g\", 0);\n      i0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, \"g\", 0);\n      i0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.rotate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.small);\n    }\n  },\n  directives: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-axis]',\n      template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    valueScale: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.min = 0;\n    this.max = 100;\n    this.bigSegments = 10;\n    this.smallSegments = 5;\n    this.showAxis = true;\n    this.startAngle = -120;\n    this.angleSpan = 240;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.showText = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.resizeScale = 1;\n    this.rotation = '';\n    this.textTransform = 'scale(1, 1)';\n    this.cornerRadius = 10;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    } // make the starting angle positive\n\n\n    if (this.startAngle < 0) {\n      this.startAngle = this.startAngle % 360 + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n    this.arcs = this.getArcs();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs() {\n    const arcs = [];\n    const availableRadius = this.outerRadius * 0.7;\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n    let i = 0;\n\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n      const backgroundArc = {\n        endAngle: this.angleSpan * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n      const valueArc = {\n        endAngle: Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain() {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat = true) {\n    if (!this.showText) {\n      return;\n    }\n\n    const {\n      width\n    } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor(availableSpace / (width / this.resizeScale) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item) {\n    return item.valueArc.data.name;\n  }\n\n}\n\nGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵGaugeComponent_BaseFactory;\n  return function GaugeComponent_Factory(t) {\n    return (ɵGaugeComponent_BaseFactory || (ɵGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(GaugeComponent)))(t || GaugeComponent);\n  };\n}();\n\nGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeComponent,\n  selectors: [[\"ngx-charts-gauge\"]],\n  contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  viewQuery: function GaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    min: \"min\",\n    max: \"max\",\n    textValue: \"textValue\",\n    units: \"units\",\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    results: \"results\",\n    showAxis: \"showAxis\",\n    startAngle: \"startAngle\",\n    angleSpan: \"angleSpan\",\n    activeEntries: \"activeEntries\",\n    axisTickFormatting: \"axisTickFormatting\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    showText: \"showText\",\n    margin: \"margin\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"gauge\", \"chart\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\", 4, \"ngIf\"], [\"alignment-baseline\", \"central\", 3, \"textAnchor\", 4, \"ngIf\"], [\"ngx-charts-gauge-arc\", \"\", 3, \"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\"], [\"alignment-baseline\", \"central\"], [\"textEl\", \"\"], [\"x\", \"0\", \"dy\", \"0\"], [\"x\", \"0\", \"dy\", \"1.2em\"]],\n  template: function GaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, \"text\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showText);\n    }\n  },\n  directives: [ChartComponent, GaugeArcComponent, GaugeAxisComponent, i2.NgForOf, i2.NgIf],\n  styles: [_c25, \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-gauge',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    textValue: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    showAxis: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    axisTickFormatting: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    showText: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl']\n    }]\n  });\n})();\n\nclass GaugeModule {}\n\nGaugeModule.ɵfac = function GaugeModule_Factory(t) {\n  return new (t || GaugeModule)();\n};\n\nGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GaugeModule\n});\nGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, BarChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, BarChartModule],\n      declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n      exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n    }]\n  }], null, null);\n})(); // The export is needed here to generate a valid polyfills.metadata.json file\n\n\nfunction ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n\nclass NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n\n}\n\nNgxChartsModule.ɵfac = function NgxChartsModule_Factory(t) {\n  return new (t || NgxChartsModule)();\n};\n\nNgxChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxChartsModule\n});\nNgxChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChartsModule, [{\n    type: NgModule,\n    args: [{\n      exports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction tickFormat(fieldType, groupByType) {\n  return function (label) {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(label);\n    }\n\n    return label.toString();\n  };\n}\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };","map":{"version":3,"sources":["D:/RSLang/RSLang/node_modules/@swimlane/ngx-charts/fesm2015/swimlane-ngx-charts.mjs"],"names":["i0","PLATFORM_ID","Component","ViewEncapsulation","Inject","Input","ViewChild","HostBinding","HostListener","Injectable","ChangeDetectionStrategy","EventEmitter","Output","Directive","NgModule","ContentChild","i2","isPlatformBrowser","isPlatformServer","CommonModule","__decorate","DomPortalOutlet","ComponentPortal","fromEvent","debounceTime","trigger","transition","style","animate","select","brushX","scaleTime","scaleLinear","scalePoint","scaleOrdinal","scaleQuantile","scaleBand","area","curveLinear","line","arc","lineRadial","curveCardinalClosed","pie","range","min","max","quantile","interpolate","easeSinInOut","cloneDeep","format","d3_color","treemap","stratify","timeFormat","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","arguments","clearTimeout","trailing","setTimeout","throttleable","duration","innerDecorator","target","key","descriptor","configurable","enumerable","get","getter","Object","defineProperty","value","PlacementTypes","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","Top","top","Bottom","height","Center","undefined","horizontalPosition","Left","left","Right","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","positionContent","determinePlacement","TooltipContentComponent","constructor","element","renderer","platformId","cssClasses","clz","type","cssClass","ngAfterViewInit","position","bind","nativeElm","nativeElement","host","getBoundingClientRect","checkFlip","showCaret","addClass","setStyle","caretElm","onWindowResize","ɵfac","ElementRef","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","prototype","selector","template","encapsulation","None","styles","decorators","title","InjectionRegisteryService","injectionService","defaults","components","Map","getByType","create","bindings","createByType","assignDefaults","component","injectComponent","register","destroy","instance","compsByType","componentType","length","idx","indexOf","splice","destroyAll","destroyByType","comps","i","appendComponent","inputs","assign","outputs","has","set","types","push","isViewContainerRef","x","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","Error","setRootViewContainer","getComponentRootNode","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindingKeys","getOwnPropertyNames","bindingName","eventKeys","eventName","componentClass","appendLocation","portalHost","portal","componentRef","attach","ApplicationRef","ComponentFactoryResolver","Injector","ɵprov","TooltipService","LegendPosition","LegendType","ScaleType","ScaleLegendComponent","horizontal","ngOnChanges","changes","gradientValues","gradientString","colors","domain","direction","gradient","splits","pairs","reverse","forEach","c","Math","round","join","changeDetection","OnPush","valueRange","formatLabel","label","toLocaleDateString","toLocaleString","escapeLabel","replace","match","LegendEntryComponent","isActive","activate","deactivate","toggle","trimmedLabel","formattedLabel","onMouseEnter","emit","name","onMouseLeave","color","LegendComponent","cd","labelClick","labelActivate","labelDeactivate","legendEntries","update","markForCheck","getLegendEntries","items","data","findIndex","getColor","entry","activeEntries","item","find","d","trackBy","index","ChangeDetectorRef","NgForOf","ChartComponent","showLegend","animations","legendLabelClick","legendLabelActivate","legendLabelDeactivate","legendColumns","legendType","getLegendType","legendOptions","ScaleLegend","chartColumns","chartWidth","floor","view","legendWidth","scaleType","Linear","Legend","providers","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","ɵdir","isDate","toString","call","isNumber","BaseChartComponent","chartElement","scheme","schemeType","Ordinal","ngOnInit","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","hostElem","parentNode","formatDates","g","series","j","resizeSubscription","source","subscription","pipe","e","copy","seriesItem","seriesItemCopy","JSON","parse","stringify","customColors","Orientation","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","trimLabel","s","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","TextAnchor","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","Middle","maxTicksLength","maxAllowedLength","approxHeight","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","End","tick","tickLength","tickTrim","len","charWidth","wordWidth","baseWidth","maxBaseWidth","cos","PI","abs","sin","getMaxTicks","maxScaleTicks","tickValues","tickWidth","tickTransform","gridLineTransform","gridLineHeight","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","orientation","xAxisTickCount","emitTicksHeight","newLabelOffset","xScale","showLabel","labelText","ticksComponent","roundedRect","w","h","r","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","Start","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","maxChars","t","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","yScale","AxesModule","ɵmod","ɵinj","imports","declarations","exports","StyleTypes","ShowTypes","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","listensForFocus","focus","listensForHover","mouseover","hideTooltip","onFocus","showTooltip","onBlur","contentDom","contains","onMouseClick","immediate","time","navigator","userAgent","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","tooltipTitle","tooltipTemplate","tooltipContext","ViewContainerRef","TooltipModule","entryComponents","cache","id","newId","random","pow","BarOrientation","SvgLinearGradientComponent","Vertical","Horizontal","stops","CircleComponent","onClick","classNames","Array","isArray","cx","cy","circleOpacity","pointerEvents","SeriesType","CircleSeriesComponent","Standard","barVisible","barOrientation","placementTypes","styleTypes","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","visibleValue","mapDataPointToCircle","seriesName","tooltipLabel","Time","Number","d1","radius","opacity","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","activateCircle","deactivateCircle","GridPanelComponent","ClassEnum","GridPanelSeriesComponent","gridPanels","getGridPanels","className","Odd","positionIndex","step","Even","paddingInner","class","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","animationsLoaded","hasGradient","loadAnimation","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","b","count","countFrom","countTo","countDecimals","countDuration","callback","startVal","endVal","countDown","decimals","dec","startTime","runCount","timestamp","frameVal","progress","finished","requestAnimationFrame","val","decimalChecker","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","root","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","initialized","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","includes","extent","on","selection","newSelection","newDomain","invert","legend","autoScale","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","showYLabel","legendPosition","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","cs","colorDomain","generateColorScheme","colorScale","Quantile","points","valueScale","formattedValue","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","endColor","startColor","currentVal","originalOffset","getUniqueXDomainValues","valueSet","Set","add","from","getScaleType","checkDateType","allDates","every","allNumbers","getXDomainArray","xScaleMin","xScaleMax","mappedValues","sort","a","aDate","getTime","bDate","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","baseValue","stacked","normalized","updateGradient","currentArea","startingArea","xProperty","y0","curve","d0values","d1values","isInactive","AreaChartComponent","legendTitle","xAxis","yAxis","timeline","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","showXAxisLabel","showYAxisLabel","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","yScaleMin","yScaleMax","nice","date","num","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","xAxisLabel","yAxisLabel","xAxisTickFormatting","yAxisTickFormatting","xAxisTicks","yAxisTicks","seriesTooltipTemplate","AreaChartNormalizedComponent","seriesType","valueOf","AreaChartStackedComponent","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","ariaLabel","BarChartType","D0Types","BarLabelComponent","horizontalPadding","verticalPadding","getSize","negative","formatedValue","barX","barWidth","barY","barHeight","SeriesHorizontal","showDataLabel","dataLabelWidthChanged","barsForDataLabels","updateTooltipSettings","positive","d0Type","Normalized","bars","getLabel","bar","Stacked","offset0","offset1","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","_a","active","dataItem","trackDataLabelBy","barLabel","click","BarHorizontalComponent","barPadding","dataLabelMaxWidth","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valueDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","barChartType","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","SeriesVerticalComponent","dataLabelHeightChanged","BarVerticalComponent","dataLabelMaxHeight","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","BarChartModule","BoxComponent","boxStrokeWidth","whiskerStrokeWidth","medianLineWidth","updateLineEl","maskLineId","maskLine","boxPath","oldPath","oldLineCoordinates","getStartingLineCoordinates","nodeBar","selectAll","ease","attrTween","pathTween","lineEl","lineCoordinates","_","v1","v2","lineTween","nodeLineEl","baseVal","precision","path0","path1","cloneNode","setAttribute","n0","getTotalLength","n1","distances","dt","p0","getPointAtLength","p1","p","strokeColor","BoxSeriesComponent","counts","mappedCounts","serie","whiskers","groupCounts","quartiles","getBoxQuantiles","getLinesCoordinates","box","formattedTooltipLabel","inputData","commonX","offsetX","whiskerLineWidth","whiskerZero","whiskerOne","median","topLine","medianLine","bottomLine","verticalLine","BoxChartComponent","setScales","getUniqueBoxChartXDomainValues","legendOpts","legendOptionsConfig","BoxChartModule","getDomain","minVal","maxVal","getScale","BubbleSeriesComponent","circles","getCircles","rScale","xScaleType","yScaleType","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","getRScale","getBubblePadding","yMin","xMin","yMax","xMax","Infinity","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","hasRange","getRangeGenerator","outerPath","areaGradientStops","rangeFillOpacity","LineChartComponent","LineChartModule","PieLabelComponent","labelTrim","labelTrimSize","setTransforms","styleTransform","textX","textY","attrTransform","textTransition","isIE","test","startRadius","explodeSlices","innerArc","innerRadius","outerRadius","innerPos","centroid","pos","outerPos","midAngle","startAngle","endAngle","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","cData","inactive","defaultTooltipText","twoPI","PolarChartComponent","showSeriesOnHover","yAxisMinScale","setDims","setTicks","halfWidth","halfHeight","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","thetaTicks","dd","startPos","minDistance","o","radiusTicks","getYValues","PieArcComponent","cornerRadius","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","_current","copyOfD","interpolater","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieSeriesComponent","trimLabels","maxLabelLength","pieGenerator","arcData","calculateLabelPositions","outerArc","factor","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","AdvancedPieChartComponent","nameFormatting","PieChartComponent","labels","doughnut","arcWidth","hasNoOptionalMarginsSet","translation","gridSize","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridSeriesComponent","layout","arcs","getArcs","other","PieGridComponent","getSeries","baselineLabelHeight","yPos","PieChartModule","PolarChartModule","calculateTextWidth","fontFamilyKey","text","defaultWidth","acc","curr","VERDANA_FONT_WIDTHS_16_PX","A","B","C","D","E","F","G","H","I","J","K","M","O","P","Q","R","S","T","U","V","W","X","Y","Z","k","l","m","n","q","u","z","$","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","scaleTextSSR","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","decs","textEl","availableWidth","availableHeight","resizeScale","bandColor","textColor","hexToRgb","rgb","invertColor","yiq","depth","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","NumberCardComponent","clickable","observers","NumberCardModule","TreeMapCellComponent","cellData","getTextColor","TreeMapCellSeriesComponent","children","x0","TreeMapComponent","rootNode","isRoot","parentId","TreeMapModule","ElementType","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","Value","Units","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","units","GaugeArcComponent","backgroundArc","valueArc","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","angleSpan","bigSegments","smallTickSegment","smallSegments","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","getTickPath","smallAngleDeg","smallAngle","lineGenerator","GaugeComponent","showAxis","showText","rotation","availableRadius","radiusPerArc","textRadius","dataMin","dataMax","textValue","availableSpace","axisTickFormatting","GaugeModule","ngxChartsPolyfills","SVGElement","HTMLDivElement","NgxChartsModule","fieldType","groupByType","formatter"],"mappings":"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I,SADiH;AAEvH2D,IAAAA,IAAI,EAAE,CAAC;AAAE4F,MAAAA,QAAQ,EAAE,+BAAZ;AAA6CC,MAAAA,QAAQ,EAAG;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAnImB;AAmId+F,MAAAA,eAAe,EAAE/O,uBAAuB,CAACgP,MAnI3B;AAmImC/F,MAAAA,aAAa,EAAExJ,iBAAiB,CAACyJ,IAnIpE;AAmI0EC,MAAAA,MAAM,EAAE,CAAC,yvDAAD;AAnIlF,KAAD;AAFiH,GAAD,CAAlI,QAsI4B;AAAEmjB,IAAAA,MAAM,EAAE,CAAC;AACvB7kB,MAAAA,IAAI,EAAE9H;AADiB,KAAD,CAAV;AAEZuyB,IAAAA,WAAW,EAAE,CAAC;AACdzqB,MAAAA,IAAI,EAAE9H;AADQ,KAAD,CAFD;AAIZsuB,IAAAA,cAAc,EAAE,CAAC;AACjBxmB,MAAAA,IAAI,EAAE9H;AADW,KAAD,CAJJ;AAMZwyB,IAAAA,KAAK,EAAE,CAAC;AACR1qB,MAAAA,IAAI,EAAE9H;AADE,KAAD,CAN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","sourcesContent":["import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport cloneDeep from 'clone-deep';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[\"Top\"] = \"top\";\n    PlacementTypes[\"Bottom\"] = \"bottom\";\n    PlacementTypes[\"Left\"] = \"left\";\n    PlacementTypes[\"Right\"] = \"right\";\n    PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Top) {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Left) {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Top) {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Bottom) {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += popoverPosition + popoverDimensions.height - window.innerHeight;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Left) {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Right) {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += popoverPosition + popoverDimensions.width - window.innerWidth;\n        }\n        return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n        let flip = false;\n        if (placement === PlacementTypes.Right) {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Left) {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Top) {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Bottom) {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n    static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n    static determinePlacement(placement, elmDim, hostDim, spacing) {\n        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.Right) {\n                return PlacementTypes.Left;\n            }\n            else if (placement === PlacementTypes.Left) {\n                return PlacementTypes.Right;\n            }\n            else if (placement === PlacementTypes.Top) {\n                return PlacementTypes.Bottom;\n            }\n            else if (placement === PlacementTypes.Bottom) {\n                return PlacementTypes.Top;\n            }\n        }\n        return placement;\n    }\n}\n\nclass TooltipContentComponent {\n    constructor(element, renderer, platformId) {\n        this.element = element;\n        this.renderer = renderer;\n        this.platformId = platformId;\n    }\n    get cssClasses() {\n        let clz = 'ngx-charts-tooltip-content';\n        clz += ` position-${this.placement}`;\n        clz += ` type-${this.type}`;\n        clz += ` ${this.cssClass}`;\n        return clz;\n    }\n    ngAfterViewInit() {\n        setTimeout(this.position.bind(this));\n    }\n    position() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const nativeElm = this.element.nativeElement;\n        const hostDim = this.host.nativeElement.getBoundingClientRect();\n        // if no dims were found, never show\n        if (!hostDim.height && !hostDim.width)\n            return;\n        const elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        // animate its entry\n        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n    positionContent(nativeElm, hostDim, elmDim) {\n        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n        this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n        this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n    positionCaret(hostDim, elmDim) {\n        const caretElm = this.caretElm.nativeElement;\n        const caretDimensions = caretElm.getBoundingClientRect();\n        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n        this.renderer.setStyle(caretElm, 'top', `${top}px`);\n        this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n    checkFlip(hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n    onWindowResize() {\n        this.position();\n    }\n}\nTooltipContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipContentComponent, selector: \"ngx-tooltip-content\", inputs: { host: \"host\", showCaret: \"showCaret\", type: \"type\", placement: \"placement\", alignment: \"alignment\", spacing: \"spacing\", cssClass: \"cssClass\", title: \"title\", template: \"template\", context: \"context\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class\": \"this.cssClasses\" } }, viewQueries: [{ propertyName: \"caretElm\", first: true, predicate: [\"caretElm\"], descendants: true }], ngImport: i0, template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(100)\n], TooltipContentComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-tooltip-content', template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { host: [{\n                type: Input\n            }], showCaret: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }], spacing: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], caretElm: [{\n                type: ViewChild,\n                args: ['caretElm']\n            }], cssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass InjectionRegisteryService {\n    constructor(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    getByType(type = this.type) {\n        return this.components.get(type);\n    }\n    create(bindings) {\n        return this.createByType(this.type, bindings);\n    }\n    createByType(type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        const component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    }\n    destroy(instance) {\n        const compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            const idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                const component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    }\n    destroyAll() {\n        this.destroyByType(this.type);\n    }\n    destroyByType(type) {\n        const comps = this.components.get(type);\n        if (comps && comps.length) {\n            let i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    }\n    injectComponent(type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    }\n    assignDefaults(bindings) {\n        const inputs = Object.assign({}, this.defaults.inputs);\n        const outputs = Object.assign({}, this.defaults.outputs);\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);\n        }\n        if (outputs) {\n            bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);\n        }\n        return bindings;\n    }\n    register(type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        const types = this.components.get(type);\n        types.push(component);\n    }\n}\n\nfunction isViewContainerRef(x) {\n    return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container) {\n        InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer() {\n        if (this._container)\n            return this._container;\n        if (InjectionService.globalRootViewContainer)\n            return InjectionService.globalRootViewContainer;\n        if (this.applicationRef.components.length)\n            return this.applicationRef.components[0];\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container) {\n        this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component) {\n        if (isViewContainerRef(component)) {\n            return component.element.nativeElement;\n        }\n        if (component.hostView && component.hostView.rootNodes.length > 0) {\n            return component.hostView.rootNodes[0];\n        }\n        // the top most component root node has no `hostView`\n        return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component) {\n        return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (const bindingName of bindingKeys) {\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (const eventName of eventKeys) {\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent(componentClass, bindings = {}, location) {\n        if (!location)\n            location = this.getRootViewContainer();\n        const appendLocation = this.getComponentRootNode(location);\n        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n        const portal = new ComponentPortal(componentClass);\n        const componentRef = portalHost.attach(portal);\n        this.projectComponentBindings(componentRef, bindings);\n        return componentRef;\n    }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nInjectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }]; } });\n\nclass TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n        super(injectionService);\n        this.type = TooltipContentComponent;\n    }\n}\nTooltipService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, deps: [{ token: InjectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: InjectionService }]; } });\n\nvar LegendPosition;\n(function (LegendPosition) {\n    LegendPosition[\"Right\"] = \"right\";\n    LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n    LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n    LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"Time\"] = \"time\";\n    ScaleType[\"Linear\"] = \"linear\";\n    ScaleType[\"Ordinal\"] = \"ordinal\";\n    ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n    constructor() {\n        this.horizontal = false;\n    }\n    ngOnChanges(changes) {\n        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        const direction = this.horizontal ? 'right' : 'bottom';\n        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors, splits) {\n        // add the 100%\n        splits.push(1);\n        const pairs = [];\n        colors.reverse().forEach((c, i) => {\n            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n        });\n        return pairs.join(', ');\n    }\n}\nScaleLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nScaleLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: { valueRange: \"valueRange\", colors: \"colors\", height: \"height\", width: \"width\", horizontal: \"horizontal\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-scale-legend', template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"] }]\n        }], propDecorators: { valueRange: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }] } });\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n        return {\n            '&': '&amp;',\n            // tslint:disable-next-line: quotemark\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        }[match];\n    });\n}\n\nclass LegendEntryComponent {\n    constructor() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    get trimmedLabel() {\n        return this.formattedLabel || '(empty)';\n    }\n    onMouseEnter() {\n        this.activate.emit({ name: this.label });\n    }\n    onMouseLeave() {\n        this.deactivate.emit({ name: this.label });\n    }\n}\nLegendEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLegendEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: { color: \"color\", label: \"label\", formattedLabel: \"formattedLabel\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", toggle: \"toggle\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, ngImport: i0, template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-charts-legend-entry',\n                    template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], formattedLabel: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LegendComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    }\n    getLegendEntries() {\n        const items = [];\n        for (const label of this.data) {\n            const formattedLabel = formatLabel(label);\n            const idx = items.findIndex(i => {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label,\n                    formattedLabel,\n                    color: this.colors.getColor(label)\n                });\n            }\n        }\n        return items;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    }\n    activate(item) {\n        this.labelActivate.emit(item);\n    }\n    deactivate(item) {\n        this.labelDeactivate.emit(item);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendComponent, selector: \"ngx-charts-legend\", inputs: { data: \"data\", title: \"title\", colors: \"colors\", height: \"height\", width: \"width\", activeEntries: \"activeEntries\", horizontal: \"horizontal\" }, outputs: { labelClick: \"labelClick\", labelActivate: \"labelActivate\", labelDeactivate: \"labelDeactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"], components: [{ type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: [\"color\", \"label\", \"formattedLabel\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"toggle\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-legend', template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], labelClick: [{\n                type: Output\n            }], labelActivate: [{\n                type: Output\n            }], labelDeactivate: [{\n                type: Output\n            }] } });\n\nclass ChartComponent {\n    constructor() {\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.LegendPosition = LegendPosition;\n        this.LegendType = LegendType;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        let legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n                if (this.legendType === LegendType.ScaleLegend) {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        const chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n        this.legendWidth =\n            !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n                ? Math.floor((this.view[0] * legendColumns) / 12.0)\n                : this.chartWidth;\n    }\n    getLegendType() {\n        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n    }\n}\nChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ChartComponent, selector: \"ngx-charts-chart\", inputs: { view: \"view\", showLegend: \"showLegend\", legendOptions: \"legendOptions\", legendType: \"legendType\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { legendLabelClick: \"legendLabelClick\", legendLabelActivate: \"legendLabelActivate\", legendLabelDeactivate: \"legendLabelDeactivate\" }, providers: [TooltipService], usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `, isInline: true, components: [{ type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: [\"valueRange\", \"colors\", \"height\", \"width\", \"horizontal\"] }, { type: LegendComponent, selector: \"ngx-charts-legend\", inputs: [\"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"horizontal\"], outputs: [\"labelClick\", \"labelActivate\", \"labelDeactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    providers: [TooltipService],\n                    selector: 'ngx-charts-chart',\n                    template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { view: [{\n                type: Input\n            }], showLegend: [{\n                type: Input\n            }], legendOptions: [{\n                type: Input\n            }], legendType: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], legendLabelClick: [{\n                type: Output\n            }], legendLabelActivate: [{\n                type: Output\n            }], legendLabelDeactivate: [{\n                type: Output\n            }] } });\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n    constructor(chartElement, zone, cd, platformId) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.platformId = platformId;\n        this.scheme = 'cool';\n        this.schemeType = ScaleType.Ordinal;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.animations = false;\n        }\n    }\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.chartElement.nativeElement;\n        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates() {\n        for (let i = 0; i < this.results.length; i++) {\n            const g = this.results[i];\n            g.label = g.name;\n            if (isDate(g.label)) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (let j = 0; j < g.series.length; j++) {\n                    const d = g.series[j];\n                    d.label = d.name;\n                    if (isDate(d.label)) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    cloneData(data) {\n        const results = [];\n        for (const item of data) {\n            const copy = {\n                name: item['name']\n            };\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (const seriesItem of item['series']) {\n                    const seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            results.push(copy);\n        }\n        return results;\n    }\n}\nBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BaseChartComponent, selector: \"base-chart\", inputs: { results: \"results\", view: \"view\", scheme: \"scheme\", schemeType: \"schemeType\", customColors: \"customColors\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: ` <div></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'base-chart',\n                    template: ` <div></div> `\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { results: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"Top\"] = \"top\";\n    Orientation[\"Bottom\"] = \"bottom\";\n    Orientation[\"Left\"] = \"left\";\n    Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n    constructor(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case Orientation.Top:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Bottom:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Left:\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case Orientation.Right:\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    }\n}\nAxisLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAxisLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: { orient: \"orient\", label: \"label\", offset: \"offset\", width: \"width\", height: \"height\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-axis-label]',\n                    template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { orient: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }] } });\n\nfunction trimLabel(s, max = 16) {\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max) {\n        return s;\n    }\n    else {\n        return `${s.slice(0, max)}...`;\n    }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        const reduced = [];\n        const modulus = Math.floor(ticks.length / maxTicks);\n        for (let i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\n\nvar TextAnchor;\n(function (TextAnchor) {\n    TextAnchor[\"Start\"] = \"start\";\n    TextAnchor[\"Middle\"] = \"middle\";\n    TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = TextAnchor.Middle;\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.approxHeight = 10;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.dimensionsChanged.emit({ height: this.approxHeight });\n            return;\n        }\n        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: this.height });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = `rotate(${angle})`;\n            this.textAnchor = TextAnchor.End;\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = TextAnchor.Middle;\n        }\n        setTimeout(() => this.updateDims());\n    }\n    getRotationAngle(ticks) {\n        let angle = 0;\n        this.maxTicksLength = 0;\n        for (let i = 0; i < ticks.length; i++) {\n            const tick = this.tickFormat(ticks[i]).toString();\n            let tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        const charWidth = 7; // need to measure this\n        const wordWidth = len * charWidth;\n        let baseWidth = wordWidth;\n        const maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n        return angle;\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    }\n    tickTransform(tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n    gridLineTransform() {\n        return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n}\nXAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nXAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineHeight: \"gridLineHeight\", width: \"width\", rotateTicks: \"rotateTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineHeight: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass XAxisComponent {\n    constructor() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = Orientation.Bottom;\n        this.xAxisOffset = 0;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n        this.orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    }\n    emitTicksHeight({ height }) {\n        const newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ height });\n            }, 0);\n        }\n    }\n}\nXAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nXAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: { xScale: \"xScale\", dims: \"dims\", trimTicks: \"trimTicks\", rotateTicks: \"rotateTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", ticks: \"ticks\", xAxisTickCount: \"xAxisTickCount\", xOrient: \"xOrient\", xAxisOffset: \"xAxisOffset\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: XAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineHeight\", \"width\", \"rotateTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis]',\n                    template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { xScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], xAxisTickCount: [{\n                type: Input\n            }], xOrient: [{\n                type: Input\n            }], xAxisOffset: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [XAxisTicksComponent]\n            }] } });\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n    let retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = `M${[x + r, y]}`;\n    retval += `h${w - 2 * r}`;\n    if (tr) {\n        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n    }\n    else {\n        retval += `h${r}v${r}`;\n    }\n    retval += `v${h - 2 * r}`;\n    if (br) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n    }\n    else {\n        retval += `v${r}h${-r}`;\n    }\n    retval += `h${2 * r - w}`;\n    if (bl) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n    }\n    else {\n        retval += `h${-r}v${-r}`;\n    }\n    retval += `v${2 * r - h}`;\n    if (tl) {\n        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n    }\n    else {\n        retval += `v${-r}h${r}`;\n    }\n    retval += `z`;\n    return retval;\n}\n\nclass YAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = TextAnchor.Middle;\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n        this.Orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.width = this.getApproximateAxisWidth();\n            this.dimensionsChanged.emit({ width: this.width });\n            return;\n        }\n        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        let scale;\n        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? function (d) {\n                return scale(d) + scale.bandwidth() * 0.5;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case Orientation.Top:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Bottom:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Left:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.End;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case Orientation.Right:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.Start;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(() => this.updateDims());\n    }\n    setReferencelines() {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    }\n    tickTransform(tick) {\n        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n    gridLineTransform() {\n        return `translate(5,0)`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getApproximateAxisWidth() {\n        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n        const charWidth = 7;\n        return maxChars * charWidth;\n    }\n}\nYAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineWidth: \"gridLineWidth\", height: \"height\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", showRefLines: \"showRefLines\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass YAxisComponent {\n    constructor() {\n        this.showGridLines = false;\n        this.yOrient = Orientation.Left;\n        this.yAxisOffset = 0;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === Orientation.Right) {\n            this.labelOffset = 65;\n            this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n        }\n        else {\n            this.offset = this.offset;\n            this.transform = `translate(${this.offset} , 0)`;\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    }\n    emitTicksWidth({ width }) {\n        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n    }\n}\nYAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nYAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: { yScale: \"yScale\", dims: \"dims\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", ticks: \"ticks\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", yAxisTickCount: \"yAxisTickCount\", yOrient: \"yOrient\", referenceLines: \"referenceLines\", showRefLines: \"showRefLines\", showRefLabels: \"showRefLabels\", yAxisOffset: \"yAxisOffset\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: YAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineWidth\", \"height\", \"referenceLines\", \"showRefLabels\", \"showRefLines\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis]',\n                    template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { yScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], yAxisTickCount: [{\n                type: Input\n            }], yOrient: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], yAxisOffset: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [YAxisTicksComponent]\n            }] } });\n\nclass AxesModule {\n}\nAxesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAxesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent], imports: [CommonModule], exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent] });\nAxesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n                    exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n                }]\n        }] });\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[\"popover\"] = \"popover\";\n    StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.Top;\n        this.tooltipAlignment = PlacementTypes.Center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    get listensForFocus() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n    get listensForHover() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n    ngOnDestroy() {\n        this.hideTooltip(true);\n    }\n    onFocus() {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    }\n    onBlur() {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    }\n    onMouseEnter() {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    }\n    onMouseLeave(target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                const contentDom = this.component.instance.element.nativeElement;\n                const contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    }\n    onMouseClick() {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    }\n    showTooltip(immediate) {\n        if (this.component || this.tooltipDisabled)\n            return;\n        const time = immediate\n            ? 0\n            : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.tooltipService.destroyAll();\n            const options = this.createBoundOptions();\n            this.component = this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(() => {\n                if (this.component) {\n                    this.addHideListeners(this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            this.show.emit(true);\n        }, time);\n    }\n    addHideListeners(tooltip) {\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n            clearTimeout(this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n                this.hideTooltip(this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n                const contains = tooltip.contains(event.target);\n                if (!contains)\n                    this.hideTooltip();\n            });\n        }\n    }\n    hideTooltip(immediate = false) {\n        if (!this.component)\n            return;\n        const destroyFn = () => {\n            // remove events\n            if (this.mouseLeaveContentEvent)\n                this.mouseLeaveContentEvent();\n            if (this.mouseEnterContentEvent)\n                this.mouseEnterContentEvent();\n            if (this.documentClickEvent)\n                this.documentClickEvent();\n            // emit events\n            this.hide.emit(true);\n            // destroy component\n            this.tooltipService.destroy(this.component);\n            this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    }\n    createBoundOptions() {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: { tooltipCssClass: \"tooltipCssClass\", tooltipTitle: \"tooltipTitle\", tooltipAppendToBody: \"tooltipAppendToBody\", tooltipSpacing: \"tooltipSpacing\", tooltipDisabled: \"tooltipDisabled\", tooltipShowCaret: \"tooltipShowCaret\", tooltipPlacement: \"tooltipPlacement\", tooltipAlignment: \"tooltipAlignment\", tooltipType: \"tooltipType\", tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\", tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\", tooltipHideTimeout: \"tooltipHideTimeout\", tooltipShowTimeout: \"tooltipShowTimeout\", tooltipTemplate: \"tooltipTemplate\", tooltipShowEvent: \"tooltipShowEvent\", tooltipContext: \"tooltipContext\", tooltipImmediateExit: \"tooltipImmediateExit\" }, outputs: { show: \"show\", hide: \"hide\" }, host: { listeners: { \"focusin\": \"onFocus()\", \"blur\": \"onBlur()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave($event.target)\", \"click\": \"onMouseClick()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-tooltip]' }]\n        }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{\n                type: Input\n            }], tooltipTitle: [{\n                type: Input\n            }], tooltipAppendToBody: [{\n                type: Input\n            }], tooltipSpacing: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipShowCaret: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipAlignment: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], tooltipCloseOnClickOutside: [{\n                type: Input\n            }], tooltipCloseOnMouseLeave: [{\n                type: Input\n            }], tooltipHideTimeout: [{\n                type: Input\n            }], tooltipShowTimeout: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipShowEvent: [{\n                type: Input\n            }], tooltipContext: [{\n                type: Input\n            }], tooltipImmediateExit: [{\n                type: Input\n            }], show: [{\n                type: Output\n            }], hide: [{\n                type: Output\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focusin']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }], onMouseClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [CommonModule], exports: [TooltipContentComponent, TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TooltipContentComponent, TooltipDirective],\n                    providers: [InjectionService, TooltipService],\n                    exports: [TooltipContentComponent, TooltipDirective],\n                    imports: [CommonModule],\n                    entryComponents: [TooltipContentComponent]\n                }]\n        }] });\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar BarOrientation;\n(function (BarOrientation) {\n    BarOrientation[\"Vertical\"] = \"vertical\";\n    BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n    constructor() {\n        this.orientation = BarOrientation.Vertical;\n    }\n    ngOnChanges(changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === BarOrientation.Horizontal) {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === BarOrientation.Vertical) {\n            this.y1 = '100%';\n        }\n    }\n}\nSvgLinearGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgLinearGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: { orientation: \"orientation\", name: \"name\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-linear-gradient]',\n                    template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { orientation: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass CircleComponent {\n    constructor() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    ngOnChanges(changes) {\n        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n        this.classNames += 'circle';\n    }\n}\nCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: { cx: \"cx\", cy: \"cy\", r: \"r\", fill: \"fill\", stroke: \"stroke\", data: \"data\", classNames: \"classNames\", circleOpacity: \"circleOpacity\", pointerEvents: \"pointerEvents\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"click\": \"onClick()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle]',\n                    template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], r: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], classNames: [{\n                type: Input\n            }], circleOpacity: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar SeriesType;\n(function (SeriesType) {\n    SeriesType[\"Standard\"] = \"standard\";\n    SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n    constructor() {\n        this.type = SeriesType.Standard;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n    }\n    ngOnChanges() {\n        this.update();\n    }\n    update() {\n        this.circle = this.getActiveCircle();\n    }\n    getActiveCircle() {\n        const indexActiveDataPoint = this.data.series.findIndex(d => {\n            const label = d.name;\n            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n    mapDataPointToCircle(d, i) {\n        const seriesName = this.data.name;\n        const value = d.value;\n        const label = d.name;\n        const tooltipLabel = formatLabel(label);\n        let cx;\n        if (this.scaleType === ScaleType.Time) {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n        const radius = 5;\n        const height = this.yScale.range()[0] - cy;\n        const opacity = 1;\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            if (this.type === SeriesType.Standard) {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        const data = Object.assign({}, d, {\n            series: seriesName,\n            value,\n            name: label\n        });\n        return {\n            classNames: [`circle-data-${i}`],\n            value,\n            label,\n            data,\n            cx,\n            cy,\n            radius,\n            height,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    }\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n    getTooltipMinMaxText(min, max) {\n        if (min !== undefined || max !== undefined) {\n            let result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    }\n    getGradientStops(color) {\n        return [\n            {\n                offset: 0,\n                color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color,\n                opacity: 1\n            }\n        ];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    activateCircle() {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle() {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    }\n}\nCircleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: { data: \"data\", type: \"type\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 1 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle-series]',\n                    template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 1 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GridPanelComponent {\n}\nGridPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: { width: \"width\", height: \"height\", x: \"x\", y: \"y\" }, ngImport: i0, template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel]',\n                    template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }] } });\n\nvar ClassEnum;\n(function (ClassEnum) {\n    ClassEnum[\"Odd\"] = \"odd\";\n    ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.gridPanels = this.getGridPanels();\n    }\n    getGridPanels() {\n        return this.data.map(d => {\n            let offset;\n            let width;\n            let height;\n            let x;\n            let y;\n            let className = ClassEnum.Odd;\n            if (this.orient === BarOrientation.Vertical) {\n                const position = this.xScale(d.name);\n                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n                width = this.xScale.bandwidth() + offset;\n                height = this.dims.height;\n                x = this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (this.orient === BarOrientation.Horizontal) {\n                const position = this.yScale(d.name);\n                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n                width = this.dims.width;\n                height = this.yScale.bandwidth() + offset;\n                x = 0;\n                y = this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height,\n                width,\n                x,\n                y\n            };\n        });\n    }\n}\nGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: { data: \"data\", dims: \"dims\", xScale: \"xScale\", yScale: \"yScale\", orient: \"orient\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: [\"width\", \"height\", \"x\", \"y\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel-series]',\n                    template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }] } });\n\nclass SvgRadialGradientComponent {\n    constructor() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    get stops() {\n        return this.stopsInput || this.stopsDefault;\n    }\n    set stops(value) {\n        this.stopsInput = value;\n    }\n    ngOnChanges(changes) {\n        this.r = '30%';\n        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n            this.stopsDefault = [\n                {\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                },\n                {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }\n            ];\n        }\n    }\n}\nSvgRadialGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgRadialGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: { color: \"color\", name: \"name\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", cx: \"cx\", cy: \"cy\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-radial-gradient]',\n                    template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass AreaComponent {\n    constructor(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.animationsLoaded = false;\n        this.hasGradient = false;\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        if (!this.animationsLoaded) {\n            this.loadAnimation();\n            this.animationsLoaded = true;\n        }\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    }\n    loadAnimation() {\n        this.areaPath = this.startingPath;\n        setTimeout(this.updatePathEl.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    }\n}\nAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: { data: \"data\", path: \"path\", startingPath: \"startingPath\", fill: \"fill\", opacity: \"opacity\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", gradient: \"gradient\", stops: \"stops\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area]',\n                    template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], startingPath: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    const startVal = Number(countFrom);\n    const endVal = Number(countTo);\n    const countDown = startVal > endVal;\n    const decimals = Math.max(0, countDecimals);\n    const dec = Math.pow(10, decimals);\n    const duration = Number(countDuration) * 1000;\n    let startTime;\n    function runCount(timestamp) {\n        let frameVal;\n        const progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        const tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress,\n            timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(val => runCount(val));\n        }\n    }\n    return requestAnimationFrame(timestamp => {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n    const endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n    constructor(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    set countDecimals(val) {\n        this._countDecimals = val;\n    }\n    get countDecimals() {\n        if (this._countDecimals)\n            return this._countDecimals;\n        return decimalChecker(this.countTo);\n    }\n    set countTo(val) {\n        this._countTo = parseFloat(val);\n        this.start();\n    }\n    get countTo() {\n        return this._countTo;\n    }\n    set countFrom(val) {\n        this._countFrom = parseFloat(val);\n        this.start();\n    }\n    get countFrom() {\n        return this._countFrom;\n    }\n    ngOnDestroy() {\n        cancelAnimationFrame(this.animationReq);\n    }\n    start() {\n        cancelAnimationFrame(this.animationReq);\n        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n        const callback = ({ value, progress, finished }) => {\n            this.value = valueFormatting(value);\n            this.cd.markForCheck();\n            if (!finished)\n                this.countChange.emit({ value: this.value, progress });\n            if (finished)\n                this.countFinish.emit({ value: this.value, progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n}\nCountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCountUpDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: { countDuration: \"countDuration\", countPrefix: \"countPrefix\", countSuffix: \"countSuffix\", valueFormatting: \"valueFormatting\", countDecimals: \"countDecimals\", countTo: \"countTo\", countFrom: \"countFrom\" }, outputs: { countChange: \"countChange\", countFinish: \"countFinish\" }, ngImport: i0, template: ` {{ value }} `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ngx-charts-count-up]',\n                    template: ` {{ value }} `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { countDuration: [{\n                type: Input\n            }], countPrefix: [{\n                type: Input\n            }], countSuffix: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], countDecimals: [{\n                type: Input\n            }], countTo: [{\n                type: Input\n            }], countFrom: [{\n                type: Input\n            }], countChange: [{\n                type: Output\n            }], countFinish: [{\n                type: Output\n            }] } });\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof MouseEvent === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles, cancelable });\n    }\n    else {\n        // IE\n        const event = document.createEvent('MouseEvent');\n        event.initEvent(name, bubbles, cancelable);\n        return event;\n    }\n}\n\nclass TooltipArea {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    getValues(xVal) {\n        const results = [];\n        for (const group of this.results) {\n            const item = group.series.find(d => d.name.toString() === xVal.toString());\n            let groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                const label = item.name;\n                let val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                let color;\n                if (this.colors.scaleType === ScaleType.Linear) {\n                    let v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                const data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    }\n    mouseMove(event) {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const xPos = event.pageX - event.target.getBoundingClientRect().left;\n        const closestIndex = this.findClosestPointIndex(xPos);\n        const closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            const ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    }\n    findClosestPointIndex(xPos) {\n        let minIndex = 0;\n        let maxIndex = this.xSet.length - 1;\n        let minDiff = Number.MAX_VALUE;\n        let closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            const currentElement = this.xScale(this.xSet[currentIndex]);\n            const curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    }\n    showTooltip() {\n        const event = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n    hideTooltip() {\n        const event = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    }\n    getToolTipText(tooltipItem) {\n        let result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    }\n}\nTooltipArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: { dims: \"dims\", xSet: \"xSet\", xScale: \"xScale\", yScale: \"yScale\", results: \"results\", colors: \"colors\", showPercentage: \"showPercentage\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { hover: \"hover\" }, viewQueries: [{ propertyName: \"tooltipAnchor\", first: true, predicate: [\"tooltipAnchor\"], descendants: true }], ngImport: i0, template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition('inactive => active', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 0.7 }))\n            ]),\n            transition('active => inactive', [\n                style({\n                    opacity: 0.7\n                }),\n                animate(250, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tooltip-area]',\n                    template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition('inactive => active', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 0.7 }))\n                            ]),\n                            transition('active => inactive', [\n                                style({\n                                    opacity: 0.7\n                                }),\n                                animate(250, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { dims: [{\n                type: Input\n            }], xSet: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], showPercentage: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], hover: [{\n                type: Output\n            }], tooltipAnchor: [{\n                type: ViewChild,\n                args: ['tooltipAnchor', { static: false }]\n            }] } });\n\nclass Timeline {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    }\n    update() {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        const offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = `translate(0 , ${offsetY})`;\n        this.filterId = 'filter' + id().toString();\n        this.filter = `url(#${this.filterId})`;\n        this.cd.markForCheck();\n    }\n    getXDomain() {\n        let values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    }\n    getXScale() {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n        }\n        return scale;\n    }\n    addBrush() {\n        if (this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush = brushX()\n            .extent([\n            [0, 0],\n            [width, height]\n        ])\n            .on('brush end', ({ selection }) => {\n            const newSelection = selection || this.xScale.range();\n            const newDomain = newSelection.map(this.xScale.invert);\n            this.onDomainChange.emit(newDomain);\n            this.cd.markForCheck();\n        });\n        select(this.element).select('.brush').call(this.brush);\n    }\n    updateBrush() {\n        if (!this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush.extent([\n            [0, 0],\n            [width, height]\n        ]);\n        select(this.element).select('.brush').call(this.brush);\n        // clear hardcoded properties so they can be defined by CSS\n        select(this.element)\n            .select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    }\n    getDims() {\n        const width = this.view[0];\n        const dims = {\n            width,\n            height: this.height\n        };\n        return dims;\n    }\n}\nTimeline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTimeline.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: { view: \"view\", results: \"results\", scheme: \"scheme\", customColors: \"customColors\", legend: \"legend\", autoScale: \"autoScale\", scaleType: \"scaleType\", height: \"height\" }, outputs: { select: \"select\", onDomainChange: \"onDomainChange\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, isInline: true, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-timeline]', template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { view: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], onDomainChange: [{\n                type: Output\n            }] } });\n\nclass AdvancedLegendComponent {\n    constructor() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = label => label;\n        this.percentageFormatting = percentage => percentage;\n        this.defaultValueFormatting = value => value.toLocaleString();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getTotal() {\n        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n    }\n    update() {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    }\n    getLegendItems() {\n        return this.data.map(d => {\n            const label = formatLabel(d.name);\n            const value = d.value;\n            const color = this.colors.getColor(label);\n            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value,\n                color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nAdvancedLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAdvancedLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: { width: \"width\", data: \"data\", colors: \"colors\", label: \"label\", animations: \"animations\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"], components: [{ type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-legend', template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"] }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nconst COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nclass ChartCommonModule {\n}\nChartCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, declarations: [AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver], imports: [CommonModule, AxesModule, TooltipModule], exports: [CommonModule, AxesModule, TooltipModule, AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver] });\nChartCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AxesModule, TooltipModule],\n                    declarations: [...COMPONENTS, VisibilityObserver],\n                    exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n                }]\n        }] });\n\nfunction calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {\n    let xOffset = margins[3];\n    let chartWidth = width;\n    let chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === LegendPosition.Right) {\n        if (legendType === ScaleType.Ordinal) {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = (chartWidth * columns) / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\nlet colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    generateColorScheme(scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        let colorScale;\n        switch (type) {\n            case ScaleType.Quantile:\n                colorScale = scaleQuantile()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Ordinal:\n                colorScale = scaleOrdinal()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Linear:\n                {\n                    const colorDomain = [...scheme.domain];\n                    if (colorDomain.length === 1) {\n                        colorDomain.push(colorDomain[0]);\n                        this.colorDomain = colorDomain;\n                    }\n                    const points = range(0, 1, 1.0 / colorDomain.length);\n                    colorScale = scaleLinear()\n                        .range(colorDomain)\n                        .domain(points);\n                }\n                break;\n            default:\n                break;\n        }\n        return colorScale;\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === ScaleType.Linear) {\n            const valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            const formattedValue = value.toString();\n            let found; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(mapping => {\n                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    }\n    getLinearGradientStops(value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        const valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n        const endColor = this.getColor(value);\n        // generate the stops\n        const startVal = valueScale(start);\n        const startColor = this.getColor(start);\n        const endVal = valueScale(value);\n        let i = 1;\n        let currentVal = startVal;\n        const stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            const color = this.colorDomain[i];\n            const offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color,\n                offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (const s of stops) {\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n        for (const d of result.series) {\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n    if (checkDateType) {\n        const allDates = values.every(value => value instanceof Date);\n        if (allDates) {\n            return ScaleType.Time;\n        }\n    }\n    const allNumbers = values.every(value => typeof value === 'number');\n    if (allNumbers) {\n        return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n    const scaleType = getScaleType(values);\n    let xSet = [];\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const mappedValues = values.map(v => Number(v));\n        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n    }\n    if (scaleType === ScaleType.Time) {\n        domain = [new Date(min), new Date(max)];\n        xSet = [...values].sort((a, b) => {\n            const aDate = a.getTime();\n            const bDate = b.getTime();\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        });\n    }\n    else if (scaleType === ScaleType.Linear) {\n        domain = [min, max];\n        // Use compare function to sort numbers numerically\n        xSet = [...values].sort((a, b) => a - b);\n    }\n    else {\n        domain = values;\n        xSet = values;\n    }\n    return { domain, xSet, scaleType };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n    return data.sort((a, b) => {\n        const aVal = a[property];\n        const bVal = b[property];\n        const aIdx = domain.indexOf(aVal);\n        const bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        const aDate = a[property].getTime();\n        const bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\nclass AreaSeriesComponent {\n    constructor() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradient();\n        let currentArea;\n        let startingArea;\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0((d, i) => this.yScale(d.d0))\n                .y1((d, i) => this.yScale(d.d1));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => this.yScale.range()[0])\n                .y1(d => this.yScale.range()[0]);\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => this.yScale(d.value));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = 0.8;\n        let data = this.data.series;\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    }\n    updateGradient() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                const d0values = this.data.series.map(d => d.d0);\n                const d1values = this.data.series.map(d => d.d1);\n                const max = Math.max(...d1values);\n                const min = Math.min(...d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            }\n            else {\n                const values = this.data.series.map(d => d.value);\n                const max = Math.max(...values);\n                this.gradientStops = this.colors.getLinearGradientStops(max);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", baseValue: \"baseValue\", colors: \"colors\", scaleType: \"scaleType\", stacked: \"stacked\", normalized: \"normalized\", gradient: \"gradient\", curve: \"curve\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `, isInline: true, components: [{ type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area-series]',\n                    template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], normalized: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass AreaChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.baseValue = 'auto';\n        this.autoScale = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getScaleType(values) {\n        let date = true;\n        let num = true;\n        for (const value of values) {\n            if (isDate(value)) {\n                date = false;\n            }\n            if (isNumber(value)) {\n                num = false;\n            }\n        }\n        if (date) {\n            return ScaleType.Time;\n        }\n        if (num) {\n            return ScaleType.Linear;\n        }\n        return ScaleType.Ordinal;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartComponent, selector: \"ngx-charts-area-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", baseValue: \"baseValue\", autoScale: \"autoScale\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showXAxisLabel = false;\n        this.showYAxisLabel = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.yDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.seriesType = SeriesType;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            let total = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartNormalizedComponent, selector: \"ngx-charts-area-chart-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.seriesType = SeriesType;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let sum = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartStackedComponent, selector: \"ngx-charts-area-chart-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartModule {\n}\nAreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] });\nAreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n                    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n                }]\n        }] });\n\nclass BarComponent {\n    constructor(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.roundEdges) {\n            this.loadAnimation();\n        }\n        this.update();\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    }\n    loadAnimation() {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            node.transition().duration(500).attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === BarOrientation.Vertical) {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    }\n    getPath() {\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                if (this.data.value > 0) {\n                    edges = [true, true, false, false];\n                }\n                else {\n                    edges = [false, false, true, true];\n                }\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                if (this.data.value > 0) {\n                    edges = [false, true, false, true];\n                }\n                else {\n                    edges = [true, false, true, false];\n                }\n            }\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n                    (this.orientation === BarOrientation.Horizontal && this.width === 0));\n    }\n}\nBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: { fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", orientation: \"orientation\", roundEdges: \"roundEdges\", gradient: \"gradient\", offset: \"offset\", isActive: \"isActive\", stops: \"stops\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bar]',\n                    template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar BarChartType;\n(function (BarChartType) {\n    BarChartType[\"Standard\"] = \"standard\";\n    BarChartType[\"Normalized\"] = \"normalized\";\n    BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n    constructor(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getSize() {\n        const h = this.element.getBoundingClientRect().height;\n        const w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    }\n    ngAfterViewInit() {\n        this.dimensionsChanged.emit(this.getSize());\n    }\n    update() {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            // if the value is negative then it's on the left of the x0.\n            // we need to put the data label in front of the bar\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            // orientation must be \"vertical\"\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n        }\n    }\n}\nBarLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: { value: \"value\", valueFormatting: \"valueFormatting\", barX: \"barX\", barY: \"barY\", barWidth: \"barWidth\", barHeight: \"barHeight\", orientation: \"orientation\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, isInline: true, styles: [\".textDataLabel{font-size:11px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-bar-label]', template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".textDataLabel{font-size:11px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], barX: [{\n                type: Input\n            }], barY: [{\n                type: Input\n            }], barWidth: [{\n                type: Input\n            }], barHeight: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }] } });\n\nclass SeriesHorizontal {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type;\n        d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(d => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                formattedLabel\n            };\n            bar.height = this.yScale.bandwidth();\n            if (this.type === BarChartType.Standard) {\n                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = this.xScale(value);\n                }\n                else {\n                    bar.x = this.xScale(xScaleMin);\n                }\n                bar.y = this.yScale(label);\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                var _a;\n                const section = {};\n                section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n                section.total = d.value;\n                section.x = this.xScale(0);\n                section.y = this.yScale(d.label);\n                section.width = this.xScale(section.total) - this.xScale(0);\n                section.height = this.yScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n    click(data) {\n        this.select.emit(data);\n    }\n}\nSeriesHorizontal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesHorizontal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelWidthChanged: \"dataLabelWidthChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-horizontal]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelWidthChanged: [{\n                type: Output\n            }] } });\n\nclass BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n    getXDomain() {\n        const values = this.results.map(d => d.value);\n        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n        return [min, max];\n    }\n    getYDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalComponent, selector: \"ngx-charts-bar-horizontal\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", xScaleMin: \"xScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const height = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.groupScale(group.label)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontal2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontal2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontal2DComponent, selector: \"ngx-charts-bar-horizontal-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalNormalizedComponent, selector: \"ngx-charts-bar-horizontal-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalStackedComponent, selector: \"ngx-charts-bar-horizontal-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SeriesVerticalComponent {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        let width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        this.bars = this.series.map((d, index) => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                width,\n                formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (this.type === BarChartType.Standard) {\n                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n                bar.x = this.xScale(label);\n                if (value < 0) {\n                    bar.y = this.yScale(0);\n                }\n                else {\n                    bar.y = this.yScale(value);\n                }\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                var _a;\n                const section = {};\n                section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n                section.total = d.value;\n                section.x = this.xScale(d.label);\n                section.y = this.yScale(0);\n                section.height = this.yScale(section.total) - this.yScale(0);\n                section.width = this.xScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n}\nSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelHeightChanged: \"dataLabelHeightChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Vertical\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-vertical]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Vertical\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelHeightChanged: [{\n                type: Output\n            }] } });\n\nclass BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getXDomain() {\n        return this.results.map(d => d.label);\n    }\n    getYDomain() {\n        const values = this.results.map(d => d.value);\n        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min = Math.min(min, ...this.yAxisTicks);\n        }\n        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max = Math.max(max, ...this.yAxisTicks);\n        }\n        return [min, max];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxHeightChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalComponent, selector: \"ngx-charts-bar-vertical\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", yScaleMin: \"yScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.scaleType = ScaleType.Ordinal;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const width = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVertical2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVertical2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVertical2DComponent, selector: \"ngx-charts-bar-vertical-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", scaleType: \"scaleType\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalNormalizedComponent, selector: \"ngx-charts-bar-vertical-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalStackedComponent, selector: \"ngx-charts-bar-vertical-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarChartModule {\n}\nBarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, declarations: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent] });\nBarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ],\n                    exports: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ]\n                }]\n        }] });\n\nclass BoxComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.BarOrientation = BarOrientation;\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.nativeElm = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    }\n    update() {\n        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n        this.medianLineWidth = 1.5 * this.strokeWidth;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updateLineEl();\n        this.updatePathEl();\n        this.checkToHideBar();\n        this.maskLineId = 'mask' + id().toString();\n        this.maskLine = `url(#${this.maskLineId})`;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    loadAnimation() {\n        this.boxPath = this.oldPath = this.getStartingPath();\n        this.oldLineCoordinates = this.getStartingLineCoordinates();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const nodeBar = select(this.nativeElm).selectAll('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            nodeBar\n                .attr('d', this.oldPath)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attrTween('d', this.pathTween(path, 4));\n        }\n        else {\n            nodeBar.attr('d', path);\n        }\n        this.oldPath = path;\n    }\n    updateLineEl() {\n        const lineEl = select(this.nativeElm).selectAll('.bar-line');\n        const lineCoordinates = this.lineCoordinates;\n        const oldLineCoordinates = this.oldLineCoordinates;\n        if (this.animations) {\n            lineEl\n                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        else {\n            lineEl\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        this.oldLineCoordinates = [...lineCoordinates];\n    }\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr, d, index, node) {\n        const nodeLineEl = node[index];\n        return nodeLineEl[attr].baseVal.value;\n    }\n    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n    pathTween(d1, precision) {\n        return function () {\n            // tslint:disable-next-line: no-this-assignment\n            const path0 = this;\n            const path1 = this.cloneNode();\n            path1.setAttribute('d', d1);\n            const n0 = path0 === null || path0 === void 0 ? void 0 : path0.getTotalLength();\n            const n1 = path1 === null || path1 === void 0 ? void 0 : path1.getTotalLength();\n            // Uniform sampling of distance based on specified precision.\n            const distances = [0];\n            let i = 0;\n            const dt = precision / Math.max(n0, n1);\n            while (i < 1) {\n                distances.push(i);\n                i += dt;\n            }\n            distances.push(1);\n            // Compute point-interpolators at each distance.\n            const points = distances.map((t) => {\n                const p0 = path0.getPointAtLength(t * n0);\n                const p1 = path1.getPointAtLength(t * n1);\n                return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n            });\n            // 't': T is the fraction of time (between 0 and 1) since the transition began.\n            return (t) => {\n                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;\n            };\n        };\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        const radius = this.roundEdges ? 1 : 0;\n        const { x, y } = this.lineCoordinates[2].v1;\n        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n    }\n    getPath() {\n        const radius = this.getRadius();\n        let path = '';\n        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n        return path;\n    }\n    getStartingLineCoordinates() {\n        if (!this.animations) {\n            return [...this.lineCoordinates];\n        }\n        const lineCoordinates = cloneDeep(this.lineCoordinates);\n        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n            lineCoordinates[2].v1.y;\n        return lineCoordinates;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getGradient() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            edges = [true, true, true, true];\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar = this.noBarWhenZero && this.height === 0;\n    }\n}\nBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: { strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", lineCoordinates: \"lineCoordinates\", roundEdges: \"roundEdges\", gradient: \"gradient\", gradientStops: \"gradientStops\", offset: \"offset\", isActive: \"isActive\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box]',\n                    template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], lineCoordinates: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], gradientStops: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BoxSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    update() {\n        this.updateTooltipSettings();\n        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n        const seriesName = this.series.name;\n        // Calculate Quantile and Whiskers for each box serie.\n        this.counts = this.series.series;\n        const mappedCounts = this.counts.map(serie => Number(serie.value));\n        this.whiskers = [min(mappedCounts), max(mappedCounts)];\n        // We get the group count and must sort it in order to retrieve quantiles.\n        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n        this.quartiles = this.getBoxQuantiles(groupCounts);\n        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n        const value = this.quartiles[1];\n        const formattedLabel = formatLabel(seriesName);\n        const box = {\n            value,\n            data: this.counts,\n            label: seriesName,\n            formattedLabel,\n            width,\n            height: 0,\n            x: 0,\n            y: 0,\n            roundEdges: this.roundEdges,\n            quartiles: this.quartiles,\n            lineCoordinates: this.lineCoordinates\n        };\n        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n        box.x = this.xScale(seriesName.toString());\n        box.y = this.yScale(this.quartiles[2]);\n        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n        if (this.colors.scaleType === ScaleType.Ordinal) {\n            box.color = this.colors.getColor(seriesName);\n        }\n        else {\n            box.color = this.colors.getColor(this.quartiles[1]);\n            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n        }\n        const tooltipLabel = formattedLabel;\n        const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n        this.box = box;\n    }\n    getBoxQuantiles(inputData) {\n        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n    }\n    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n        // The X value is not being centered, so had to sum half the width to align it.\n        const commonX = this.xScale(seriesName);\n        const offsetX = commonX + barWidth / 2;\n        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n        const whiskerLineWidth = Math.max(barWidth / 3, 1);\n        const whiskerZero = this.yScale(whiskers[0]);\n        const whiskerOne = this.yScale(whiskers[1]);\n        const median = this.yScale(quartiles[1]);\n        const topLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n        };\n        const medianLine = {\n            v1: { x: offsetX + medianLineWidth / 2, y: median },\n            v2: { x: offsetX - medianLineWidth / 2, y: median }\n        };\n        const bottomLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n        };\n        const verticalLine = {\n            v1: { x: offsetX, y: whiskerZero },\n            v2: { x: offsetX, y: whiskerOne }\n        };\n        return [verticalLine, topLine, medianLine, bottomLine];\n    }\n    updateTooltipSettings() {\n        if (this.tooltipDisabled) {\n            this.tooltipPlacement = undefined;\n            this.tooltipType = undefined;\n        }\n        else {\n            if (!this.tooltipPlacement) {\n                this.tooltipPlacement = PlacementTypes.Top;\n            }\n            if (!this.tooltipType) {\n                this.tooltipType = StyleTypes.tooltip;\n            }\n        }\n    }\n}\nBoxSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBoxSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: { dims: \"dims\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", animations: \"animations\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", tooltipPlacement: \"tooltipPlacement\", tooltipType: \"tooltipType\", roundEdges: \"roundEdges\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: [\"strokeColor\", \"strokeWidth\", \"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"lineCoordinates\", \"roundEdges\", \"gradient\", \"gradientStops\", \"offset\", \"isActive\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box-series]',\n                    template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BoxChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        /** Show or hide the legend. */\n        this.legend = false;\n        this.legendPosition = LegendPosition.Right;\n        this.legendTitle = 'Legend';\n        this.showGridLines = true;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.showXAxisLabel = true;\n        this.showYAxisLabel = true;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.strokeColor = '#FFFFFF';\n        this.strokeWidth = 2;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        /** Chart Margins (For each side, counterclock wise). */\n        this.margin = [10, 20, 10, 20];\n        /** Chart X axis dimension. */\n        this.xAxisHeight = 0;\n        /** Chart Y axis dimension. */\n        this.yAxisWidth = 0;\n    }\n    trackBy(index, item) {\n        return item.name;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    setColors() {\n        let domain = [];\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    setScales() {\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    }\n    getXScale(domain, width) {\n        const scale = scaleBand()\n            .domain(domain.map(d => d.toString()))\n            .rangeRound([0, width])\n            .padding(0.5);\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().domain(domain).range([height, 0]);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getUniqueBoxChartXDomainValues(results) {\n        const valueSet = new Set();\n        for (const result of results) {\n            valueSet.add(result.name);\n        }\n        return Array.from(valueSet);\n    }\n    getXDomain() {\n        let domain = [];\n        const values = this.getUniqueBoxChartXDomainValues(this.results);\n        let min;\n        let max;\n        if (typeof values[0] === 'string') {\n            domain = values.map(val => val.toString());\n        }\n        else if (typeof values[0] === 'number') {\n            const mappedValues = values.map(v => Number(v));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [min, max];\n        }\n        else {\n            const mappedValues = values.map(v => Number(new Date(v)));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [new Date(min), new Date(max)];\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        const mappedValues = values.map(v => Number(v));\n        const min = Math.min(...mappedValues);\n        const max = Math.max(...mappedValues);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => `${d.name}`);\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    onActivate(data) {\n        this.activate.emit(data);\n    }\n    onDeactivate(data) {\n        this.deactivate.emit(data);\n    }\n    getLegendOptions() {\n        const legendOpts = {\n            scaleType: this.schemeType,\n            colors: this.colors,\n            domain: [],\n            position: this.legendPosition,\n            title: this.legendTitle\n        };\n        if (this.schemeType === ScaleType.Ordinal) {\n            legendOpts.domain = this.xDomain;\n            legendOpts.colors = this.colors;\n        }\n        else {\n            legendOpts.domain = this.yDomain;\n            legendOpts.colors = this.colors.scale;\n        }\n        return legendOpts;\n    }\n}\nBoxChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBoxChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxChartComponent, selector: \"ngx-charts-box-chart\", inputs: { legend: \"legend\", legendPosition: \"legendPosition\", legendTitle: \"legendTitle\", legendOptionsConfig: \"legendOptionsConfig\", showGridLines: \"showGridLines\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", roundDomains: \"roundDomains\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", roundEdges: \"roundEdges\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: [\"dims\", \"series\", \"xScale\", \"yScale\", \"colors\", \"animations\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipPlacement\", \"tooltipType\", \"roundEdges\", \"gradient\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-box-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendOptionsConfig: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate', { static: false }]\n            }] } });\n\nclass BoxChartModule {\n}\nBoxChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBoxChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] });\nBoxChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n                    exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n                }]\n        }] });\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const min = minVal ? minVal : Math.min(...values);\n        const max = maxVal ? maxVal : Math.max(...values);\n        domain = [min, max];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n    switch (scaleType) {\n        case ScaleType.Time:\n            return scaleTime().range(range).domain(domain);\n        case ScaleType.Linear: {\n            const scale = scaleLinear().range(range).domain(domain);\n            if (roundDomains) {\n                return scale.nice();\n            }\n            return scale;\n        }\n        case ScaleType.Ordinal:\n            return scalePoint()\n                .range([range[0], range[1]])\n                .domain(domain.map(r => r.toString()));\n        default:\n            return undefined;\n    }\n}\n\nclass BubbleSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.circles = this.getCircles();\n    }\n    getCircles() {\n        const seriesName = this.data.name;\n        return this.data.series\n            .map((d, i) => {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                const y = d.y;\n                const x = d.x;\n                const r = d.r;\n                const radius = this.rScale(r || 1);\n                const tooltipLabel = formatLabel(d.name);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n                const opacity = isActive ? 1 : 0.3;\n                const data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data,\n                    x,\n                    y,\n                    r,\n                    classNames: [`circle-data-${i}`],\n                    value: y,\n                    label: x,\n                    cx,\n                    cy,\n                    radius,\n                    tooltipLabel,\n                    color,\n                    opacity,\n                    seriesName,\n                    isActive,\n                    transform: `translate(${cx},${cy})`\n                };\n            }\n        })\n            .filter(circle => circle !== undefined);\n    }\n    getTooltipText(circle) {\n        const hasRadius = typeof circle.r !== 'undefined';\n        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        const hasSeriesName = circle.seriesName && circle.seriesName.length;\n        const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n        const x = formatLabel(circle.x);\n        const y = formatLabel(circle.y);\n        const name = hasSeriesName && hasTooltipLabel\n            ? `${circle.seriesName} • ${circle.tooltipLabel}`\n            : circle.seriesName + circle.tooltipLabel;\n        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n        return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isVisible(circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    }\n    activateCircle(circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle(circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    }\n    trackBy(index, circle) {\n        return `${circle.data.series} ${circle.data.name}`;\n    }\n}\nBubbleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBubbleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", rScale: \"rScale\", xScaleType: \"xScaleType\", yScaleType: \"yScaleType\", colors: \"colors\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)'\n                }),\n                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bubble-series]',\n                    template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0,\n                                    transform: 'scale(0)'\n                                }),\n                                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], rScale: [{\n                type: Input\n            }], xScaleType: [{\n                type: Input\n            }], yScaleType: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showGridLines = true;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.maxRadius = 10;\n        this.minRadius = 3;\n        this.schemeType = ScaleType.Ordinal;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.scaleType = ScaleType.Linear;\n        this.margin = [10, 20, 10, 20];\n        this.bubblePadding = [0, 0, 0, 0];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.activeEntries = [];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(d => d.name);\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    hideCircles() {\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    getBubblePadding() {\n        let yMin = 0;\n        let xMin = 0;\n        let yMax = this.dims.height;\n        let xMax = this.dims.width;\n        for (const s of this.data) {\n            for (const d of s.series) {\n                const r = this.rScale(d.r);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    }\n    setScales() {\n        let width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        let height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    }\n    getYScale(domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n    getXScale(domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n    getRScale(domain, range) {\n        const scale = scaleLinear().range(range).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    getXDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n    getYDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n    getRDomain() {\n        let min = Infinity;\n        let max = -Infinity;\n        for (const results of this.results) {\n            for (const d of results.series) {\n                const value = Number(d.r) || 1;\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        }\n        return [min, max];\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nBubbleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBubbleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleChartComponent, selector: \"ngx-charts-bubble-chart\", inputs: { showGridLines: \"showGridLines\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", maxRadius: \"maxRadius\", minRadius: \"minRadius\", autoScale: \"autoScale\", schemeType: \"schemeType\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"colors\", \"visibleValue\", \"activeEntries\", \"xAxisLabel\", \"yAxisLabel\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bubble-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showGridLines: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], maxRadius: [{\n                type: Input\n            }], minRadius: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BubbleChartModule {\n}\nBubbleChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBubbleChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] });\nBubbleChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n                    exports: [BubbleChartComponent, BubbleSeriesComponent]\n                }]\n        }] });\n\nclass HeatMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        node.transition().duration(750).attr('opacity', 1);\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n}\nHeatMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nHeatMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: { fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", data: \"data\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass HeatCellSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        const cells = [];\n        this.data.map(row => {\n            row.series.map(cell => {\n                const value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row,\n                    cell,\n                    x: this.xScale(row.name),\n                    y: this.yScale(cell.name),\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    }\n    getTooltipText({ label, data, series }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nHeatCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nHeatCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: { data: \"data\", colors: \"colors\", xScale: \"xScale\", yScale: \"yScale\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: [\"fill\", \"x\", \"y\", \"width\", \"height\", \"data\", \"gradient\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass HeatMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.innerPadding = 8;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.scaleType = ScaleType.Linear;\n    }\n    update() {\n        super.update();\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === ScaleType.Linear) {\n            let min = this.min;\n            let max = this.max;\n            if (!this.min) {\n                min = Math.min(0, ...this.valueDomain);\n            }\n            if (!this.max) {\n                max = Math.max(...this.valueDomain);\n            }\n            this.valueDomain = [min, max];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.rects = this.getRects();\n    }\n    getXDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value, index = 0, N, L) {\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                // tslint:disable-next-line: quotemark\n                .replace(\"'\", '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    }\n    getXScale() {\n        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n    getYScale() {\n        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n    getRects() {\n        const rects = [];\n        this.xDomain.map(xVal => {\n            this.yDomain.map(yVal => {\n                rects.push({\n                    x: this.xScale(xVal),\n                    y: this.yScale(yVal),\n                    rx: 3,\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nHeatMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nHeatMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapComponent, selector: \"ngx-charts-heat-map\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", gradient: \"gradient\", innerPadding: \"innerPadding\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", min: \"min\", max: \"max\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: [\"data\", \"colors\", \"xScale\", \"yScale\", \"gradient\", \"tooltipDisabled\", \"tooltipText\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-heat-map', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass HeatMapModule {\n}\nHeatMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHeatMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] });\nHeatMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n                    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n                }]\n        }] });\n\nclass LineComponent {\n    constructor(element) {\n        this.element = element;\n        this.fill = 'none';\n        this.animations = true;\n        // @Output() select = new EventEmitter();\n        this.initialized = false;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    }\n    updatePathEl() {\n        const node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n}\nLineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nLineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: { path: \"path\", stroke: \"stroke\", data: \"data\", fill: \"fill\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `, isInline: true, animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    strokeDasharray: 2000,\n                    strokeDashoffset: 2000\n                }),\n                animate(1000, style({\n                    strokeDashoffset: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line]',\n                    template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    strokeDasharray: 2000,\n                                    strokeDashoffset: 2000\n                                }),\n                                animate(1000, style({\n                                    strokeDashoffset: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { path: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const data = this.sortData(this.data.series);\n        const lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        const areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            const range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    }\n    getLineGenerator() {\n        return line()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    getRangeGenerator() {\n        return area()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n            .curve(this.curve);\n    }\n    getAreaGenerator() {\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(() => this.yScale.range()[0])\n            .y1(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    }\n    updateGradients() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = `url(#${this.gradientId})`;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", hasRange: \"hasRange\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line-series]',\n                    template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], hasRange: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showRefLines = false;\n        this.showRefLabels = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, width]).domain(domain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, width]).domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n        }\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        this.deactivateAll();\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineChartComponent, selector: \"ngx-charts-line-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showRefLines: \"showRefLines\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"hasRange\", \"animations\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-line-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LineChartModule {\n}\nLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] });\nLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n                    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n                }]\n        }] });\n\nclass PieLabelComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.trimLabel = trimLabel;\n    }\n    ngOnChanges(changes) {\n        this.setTransforms();\n        this.update();\n    }\n    setTransforms() {\n        if (isPlatformServer(this.platformId)) {\n            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = `translate(${this.textX},${this.textY})`;\n            this.textTransition = !this.animations ? null : 'transform 0.75s';\n        }\n        else {\n            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n        }\n    }\n    update() {\n        let startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = (this.radius * this.value) / this.max;\n        }\n        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        const innerPos = innerArc.centroid(this.data);\n        let scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n    get textX() {\n        return this.data.pos[0];\n    }\n    get textY() {\n        return this.data.pos[1];\n    }\n    textAnchor() {\n        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n}\nPieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nPieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: { data: \"data\", radius: \"radius\", label: \"label\", color: \"color\", max: \"max\", value: \"value\", explodeSlices: \"explodeSlices\", animations: \"animations\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, usesOnChanges: true, ngImport: i0, template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-label]',\n                    template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { data: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }] } });\n\nclass PolarSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const line = this.getLineGenerator();\n        const data = this.sortData(this.data.series);\n        const seriesName = this.data.name;\n        const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n        const min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(d => {\n            const a = this.getAngle(d);\n            const r = this.getRadius(d);\n            const value = d.value;\n            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            const cData = Object.assign({}, d, {\n                series: seriesName,\n                value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value,\n                color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n    getAngle(d) {\n        const label = d.name;\n        if (this.scaleType === ScaleType.Time) {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    }\n    getRadius(d) {\n        return this.yScale(d.value);\n    }\n    getLineGenerator() {\n        return lineRadial()\n            .angle(d => this.getAngle(d))\n            .radius(d => this.getRadius(d))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n    defaultTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    updateGradients() {\n        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    }\n}\nPolarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPolarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: { name: \"name\", data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", gradient: \"gradient\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-polar-series]',\n                    template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveCardinalClosed;\n        this.activeEntries = [];\n        this.rangeFillOpacity = 0.15;\n        this.trimYAxisTicks = true;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showSeriesOnHover = true;\n        this.gradient = false;\n        this.yAxisMinScale = 0;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        // series: any; // ???\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.orientation = Orientation;\n    }\n    update() {\n        super.update();\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    }\n    setDims() {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        const halfWidth = Math.floor(this.dims.width / 2);\n        const halfHeight = Math.floor(this.dims.height / 2);\n        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        const yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = Object.assign(Object.assign({}, this.dims), { width: halfWidth });\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.transformYAxis = `translate(0, ${yOffset})`;\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n    setScales() {\n        const xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n    setTicks() {\n        let tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = d => {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const outerRadius = this.outerRadius;\n        const s = 1.1;\n        this.thetaTicks = this.xDomain.map(d => {\n            const startAngle = this.xScale(d);\n            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            const label = tickFormat(d);\n            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            const pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label,\n                startPos,\n                pos\n            };\n        });\n        const minDistance = 10;\n        /* from pie chart, abstract out -*/\n        for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n            const a = this.thetaTicks[i];\n            for (let j = i + 1; j < this.thetaTicks.length; j++) {\n                const b = this.thetaTicks[j];\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n    getXValues() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    }\n    getXDomain(values = this.getXValues()) {\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        return values;\n    }\n    getYValues() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    }\n    getYDomain(domain = this.getYValues()) {\n        let min = Math.min(...domain);\n        const max = Math.max(this.yAxisMinScale, ...domain);\n        min = Math.max(0, min);\n        if (!this.autoScale) {\n            min = Math.min(0, min);\n        }\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        switch (this.scaleType) {\n            case ScaleType.Time:\n                return scaleTime().range([0, width]).domain(domain);\n            case ScaleType.Linear:\n                const scale = scaleLinear().range([0, width]).domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([0, height]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        if (this.schemeType === ScaleType.Ordinal) {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nPolarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPolarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarChartComponent, selector: \"ngx-charts-polar-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimYAxisTicks: \"trimYAxisTicks\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showSeriesOnHover: \"showSeriesOnHover\", gradient: \"gradient\", yAxisMinScale: \"yAxisMinScale\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }, { type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: [\"name\", \"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"tooltipDisabled\", \"tooltipText\", \"gradient\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-polar-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showSeriesOnHover: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], yAxisMinScale: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieArcComponent {\n    constructor(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getGradient() {\n        return this.gradient ? this.gradientFill : this.fill;\n    }\n    getPointerEvents() {\n        return this.pointerEvents ? 'auto' : 'none';\n    }\n    update() {\n        const calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = `url(#${this.radialGradientId})`;\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    }\n    calculateArc() {\n        let outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n    loadAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            const interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    updateAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    onClick() {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n    onDblClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event\n        });\n    }\n}\nPieArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: { fill: \"fill\", startAngle: \"startAngle\", endAngle: \"endAngle\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", cornerRadius: \"cornerRadius\", value: \"value\", max: \"max\", data: \"data\", explodeSlices: \"explodeSlices\", gradient: \"gradient\", animate: \"animate\", pointerEvents: \"pointerEvents\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-arc]',\n                    template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], endAngle: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass PieSeriesComponent {\n    constructor() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        const pieGenerator = pie()\n            .value(d => d.value)\n            .sort(null);\n        const arcData = pieGenerator(this.series);\n        this.max = max(arcData, d => {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n    outerArc() {\n        const factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    }\n    calculateLabelPositions(pieData) {\n        const factor = 1.5;\n        const minDistance = 10;\n        const labelPositions = pieData;\n        labelPositions.forEach(d => {\n            d.pos = this.outerArc().centroid(d);\n            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (let i = 0; i < labelPositions.length - 1; i++) {\n            const a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (let j = i + 1; j < labelPositions.length; j++) {\n                const b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    }\n    labelVisible(myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n    getTooltipTitle(a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n    labelText(myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    }\n    label(myArc) {\n        return formatLabel(myArc.data.name);\n    }\n    defaultTooltipText(myArc) {\n        const label = this.label(myArc);\n        const val = formatLabel(myArc.data.value);\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    color(myArc) {\n        return this.colors.getColor(this.label(myArc));\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n}\nPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: { colors: \"colors\", series: \"series\", dims: \"dims\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", explodeSlices: \"explodeSlices\", showLabels: \"showLabels\", gradient: \"gradient\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-series]',\n                    template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { colors: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        const xOffset = this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nAdvancedPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAdvancedPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedPieChartComponent, selector: \"ngx-charts-advanced-pie-chart\", inputs: { gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", valueFormatting: \"valueFormatting\", nameFormatting: \"nameFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }, { type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: [\"width\", \"data\", \"colors\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-pie-chart', template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"] }]\n        }], propDecorators: { gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], valueFormatting: [{\n                type: Input\n            }], nameFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nclass PieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.labels = false;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.explodeSlices = false;\n        this.doughnut = false;\n        this.arcWidth = 0.25;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.dblclick = new EventEmitter();\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    update() {\n        super.update();\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            // default value for margins\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        const xOffset = this.margins[3] + this.dims.width / 2;\n        const yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = `translate(${xOffset}, ${yOffset})`;\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            // make room for labels\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        // sort data according to domain\n        this.data = this.results.sort((a, b) => {\n            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    hasNoOptionalMarginsSet() {\n        return !this.margins || this.margins.length <= 0;\n    }\n}\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieChartComponent, selector: \"ngx-charts-pie-chart\", inputs: { labels: \"labels\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", explodeSlices: \"explodeSlices\", doughnut: \"doughnut\", arcWidth: \"arcWidth\", gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", margins: \"margins\" }, outputs: { dblclick: \"dblclick\", select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"] }]\n        }], propDecorators: { labels: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], doughnut: [{\n                type: Input\n            }], arcWidth: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], dblclick: [{\n                type: Output\n            }], margins: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nfunction gridSize(dims, len, minWidth) {\n    let rows = 1;\n    let cols = len;\n    const width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    const xScale = scaleBand();\n    const yScale = scaleBand();\n    const width = dims.width;\n    const height = dims.height;\n    const [columns, rows] = gridSize(dims, data.length, minWidth);\n    const xDomain = [];\n    const yDomain = [];\n    for (let i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (let i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    const res = [];\n    const total = designatedTotal ? designatedTotal : getTotal(data);\n    const cardWidth = xScale.bandwidth();\n    const cardHeight = yScale.bandwidth();\n    for (let i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n    constructor(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.layout = pie()\n            .value(d => d.data.value)\n            .sort(null);\n        this.arcs = this.getArcs();\n    }\n    getArcs() {\n        return this.layout(this.data).map((arc, index) => {\n            const label = arc.data.data.name;\n            const other = arc.data.data.other;\n            if (index === 0) {\n                arc.startAngle = 0;\n            }\n            const color = this.colors(label);\n            return {\n                data: arc.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc.startAngle,\n                endAngle: arc.endAngle,\n                animate: this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    }\n    onClick(data) {\n        this.select.emit(this.data[0].data);\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    label(arc) {\n        return arc.data.name;\n    }\n    color(arc) {\n        return this.colors(this.label(arc));\n    }\n}\nPieGridSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieGridSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: { colors: \"colors\", data: \"data\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-grid-series]',\n                    template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { colors: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass PieGridComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.minWidth = 150;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    defaultTooltipText({ data }) {\n        const label = trimLabel(formatLabel(data.name));\n        const val = data.value.toLocaleString();\n        return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    getSeries() {\n        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(d => {\n            const baselineLabelHeight = 20;\n            const padding = 10;\n            const name = d.data.name;\n            const label = formatLabel(name);\n            const value = d.data.value;\n            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            const innerRadius = radius * 0.9;\n            let count = 0;\n            const colors = () => {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return this.colorScale.getColor(label);\n                }\n            };\n            const xPos = d.x + (d.width - padding) / 2;\n            const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: `translate(${xPos}, ${yPos})`,\n                colors,\n                innerRadius,\n                outerRadius: radius,\n                name,\n                label: trimLabel(label),\n                total: value,\n                value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    }\n    getTotal() {\n        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nPieGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridComponent, selector: \"ngx-charts-pie-grid\", inputs: { designatedTotal: \"designatedTotal\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", minWidth: \"minWidth\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: [\"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-grid', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"] }]\n        }], propDecorators: { designatedTotal: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieChartModule {\n}\nPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, declarations: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent] });\nPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ],\n                    exports: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ]\n                }]\n        }] });\n\nclass PolarChartModule {\n}\nPolarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPolarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] });\nPolarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n                    declarations: [PolarChartComponent, PolarSeriesComponent],\n                    exports: [PolarChartComponent, PolarSeriesComponent]\n                }]\n        }] });\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n    return text.split('').reduce((acc, curr) => {\n        const width = fontFamilyKey[curr] || defaultWidth;\n        return acc + width;\n    }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n    '0': 10,\n    '1': 10,\n    '2': 10,\n    '3': 10,\n    '4': 10,\n    '5': 10,\n    '6': 10,\n    '7': 10,\n    '8': 10,\n    '9': 10,\n    A: 11,\n    B: 11,\n    C: 11,\n    D: 12,\n    E: 10,\n    F: 9,\n    G: 12,\n    H: 12,\n    I: 7,\n    J: 7,\n    K: 11,\n    L: 9,\n    M: 13,\n    N: 12,\n    O: 13,\n    P: 10,\n    Q: 13,\n    R: 11,\n    S: 11,\n    T: 10,\n    U: 12,\n    V: 11,\n    W: 16,\n    X: 11,\n    Y: 10,\n    Z: 11,\n    a: 10,\n    b: 10,\n    c: 8,\n    d: 10,\n    e: 10,\n    f: 6,\n    g: 10,\n    h: 10,\n    i: 4,\n    j: 6,\n    k: 9,\n    l: 4,\n    m: 16,\n    n: 10,\n    o: 10,\n    p: 10,\n    q: 10,\n    r: 7,\n    s: 8,\n    t: 6,\n    u: 10,\n    v: 9,\n    w: 13,\n    x: 9,\n    y: 9,\n    z: 8,\n    '!': 6,\n    '@': 16,\n    '#': 13,\n    $: 10,\n    '%': 17,\n    '^': 13,\n    '&': 12,\n    '*': 10,\n    '(': 7,\n    ')': 7,\n    _: 10,\n    '-': 7,\n    '+': 13,\n    '=': 13,\n    ',': 6,\n    '.': 6,\n    '/': 7,\n    \"'\": 4,\n    ':': 7,\n    '|': 7,\n    '?': 9,\n    ';': 7,\n    '<': 13,\n    '>': 13\n};\n\nclass CardComponent {\n    constructor(element, cd, zone, platformId) {\n        this.cd = cd;\n        this.zone = zone;\n        this.platformId = platformId;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            cancelAnimationFrame(this.animationReq);\n        }\n    }\n    update() {\n        this.zone.run(() => {\n            const hasValue = this.data && typeof this.data.value !== 'undefined';\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n            this.transform = `translate(${this.x} , ${this.y})`;\n            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n            this.cardWidth = Math.max(0, this.width);\n            this.cardHeight = Math.max(0, this.height);\n            this.label = this.label ? this.label : this.data.name;\n            const cardData = {\n                label: this.label,\n                data: this.data,\n                value: this.data.value\n            };\n            this.formattedLabel = labelFormatting(cardData);\n            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n            const value = hasValue ? valueFormatting(cardData) : '';\n            this.value = this.paddedValue(value);\n            this.setPadding();\n            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    this.scaleText();\n                }\n                this.value = value;\n                if (hasValue && !this.initialized) {\n                    setTimeout(() => this.startCount(), 20);\n                }\n            }, 8);\n        });\n    }\n    paddedValue(value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    }\n    startCount() {\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            const val = this.data.value;\n            const decs = decimalChecker(val);\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const callback = ({ value, finished }) => {\n                this.zone.run(() => {\n                    value = finished ? val : value;\n                    this.value = valueFormatting({ label: this.label, data: this.data, value });\n                    if (!finished) {\n                        this.value = this.paddedValue(this.value);\n                    }\n                    this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val, decs, 1, callback);\n            this.initialized = true;\n        }\n    }\n    scaleText() {\n        this.zone.run(() => {\n            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n            if (width === 0 || height === 0) {\n                return;\n            }\n            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n            const availableWidth = this.cardWidth - 2 * textPadding;\n            const availableHeight = this.cardHeight / 3;\n            const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n            this.labelFontSize = Math.min(this.textFontSize, 15);\n            this.setPadding();\n            this.cd.markForCheck();\n        });\n    }\n    scaleTextSSR() {\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n        const height = 18;\n        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n    }\n    setPadding() {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n}\nCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: { color: \"color\", bandColor: \"bandColor\", textColor: \"textColor\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", data: \"data\", medianSize: \"medianSize\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { color: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], medianSize: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl', { static: false }]\n            }] } });\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n    // deprecated, use d3.color()\n    return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n    const color = d3_color.rgb(value);\n    const { r, g, b, opacity } = color;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    const depth = yiq >= 128 ? -0.8 : 0.8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({ r, g, b }, percent) {\n    const t = percent < 0 ? 0 : 255;\n    const p = percent < 0 ? percent * -1 : percent;\n    r = Math.round((t - r) * p) + r;\n    g = Math.round((t - g) * p) + g;\n    b = Math.round((t - b) * p) + b;\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n    constructor() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.data.length > 2) {\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const sortedLengths = this.data\n                .map(d => {\n                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort((a, b) => b - a);\n            const idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        const cards = this.getCards();\n        this.cards = cards.filter(d => d.data.value !== null);\n        this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n    getCards() {\n        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map((d, index) => {\n            let label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            const value = d.data.value;\n            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n            const color = this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color,\n                bandColor: this.bandColor || valueColor,\n                textColor: this.textColor || invertColor(color),\n                label,\n                data: d.data,\n                tooltipText: `${label}: ${value}`\n            };\n        });\n    }\n    trackBy(index, card) {\n        return card.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nCardSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCardSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", innerPadding: \"innerPadding\", cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `, isInline: true, components: [{ type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: [\"color\", \"bandColor\", \"textColor\", \"x\", \"y\", \"width\", \"height\", \"label\", \"data\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card-series]',\n                    template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass NumberCardComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.innerPadding = 15;\n        this.margin = [10, 10, 10, 10];\n    }\n    get clickable() {\n        return !!this.select.observers.length;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        const size = gridSize(this.dims, this.results.length, 150);\n        const N = size[0] * size[1];\n        const data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nNumberCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNumberCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: NumberCardComponent, selector: \"ngx-charts-number-card\", inputs: { cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", innerPadding: \"innerPadding\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", designatedTotal: \"designatedTotal\" }, usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: [\"data\", \"dims\", \"colors\", \"innerPadding\", \"cardColor\", \"bandColor\", \"emptyColor\", \"textColor\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-number-card', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"] }]\n        }], propDecorators: { cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], designatedTotal: [{\n                type: Input\n            }] } });\n\nclass NumberCardModule {\n}\nNumberCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNumberCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] });\nNumberCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n                    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n                }]\n        }] });\n\nclass TreeMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.orientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n        const cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n    }\n    update() {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n        this.animateToCurrentForm();\n    }\n    getTextColor() {\n        return invertColor(this.fill);\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n        }\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n}\nTreeMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: { data: \"data\", fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", value: \"value\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell]',\n                    template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapCellSeriesComponent {\n    constructor() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.styleTypes = StyleTypes;\n        this.placementTypes = PlacementTypes;\n    }\n    ngOnChanges(changes) {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        return this.data.children\n            .filter(d => {\n            return d.depth === 1;\n        })\n            .map((d, index) => {\n            const label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: this.colors.getColor(label),\n                label,\n                value: d.value\n            };\n        });\n    }\n    getTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nTreeMapCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: [\"data\", \"fill\", \"x\", \"y\", \"width\", \"height\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        const rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        const root = stratify()\n            .id(d => {\n            let label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n            .sum(d => d.value);\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nTreeMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nTreeMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapComponent, selector: \"ngx-charts-tree-map\", inputs: { results: \"results\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\" }, outputs: { select: \"select\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: [\"data\", \"dims\", \"colors\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-tree-map', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"] }]\n        }], propDecorators: { results: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass TreeMapModule {\n}\nTreeMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] });\nTreeMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n                    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n                }]\n        }] });\n\nvar ElementType;\n(function (ElementType) {\n    ElementType[\"Value\"] = \"value\";\n    ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.margin = [10, 20, 10, 20];\n        this.valueResizeScale = 1;\n        this.unitsResizeScale = 1;\n        this.valueTextTransform = '';\n        this.valueTranslate = '';\n        this.unitsTextTransform = '';\n        this.unitsTranslate = '';\n        this.barOrientation = BarOrientation;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => {\n            this.scaleText(ElementType.Value);\n            this.scaleText(ElementType.Units);\n        });\n    }\n    update() {\n        super.update();\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n        this.valueTranslate = `translate(0, -15)`;\n        this.unitsTranslate = `translate(0, 15)`;\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR('value');\n            this.scaleTextSSR('units');\n        }\n        else {\n            setTimeout(() => this.scaleText(ElementType.Value), 50);\n            setTimeout(() => this.scaleText(ElementType.Units), 50);\n        }\n    }\n    getValueDomain() {\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    }\n    scaleText(element, repeat = true) {\n        let el;\n        let resizeScale;\n        if (element === ElementType.Value) {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        const { width, height } = el.nativeElement.getBoundingClientRect();\n        if (width === 0 || height === 0)\n            return;\n        const oldScale = resizeScale;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === ElementType.Value) {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            this.cd.markForCheck();\n            if (repeat && isPlatformBrowser(this.platformId)) {\n                setTimeout(() => {\n                    this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    }\n    scaleTextSSR(element) {\n        let resizeScale = 1;\n        const value = element === 'value' ? this.displayValue : this.units;\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n        const height = 25;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (element === 'value') {\n            this.valueResizeScale = resizeScale;\n            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        else {\n            this.unitsResizeScale = resizeScale;\n            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        this.cd.markForCheck();\n    }\n    onClick() {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n    }\n}\nLinearGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLinearGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LinearGaugeComponent, selector: \"ngx-charts-linear-gauge\", inputs: { min: \"min\", max: \"max\", value: \"value\", units: \"units\", previousValue: \"previousValue\", valueFormatting: \"valueFormatting\" }, viewQueries: [{ propertyName: \"valueTextEl\", first: true, predicate: [\"valueTextEl\"], descendants: true }, { propertyName: \"unitsTextEl\", first: true, predicate: [\"unitsTextEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-linear-gauge', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"] }]\n        }], propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], previousValue: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], valueTextEl: [{\n                type: ViewChild,\n                args: ['valueTextEl']\n            }], unitsTextEl: [{\n                type: ViewChild,\n                args: ['unitsTextEl']\n            }] } });\n\nclass GaugeArcComponent {\n    constructor() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    tooltipText(arc) {\n        const label = formatLabel(arc.data.name);\n        let val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc.data.value);\n        }\n        else {\n            val = formatLabel(arc.data.value);\n        }\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n}\nGaugeArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: { backgroundArc: \"backgroundArc\", valueArc: \"valueArc\", cornerRadius: \"cornerRadius\", colors: \"colors\", isActive: \"isActive\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-arc]',\n                    template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { backgroundArc: [{\n                type: Input\n            }], valueArc: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GaugeAxisComponent {\n    constructor() {\n        this.rotate = '';\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = `rotate(${this.rotationAngle})`;\n        this.ticks = this.getTicks();\n    }\n    getTicks() {\n        const bigTickSegment = this.angleSpan / this.bigSegments;\n        const smallTickSegment = bigTickSegment / this.smallSegments;\n        const tickLength = 20;\n        const ticks = {\n            big: [],\n            small: []\n        };\n        const startDistance = this.radius + 10;\n        const textDist = startDistance + tickLength + 10;\n        for (let i = 0; i <= this.bigSegments; i++) {\n            const angleDeg = i * bigTickSegment;\n            const angle = (angleDeg * Math.PI) / 180;\n            const textAnchor = this.getTextAnchor(angleDeg);\n            let skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor,\n                    text,\n                    textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (let j = 1; j <= this.smallSegments; j++) {\n                const smallAngleDeg = angleDeg + j * smallTickSegment;\n                const smallAngle = (smallAngleDeg * Math.PI) / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    }\n    getTextAnchor(angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        let textAnchor = TextAnchor.Middle;\n        if (angle > 45 && angle <= 135) {\n            textAnchor = TextAnchor.Start;\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = TextAnchor.End;\n        }\n        return textAnchor;\n    }\n    getTickPath(startDistance, tickLength, angle) {\n        const y1 = startDistance * Math.sin(angle);\n        const y2 = (startDistance + tickLength) * Math.sin(angle);\n        const x1 = startDistance * Math.cos(angle);\n        const x2 = (startDistance + tickLength) * Math.cos(angle);\n        const points = [\n            { x: x1, y: y1 },\n            { x: x2, y: y2 }\n        ];\n        const lineGenerator = line()\n            .x(d => d.x)\n            .y(d => d.y);\n        return lineGenerator(points);\n    }\n}\nGaugeAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: { bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", min: \"min\", max: \"max\", angleSpan: \"angleSpan\", startAngle: \"startAngle\", radius: \"radius\", valueScale: \"valueScale\", tickFormatting: \"tickFormatting\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-axis]',\n                    template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], valueScale: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }] } });\n\nclass GaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.min = 0;\n        this.max = 100;\n        this.bigSegments = 10;\n        this.smallSegments = 5;\n        this.showAxis = true;\n        this.startAngle = -120;\n        this.angleSpan = 240;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.showText = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.resizeScale = 1;\n        this.rotation = '';\n        this.textTransform = 'scale(1, 1)';\n        this.cornerRadius = 10;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => this.scaleText());\n    }\n    update() {\n        super.update();\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        // make the starting angle positive\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.rotation = `rotate(${this.startAngle})`;\n        setTimeout(() => this.scaleText(), 50);\n    }\n    getArcs() {\n        const arcs = [];\n        const availableRadius = this.outerRadius * 0.7;\n        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        const arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        let i = 0;\n        for (const d of this.results) {\n            const outerRadius = this.outerRadius - i * radiusPerArc;\n            const innerRadius = outerRadius - arcWidth;\n            const backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            const valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            const arc = {\n                backgroundArc,\n                valueArc\n            };\n            arcs.push(arc);\n            i++;\n        }\n        return arcs;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    getValueDomain() {\n        const values = this.results.map(d => d.value);\n        const dataMin = Math.min(...values);\n        const dataMax = Math.max(...values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    }\n    scaleText(repeat = true) {\n        if (!this.showText) {\n            return;\n        }\n        const { width } = this.textEl.nativeElement.getBoundingClientRect();\n        const oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            const availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(() => this.scaleText(false), 50);\n            }\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n    trackBy(index, item) {\n        return item.valueArc.data.name;\n    }\n}\nGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeComponent, selector: \"ngx-charts-gauge\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", min: \"min\", max: \"max\", textValue: \"textValue\", units: \"units\", bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", results: \"results\", showAxis: \"showAxis\", startAngle: \"startAngle\", angleSpan: \"angleSpan\", activeEntries: \"activeEntries\", axisTickFormatting: \"axisTickFormatting\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", showText: \"showText\", margin: \"margin\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: [\"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"valueFormatting\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: [\"bigSegments\", \"smallSegments\", \"min\", \"max\", \"angleSpan\", \"startAngle\", \"radius\", \"valueScale\", \"tickFormatting\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-gauge', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], textValue: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], showAxis: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], axisTickFormatting: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], showText: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl']\n            }] } });\n\nclass GaugeModule {\n}\nGaugeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGaugeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] });\nGaugeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n                    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n                    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n                }]\n        }] });\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\n\nclass NgxChartsModule {\n    constructor() {\n        ngxChartsPolyfills();\n    }\n}\nNgxChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, exports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\nNgxChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, imports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ChartCommonModule,\n                        AreaChartModule,\n                        BarChartModule,\n                        BoxChartModule,\n                        BubbleChartModule,\n                        HeatMapModule,\n                        LineChartModule,\n                        PolarChartModule,\n                        NumberCardModule,\n                        PieChartModule,\n                        TreeMapModule,\n                        GaugeModule\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            const formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };\n"]},"metadata":{},"sourceType":"module"}