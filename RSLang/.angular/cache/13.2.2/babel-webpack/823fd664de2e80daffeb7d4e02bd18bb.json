{"ast":null,"code":"import * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Attribute, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/bidi';\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\n\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\n\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\n\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\n\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\n\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\n\nclass MatSliderChange {} // Boilerplate for applying mixins to MatSlider.\n\n/** @docs-private */\n\n\nconst _MatSliderBase = mixinTabIndex(mixinColor(mixinDisabled(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n\n\nclass MatSlider extends _MatSliderBase {\n  constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._ngZone = _ngZone;\n    this._animationMode = _animationMode;\n    this._invert = false;\n    this._max = 100;\n    this._min = 0;\n    this._step = 1;\n    this._thumbLabel = false;\n    this._tickInterval = 0;\n    this._value = null;\n    this._vertical = false;\n    /** Event emitted when the slider value has changed. */\n\n    this.change = new EventEmitter();\n    /** Event emitted when the slider thumb moves. */\n\n    this.input = new EventEmitter();\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n\n    this.onTouched = () => {};\n\n    this._percent = 0;\n    /**\n     * Whether or not the thumb is sliding and what the user is using to slide it with.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n\n    this._isSliding = null;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n\n    this._isActive = false;\n    /** The size of a tick interval as a percentage of the size of the track. */\n\n    this._tickIntervalPercent = 0;\n    /** The dimensions of the slider. */\n\n    this._sliderDimensions = null;\n\n    this._controlValueAccessorChangeFn = () => {};\n    /** Subscription to the Directionality change EventEmitter. */\n\n\n    this._dirChangeSubscription = Subscription.EMPTY;\n    /** Called when the user has put their pointer down on the slider. */\n\n    this._pointerDown = event => {\n      // Don't do anything if the slider is disabled or the\n      // user is using anything other than the main mouse button.\n      if (this.disabled || this._isSliding || !isTouchEvent(event) && event.button !== 0) {\n        return;\n      }\n\n      this._ngZone.run(() => {\n        this._touchId = isTouchEvent(event) ? getTouchIdForSlider(event, this._elementRef.nativeElement) : undefined;\n        const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n\n        if (pointerPosition) {\n          const oldValue = this.value;\n          this._isSliding = 'pointer';\n          this._lastPointerEvent = event;\n\n          this._focusHostElement();\n\n          this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n\n\n          this._bindGlobalEvents(event);\n\n          this._focusHostElement();\n\n          this._updateValueFromPosition(pointerPosition);\n\n          this._valueOnSlideStart = oldValue; // Despite the fact that we explicitly bind active events, in some cases the browser\n          // still dispatches non-cancelable events which cause this call to throw an error.\n          // There doesn't appear to be a good way of avoiding them. See #23820.\n\n          if (event.cancelable) {\n            event.preventDefault();\n          } // Emit a change and input event if the value changed.\n\n\n          if (oldValue != this.value) {\n            this._emitInputEvent();\n          }\n        }\n      });\n    };\n    /**\n     * Called when the user has moved their pointer after\n     * starting to drag. Bound on the document level.\n     */\n\n\n    this._pointerMove = event => {\n      if (this._isSliding === 'pointer') {\n        const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n\n        if (pointerPosition) {\n          // Prevent the slide from selecting anything else.\n          event.preventDefault();\n          const oldValue = this.value;\n          this._lastPointerEvent = event;\n\n          this._updateValueFromPosition(pointerPosition); // Native range elements always emit `input` events when the value changed while sliding.\n\n\n          if (oldValue != this.value) {\n            this._emitInputEvent();\n          }\n        }\n      }\n    };\n    /** Called when the user has lifted their pointer. Bound on the document level. */\n\n\n    this._pointerUp = event => {\n      if (this._isSliding === 'pointer') {\n        if (!isTouchEvent(event) || typeof this._touchId !== 'number' || // Note that we use `changedTouches`, rather than `touches` because it\n        // seems like in most cases `touches` is empty for `touchend` events.\n        findMatchingTouch(event.changedTouches, this._touchId)) {\n          event.preventDefault();\n\n          this._removeGlobalEvents();\n\n          this._isSliding = null;\n          this._touchId = undefined;\n\n          if (this._valueOnSlideStart != this.value && !this.disabled) {\n            this._emitChangeEvent();\n          }\n\n          this._valueOnSlideStart = this._lastPointerEvent = null;\n        }\n      }\n    };\n    /** Called when the window has lost focus. */\n\n\n    this._windowBlur = () => {\n      // If the window is blurred while dragging we need to stop dragging because the\n      // browser won't dispatch the `mouseup` and `touchend` events anymore.\n      if (this._lastPointerEvent) {\n        this._pointerUp(this._lastPointerEvent);\n      }\n    };\n\n    this._document = _document;\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    _ngZone.runOutsideAngular(() => {\n      const element = elementRef.nativeElement;\n      element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n    });\n  }\n  /** Whether the slider is inverted. */\n\n\n  get invert() {\n    return this._invert;\n  }\n\n  set invert(value) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  /** The maximum value that the slider can have. */\n\n\n  get max() {\n    return this._max;\n  }\n\n  set max(v) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** The minimum value that the slider can have. */\n\n\n  get min() {\n    return this._min;\n  }\n\n  set min(v) {\n    this._min = coerceNumberProperty(v, this._min);\n    this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** The values at which the thumb will snap. */\n\n\n  get step() {\n    return this._step;\n  }\n\n  set step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop().length;\n    } // Since this could modify the label, we need to notify the change detection.\n\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Whether or not to show the thumb label. */\n\n\n  get thumbLabel() {\n    return this._thumbLabel;\n  }\n\n  set thumbLabel(value) {\n    this._thumbLabel = coerceBooleanProperty(value);\n  }\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n\n\n  get tickInterval() {\n    return this._tickInterval;\n  }\n\n  set tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  /** Value of the slider. */\n\n\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n\n    return this._value;\n  }\n\n  set value(v) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v, 0); // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n\n      if (this._roundToDecimal && value !== this.min && value !== this.max) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Whether the slider is vertical. */\n\n\n  get vertical() {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  /** The value to be used for display purposes. */\n\n\n  get displayValue() {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value);\n    } // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n\n\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n  /** set focus to the host element */\n\n\n  focus(options) {\n    this._focusHostElement(options);\n  }\n  /** blur the host element */\n\n\n  blur() {\n    this._blurHostElement();\n  }\n  /** The percentage of the slider that coincides with the value. */\n\n\n  get percent() {\n    return this._clamp(this._percent);\n  }\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n\n\n  _shouldInvertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n  /** Whether the slider is at its minimum value. */\n\n\n  _isMinValue() {\n    return this.percent === 0;\n  }\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n\n\n  _getThumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n\n    if (this._isMinValue() && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n\n    return 0;\n  }\n  /** CSS styles for the track background element. */\n\n\n  _getTrackBackgroundStyles() {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`\n    };\n  }\n  /** CSS styles for the track fill element. */\n\n\n  _getTrackFillStyles() {\n    const percent = this.percent;\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n      // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n      // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n      // the value of the slider is 0, we can easily get into this situation. We force a\n      // recalculation by changing the element's `display` when it goes from 0 to any other value.\n      display: percent === 0 ? 'none' : ''\n    };\n  }\n  /** CSS styles for the ticks container element. */\n\n\n  _getTicksContainerStyles() {\n    let axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n  /** CSS styles for the ticks element. */\n\n\n  _getTicksStyles() {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X'; // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue() && this._getThumbGap()) {\n      const shouldInvertAxis = this._shouldInvertAxis();\n\n      let side;\n\n      if (this.vertical) {\n        side = shouldInvertAxis ? 'Bottom' : 'Top';\n      } else {\n        side = shouldInvertAxis ? 'Right' : 'Left';\n      }\n\n      styles[`padding${side}`] = `${this._getThumbGap()}px`;\n    }\n\n    return styles;\n  }\n\n  _getThumbContainerStyles() {\n    const shouldInvertAxis = this._shouldInvertAxis();\n\n    let axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n    let invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n\n\n  _shouldInvertMouseCoords() {\n    const shouldInvertAxis = this._shouldInvertAxis();\n\n    return this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n  }\n  /** The language direction for this slider element. */\n\n\n  _getDirection() {\n    return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n      this._isActive = !!origin && origin !== 'keyboard';\n\n      this._changeDetectorRef.detectChanges();\n    });\n\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n    element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n    this._lastPointerEvent = null;\n\n    this._removeGlobalEvents();\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    } // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n\n\n    this._sliderDimensions = this._getSliderDimensions();\n\n    this._updateTickIntervalPercent();\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event) {\n    if (this.disabled || hasModifierKey(event) || this._isSliding && this._isSliding !== 'keyboard') {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n\n        break;\n\n      case PAGE_DOWN:\n        this._increment(-10);\n\n        break;\n\n      case END:\n        this.value = this.max;\n        break;\n\n      case HOME:\n        this.value = this.min;\n        break;\n\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n\n        break;\n\n      case UP_ARROW:\n        this._increment(1);\n\n        break;\n\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n\n        break;\n\n      case DOWN_ARROW:\n        this._increment(-1);\n\n        break;\n\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = 'keyboard';\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    if (this._isSliding === 'keyboard') {\n      this._isSliding = null;\n    }\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    return this._document.defaultView || window;\n  }\n  /**\n   * Binds our global move and end events. They're bound at the document level and only while\n   * dragging so that the user doesn't have to keep their pointer exactly over the slider\n   * as they're swiping across the screen.\n   */\n\n\n  _bindGlobalEvents(triggerEvent) {\n    // Note that we bind the events to the `document`, because it allows us to capture\n    // drag cancel events where the user's pointer is outside the browser window.\n    const document = this._document;\n    const isTouch = isTouchEvent(triggerEvent);\n    const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n    const endEventName = isTouch ? 'touchend' : 'mouseup';\n    document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n    document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n\n    if (isTouch) {\n      document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n    }\n\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined' && window) {\n      window.addEventListener('blur', this._windowBlur);\n    }\n  }\n  /** Removes any global event listeners that we may have added. */\n\n\n  _removeGlobalEvents() {\n    const document = this._document;\n    document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n    document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n    document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n    document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n    document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined' && window) {\n      window.removeEventListener('blur', this._windowBlur);\n    }\n  }\n  /** Increments the slider by the given number of steps (negative number decrements). */\n\n\n  _increment(numSteps) {\n    // Pre-clamp the current value since it's allowed to be\n    // out of bounds when assigned programmatically.\n    const clampedValue = this._clamp(this.value || 0, this.min, this.max);\n\n    this.value = this._clamp(clampedValue + this.step * numSteps, this.min, this.max);\n  }\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n\n\n  _updateValueFromPosition(pos) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x; // The exact value is calculated from the event and used to find the closest snap value.\n\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    } // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n\n\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent); // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n\n\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min; // The value needs to snap to the min and max.\n\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n  /** Emits a change event if the current value is different from the last emitted value. */\n\n\n  _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n  /** Emits an input event when the current value is different from the last emitted value. */\n\n\n  _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n\n\n  _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    let tickIntervalPercent;\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n\n    this._tickIntervalPercent = isSafeNumber(tickIntervalPercent) ? tickIntervalPercent : 0;\n  }\n  /** Creates a slider change object from the specified value. */\n\n\n  _createChangeEvent(value = this.value) {\n    let event = new MatSliderChange();\n    event.source = this;\n    event.value = value;\n    return event;\n  }\n  /** Calculates the percentage of the slider that a value is. */\n\n\n  _calculatePercentage(value) {\n    const percentage = ((value || 0) - this.min) / (this.max - this.min);\n    return isSafeNumber(percentage) ? percentage : 0;\n  }\n  /** Calculates the value a percentage of the slider corresponds to. */\n\n\n  _calculateValue(percentage) {\n    return this.min + percentage * (this.max - this.min);\n  }\n  /** Return a number between two numbers. */\n\n\n  _clamp(value, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n\n\n  _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n\n\n  _focusHostElement(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Blurs the native element. */\n\n\n  _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n\n\n  writeValue(value) {\n    this.value = value;\n  }\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n\n\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n}\n\nMatSlider.ɵfac = function MatSlider_Factory(t) {\n  return new (t || MatSlider)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatSlider.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSlider,\n  selectors: [[\"mat-slider\"]],\n  viewQuery: function MatSlider_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"],\n  hostVars: 29,\n  hostBindings: function MatSlider_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSlider_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      })(\"keyup\", function MatSlider_keyup_HostBindingHandler() {\n        return ctx._onKeyup();\n      })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() {\n        return ctx._onMouseenter();\n      })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) {\n        return $event.preventDefault();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n      i0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.valueText == null ? ctx.displayValue : ctx.valueText)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n      i0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._shouldInvertAxis())(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue())(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue() && ctx._getThumbGap() && ctx._shouldInvertAxis())(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    invert: \"invert\",\n    max: \"max\",\n    min: \"min\",\n    step: \"step\",\n    thumbLabel: \"thumbLabel\",\n    tickInterval: \"tickInterval\",\n    value: \"value\",\n    displayWith: \"displayWith\",\n    valueText: \"valueText\",\n    vertical: \"vertical\"\n  },\n  outputs: {\n    change: \"change\",\n    input: \"input\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSlider\"],\n  features: [i0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n  decls: 13,\n  vars: 6,\n  consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]],\n  template: function MatSlider_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelement(3, \"div\", 3);\n      i0.ɵɵelement(4, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 5);\n      i0.ɵɵelement(6, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 7);\n      i0.ɵɵelement(8, \"div\", 8);\n      i0.ɵɵelement(9, \"div\", 9);\n      i0.ɵɵelementStart(10, \"div\", 10);\n      i0.ɵɵelementStart(11, \"span\", 11);\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngStyle\", ctx._getTrackBackgroundStyles());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx._getTrackFillStyles());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx._getTicksContainerStyles());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx._getTicksStyles());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx._getThumbContainerStyles());\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.displayValue);\n    }\n  },\n  directives: [i3.NgStyle],\n  styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlider, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slider',\n      exportAs: 'matSlider',\n      providers: [MAT_SLIDER_VALUE_ACCESSOR],\n      host: {\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)',\n        '(keyup)': '_onKeyup()',\n        '(mouseenter)': '_onMouseenter()',\n        // On Safari starting to slide temporarily triggers text selection mode which\n        // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n        '(selectstart)': '$event.preventDefault()',\n        'class': 'mat-slider mat-focus-indicator',\n        'role': 'slider',\n        '[tabIndex]': 'tabIndex',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.aria-valuemax]': 'max',\n        '[attr.aria-valuemin]': 'min',\n        '[attr.aria-valuenow]': 'value',\n        // NVDA and Jaws appear to announce the `aria-valuenow` by calculating its percentage based\n        // on its value between `aria-valuemin` and `aria-valuemax`. Due to how decimals are handled,\n        // it can cause the slider to read out a very long value like 0.20000068 if the current value\n        // is 0.2 with a min of 0 and max of 1. We work around the issue by setting `aria-valuetext`\n        // to the same value that we set on the slider's thumb which will be truncated.\n        '[attr.aria-valuetext]': 'valueText == null ? displayValue : valueText',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mat-slider-disabled]': 'disabled',\n        '[class.mat-slider-has-ticks]': 'tickInterval',\n        '[class.mat-slider-horizontal]': '!vertical',\n        '[class.mat-slider-axis-inverted]': '_shouldInvertAxis()',\n        // Class binding which is only used by the test harness as there is no other\n        // way for the harness to detect if mouse coordinates need to be inverted.\n        '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n        '[class.mat-slider-sliding]': '_isSliding',\n        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n        '[class.mat-slider-vertical]': 'vertical',\n        '[class.mat-slider-min-value]': '_isMinValue()',\n        '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      inputs: ['disabled', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_getTrackBackgroundStyles()\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_getTrackFillStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_getTicksContainerStyles()\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_getTicksStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_getThumbContainerStyles()\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    invert: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    thumbLabel: [{\n      type: Input\n    }],\n    tickInterval: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    valueText: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    input: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    _sliderWrapper: [{\n      type: ViewChild,\n      args: ['sliderWrapper']\n    }]\n  });\n})();\n/** Checks if number is safe for calculation */\n\n\nfunction isSafeNumber(value) {\n  return !isNaN(value) && isFinite(value);\n}\n/** Returns whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\n\n\nfunction getPointerPositionOnPage(event, id) {\n  let point;\n\n  if (isTouchEvent(event)) {\n    // The `identifier` could be undefined if the browser doesn't support `TouchEvent.identifier`.\n    // If that's the case, attribute the first touch to all active sliders. This should still cover\n    // the most common case while only breaking multi-touch.\n    if (typeof id === 'number') {\n      point = findMatchingTouch(event.touches, id) || findMatchingTouch(event.changedTouches, id);\n    } else {\n      // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n      point = event.touches[0] || event.changedTouches[0];\n    }\n  } else {\n    point = event;\n  }\n\n  return point ? {\n    x: point.clientX,\n    y: point.clientY\n  } : undefined;\n}\n/** Finds a `Touch` with a specific ID in a `TouchList`. */\n\n\nfunction findMatchingTouch(touches, id) {\n  for (let i = 0; i < touches.length; i++) {\n    if (touches[i].identifier === id) {\n      return touches[i];\n    }\n  }\n\n  return undefined;\n}\n/** Gets the unique ID of a touch that matches a specific slider. */\n\n\nfunction getTouchIdForSlider(event, sliderHost) {\n  for (let i = 0; i < event.touches.length; i++) {\n    const target = event.touches[i].target;\n\n    if (sliderHost === target || sliderHost.contains(target)) {\n      return event.touches[i].identifier;\n    }\n  }\n\n  return undefined;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSliderModule {}\n\nMatSliderModule.ɵfac = function MatSliderModule_Factory(t) {\n  return new (t || MatSliderModule)();\n};\n\nMatSliderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSliderModule\n});\nMatSliderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSliderModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule],\n      exports: [MatSlider, MatCommonModule],\n      declarations: [MatSlider]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };","map":{"version":3,"sources":["D:/RSLang/RSLang/node_modules/@angular/material/fesm2015/slider.mjs"],"names":["i3","DOCUMENT","CommonModule","i0","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Attribute","Inject","Input","Output","ViewChild","NgModule","mixinTabIndex","mixinColor","mixinDisabled","MatCommonModule","coerceBooleanProperty","coerceNumberProperty","hasModifierKey","DOWN_ARROW","RIGHT_ARROW","UP_ARROW","LEFT_ARROW","HOME","END","PAGE_DOWN","PAGE_UP","NG_VALUE_ACCESSOR","ANIMATION_MODULE_TYPE","normalizePassiveListenerOptions","Subscription","i1","i2","activeEventOptions","passive","MIN_AUTO_TICK_SEPARATION","DISABLED_THUMB_GAP","MIN_VALUE_NONACTIVE_THUMB_GAP","MIN_VALUE_ACTIVE_THUMB_GAP","MAT_SLIDER_VALUE_ACCESSOR","provide","useExisting","MatSlider","multi","MatSliderChange","_MatSliderBase","constructor","_elementRef","elementRef","_focusMonitor","_changeDetectorRef","_dir","tabIndex","_ngZone","_document","_animationMode","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","change","input","valueChange","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","EMPTY","_pointerDown","event","disabled","isTouchEvent","button","run","_touchId","getTouchIdForSlider","nativeElement","undefined","pointerPosition","getPointerPositionOnPage","oldValue","value","_lastPointerEvent","_focusHostElement","_onMouseenter","_bindGlobalEvents","_updateValueFromPosition","_valueOnSlideStart","cancelable","preventDefault","_emitInputEvent","_pointerMove","_pointerUp","findMatchingTouch","changedTouches","_removeGlobalEvents","_emitChangeEvent","_windowBlur","parseInt","runOutsideAngular","element","addEventListener","invert","max","v","_calculatePercentage","markForCheck","min","step","_roundToDecimal","toString","split","pop","length","thumbLabel","tickInterval","parseFloat","toFixed","vertical","displayValue","displayWith","focus","options","blur","_blurHostElement","percent","_clamp","_shouldInvertAxis","_isMinValue","_getThumbGap","_getTrackBackgroundStyles","axis","scale","sign","_shouldInvertMouseCoords","transform","_getTrackFillStyles","display","_getTicksContainerStyles","_getDirection","offset","_getTicksStyles","tickSize","backgroundSize","rotate","styles","shouldInvertAxis","side","_getThumbContainerStyles","invertOffset","ngAfterViewInit","monitor","subscribe","origin","detectChanges","ngOnDestroy","removeEventListener","stopMonitoring","unsubscribe","_getSliderDimensions","_updateTickIntervalPercent","_onFocus","_onBlur","_onKeydown","keyCode","_increment","_onKeyup","_getWindow","defaultView","window","triggerEvent","document","isTouch","moveEventName","endEventName","numSteps","clampedValue","pos","top","left","size","height","width","posComponent","y","x","exactValue","_calculateValue","closestValue","Math","round","emit","_createChangeEvent","tickIntervalPercent","trackSize","pixelsPerStep","stepsPerTick","ceil","pixelsPerTick","isSafeNumber","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","ElementRef","FocusMonitor","ChangeDetectorRef","Directionality","NgZone","ɵcmp","NgStyle","type","args","selector","exportAs","providers","host","inputs","encapsulation","None","changeDetection","OnPush","template","decorators","valueText","isNaN","isFinite","id","point","touches","clientX","clientY","i","identifier","sliderHost","target","contains","MatSliderModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Attribute, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/bidi';\n\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlider),\n    multi: true,\n};\n/** A simple change event emitted by the MatSlider component. */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nconst _MatSliderBase = mixinTabIndex(mixinColor(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /** Event emitted when the slider value has changed. */\n        this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = () => { };\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding and what the user is using to slide it with.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = null;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /** The size of a tick interval as a percentage of the size of the track. */\n        this._tickIntervalPercent = 0;\n        /** The dimensions of the slider. */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = () => { };\n        /** Subscription to the Directionality change EventEmitter. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Called when the user has put their pointer down on the slider. */\n        this._pointerDown = (event) => {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            this._ngZone.run(() => {\n                this._touchId = isTouchEvent(event)\n                    ? getTouchIdForSlider(event, this._elementRef.nativeElement)\n                    : undefined;\n                const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n                if (pointerPosition) {\n                    const oldValue = this.value;\n                    this._isSliding = 'pointer';\n                    this._lastPointerEvent = event;\n                    this._focusHostElement();\n                    this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                    this._bindGlobalEvents(event);\n                    this._focusHostElement();\n                    this._updateValueFromPosition(pointerPosition);\n                    this._valueOnSlideStart = oldValue;\n                    // Despite the fact that we explicitly bind active events, in some cases the browser\n                    // still dispatches non-cancelable events which cause this call to throw an error.\n                    // There doesn't appear to be a good way of avoiding them. See #23820.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    // Emit a change and input event if the value changed.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            });\n        };\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        this._pointerMove = (event) => {\n            if (this._isSliding === 'pointer') {\n                const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n                if (pointerPosition) {\n                    // Prevent the slide from selecting anything else.\n                    event.preventDefault();\n                    const oldValue = this.value;\n                    this._lastPointerEvent = event;\n                    this._updateValueFromPosition(pointerPosition);\n                    // Native range elements always emit `input` events when the value changed while sliding.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            }\n        };\n        /** Called when the user has lifted their pointer. Bound on the document level. */\n        this._pointerUp = (event) => {\n            if (this._isSliding === 'pointer') {\n                if (!isTouchEvent(event) ||\n                    typeof this._touchId !== 'number' ||\n                    // Note that we use `changedTouches`, rather than `touches` because it\n                    // seems like in most cases `touches` is empty for `touchend` events.\n                    findMatchingTouch(event.changedTouches, this._touchId)) {\n                    event.preventDefault();\n                    this._removeGlobalEvents();\n                    this._isSliding = null;\n                    this._touchId = undefined;\n                    if (this._valueOnSlideStart != this.value && !this.disabled) {\n                        this._emitChangeEvent();\n                    }\n                    this._valueOnSlideStart = this._lastPointerEvent = null;\n                }\n            }\n        };\n        /** Called when the window has lost focus. */\n        this._windowBlur = () => {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (this._lastPointerEvent) {\n                this._pointerUp(this._lastPointerEvent);\n            }\n        };\n        this._document = _document;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        _ngZone.runOutsideAngular(() => {\n            const element = elementRef.nativeElement;\n            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n        });\n    }\n    /** Whether the slider is inverted. */\n    get invert() {\n        return this._invert;\n    }\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n    get max() {\n        return this._max;\n    }\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n    get min() {\n        return this._min;\n    }\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n    get step() {\n        return this._step;\n    }\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = this._step.toString().split('.').pop().length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n    get thumbLabel() {\n        return this._thumbLabel;\n    }\n    set thumbLabel(value) {\n        this._thumbLabel = coerceBooleanProperty(value);\n    }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    get tickInterval() {\n        return this._tickInterval;\n    }\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /** Value of the slider. */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    set value(v) {\n        if (v !== this._value) {\n            let value = coerceNumberProperty(v, 0);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal && value !== this.min && value !== this.max) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the slider is vertical. */\n    get vertical() {\n        return this._vertical;\n    }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith(this.value);\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /** set focus to the host element */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /** blur the host element */\n    blur() {\n        this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percent() {\n        return this._clamp(this._percent);\n    }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    _shouldInvertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n    _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    _getThumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue() && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /** CSS styles for the track background element. */\n    _getTrackBackgroundStyles() {\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n        };\n    }\n    /** CSS styles for the track fill element. */\n    _getTrackFillStyles() {\n        const percent = this.percent;\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n            // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n            // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n            // the value of the slider is 0, we can easily get into this situation. We force a\n            // recalculation by changing the element's `display` when it goes from 0 to any other value.\n            display: percent === 0 ? 'none' : '',\n        };\n    }\n    /** CSS styles for the ticks container element. */\n    _getTicksContainerStyles() {\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        let offset = (this._tickIntervalPercent / 2) * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`,\n        };\n    }\n    /** CSS styles for the ticks element. */\n    _getTicksStyles() {\n        let tickSize = this._tickIntervalPercent * 100;\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`,\n        };\n        if (this._isMinValue() && this._getThumbGap()) {\n            const shouldInvertAxis = this._shouldInvertAxis();\n            let side;\n            if (this.vertical) {\n                side = shouldInvertAxis ? 'Bottom' : 'Top';\n            }\n            else {\n                side = shouldInvertAxis ? 'Right' : 'Left';\n            }\n            styles[`padding${side}`] = `${this._getThumbGap()}px`;\n        }\n        return styles;\n    }\n    _getThumbContainerStyles() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`,\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    _shouldInvertMouseCoords() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        return this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n    }\n    /** The language direction for this slider element. */\n    _getDirection() {\n        return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe((origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        });\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    ngOnDestroy() {\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onBlur() {\n        this.onTouched();\n    }\n    _onKeydown(event) {\n        if (this.disabled ||\n            hasModifierKey(event) ||\n            (this._isSliding && this._isSliding !== 'keyboard')) {\n            return;\n        }\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = 'keyboard';\n        event.preventDefault();\n    }\n    _onKeyup() {\n        if (this._isSliding === 'keyboard') {\n            this._isSliding = null;\n        }\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n    _bindGlobalEvents(triggerEvent) {\n        // Note that we bind the events to the `document`, because it allows us to capture\n        // drag cancel events where the user's pointer is outside the browser window.\n        const document = this._document;\n        const isTouch = isTouchEvent(triggerEvent);\n        const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n        const endEventName = isTouch ? 'touchend' : 'mouseup';\n        document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n        document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n        if (isTouch) {\n            document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Removes any global event listeners that we may have added. */\n    _removeGlobalEvents() {\n        const document = this._document;\n        document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    _increment(numSteps) {\n        // Pre-clamp the current value since it's allowed to be\n        // out of bounds when assigned programmatically.\n        const clampedValue = this._clamp(this.value || 0, this.min, this.max);\n        this.value = this._clamp(clampedValue + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        let tickIntervalPercent;\n        if (this.tickInterval == 'auto') {\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            let pixelsPerStep = (trackSize * this.step) / (this.max - this.min);\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            let pixelsPerTick = stepsPerTick * this.step;\n            tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            tickIntervalPercent = (this.tickInterval * this.step) / (this.max - this.min);\n        }\n        this._tickIntervalPercent = isSafeNumber(tickIntervalPercent) ? tickIntervalPercent : 0;\n    }\n    /** Creates a slider change object from the specified value. */\n    _createChangeEvent(value = this.value) {\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n    _calculatePercentage(value) {\n        const percentage = ((value || 0) - this.min) / (this.max - this.min);\n        return isSafeNumber(percentage) ? percentage : 0;\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSlider, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: i2.Directionality, optional: true }, { token: 'tabindex', attribute: true }, { token: i0.NgZone }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSlider.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatSlider, selector: \"mat-slider\", inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", value: \"value\", displayWith: \"displayWith\", valueText: \"valueText\", vertical: \"vertical\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"slider\" }, listeners: { \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\", \"keydown\": \"_onKeydown($event)\", \"keyup\": \"_onKeyup()\", \"mouseenter\": \"_onMouseenter()\", \"selectstart\": \"$event.preventDefault()\" }, properties: { \"tabIndex\": \"tabIndex\", \"attr.aria-disabled\": \"disabled\", \"attr.aria-valuemax\": \"max\", \"attr.aria-valuemin\": \"min\", \"attr.aria-valuenow\": \"value\", \"attr.aria-valuetext\": \"valueText == null ? displayValue : valueText\", \"attr.aria-orientation\": \"vertical ? \\\"vertical\\\" : \\\"horizontal\\\"\", \"class.mat-slider-disabled\": \"disabled\", \"class.mat-slider-has-ticks\": \"tickInterval\", \"class.mat-slider-horizontal\": \"!vertical\", \"class.mat-slider-axis-inverted\": \"_shouldInvertAxis()\", \"class.mat-slider-invert-mouse-coords\": \"_shouldInvertMouseCoords()\", \"class.mat-slider-sliding\": \"_isSliding\", \"class.mat-slider-thumb-label-showing\": \"thumbLabel\", \"class.mat-slider-vertical\": \"vertical\", \"class.mat-slider-min-value\": \"_isMinValue()\", \"class.mat-slider-hide-last-tick\": \"disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\" }, classAttribute: \"mat-slider mat-focus-indicator\" }, providers: [MAT_SLIDER_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_sliderWrapper\", first: true, predicate: [\"sliderWrapper\"], descendants: true }], exportAs: [\"matSlider\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_getTrackBackgroundStyles()\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_getTrackFillStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_getTicksContainerStyles()\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_getTicksStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_getThumbContainerStyles()\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], directives: [{ type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSlider, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slider', exportAs: 'matSlider', providers: [MAT_SLIDER_VALUE_ACCESSOR], host: {\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                        '(keydown)': '_onKeydown($event)',\n                        '(keyup)': '_onKeyup()',\n                        '(mouseenter)': '_onMouseenter()',\n                        // On Safari starting to slide temporarily triggers text selection mode which\n                        // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                        '(selectstart)': '$event.preventDefault()',\n                        'class': 'mat-slider mat-focus-indicator',\n                        'role': 'slider',\n                        '[tabIndex]': 'tabIndex',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.aria-valuemax]': 'max',\n                        '[attr.aria-valuemin]': 'min',\n                        '[attr.aria-valuenow]': 'value',\n                        // NVDA and Jaws appear to announce the `aria-valuenow` by calculating its percentage based\n                        // on its value between `aria-valuemin` and `aria-valuemax`. Due to how decimals are handled,\n                        // it can cause the slider to read out a very long value like 0.20000068 if the current value\n                        // is 0.2 with a min of 0 and max of 1. We work around the issue by setting `aria-valuetext`\n                        // to the same value that we set on the slider's thumb which will be truncated.\n                        '[attr.aria-valuetext]': 'valueText == null ? displayValue : valueText',\n                        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                        '[class.mat-slider-disabled]': 'disabled',\n                        '[class.mat-slider-has-ticks]': 'tickInterval',\n                        '[class.mat-slider-horizontal]': '!vertical',\n                        '[class.mat-slider-axis-inverted]': '_shouldInvertAxis()',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if mouse coordinates need to be inverted.\n                        '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                        '[class.mat-slider-sliding]': '_isSliding',\n                        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                        '[class.mat-slider-vertical]': 'vertical',\n                        '[class.mat-slider-min-value]': '_isMinValue()',\n                        '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    }, inputs: ['disabled', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_getTrackBackgroundStyles()\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_getTrackFillStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_getTicksContainerStyles()\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_getTicksStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_getThumbContainerStyles()\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { invert: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], thumbLabel: [{\n                type: Input\n            }], tickInterval: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], displayWith: [{\n                type: Input\n            }], valueText: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], input: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }], _sliderWrapper: [{\n                type: ViewChild,\n                args: ['sliderWrapper']\n            }] } });\n/** Checks if number is safe for calculation */\nfunction isSafeNumber(value) {\n    return !isNaN(value) && isFinite(value);\n}\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event, id) {\n    let point;\n    if (isTouchEvent(event)) {\n        // The `identifier` could be undefined if the browser doesn't support `TouchEvent.identifier`.\n        // If that's the case, attribute the first touch to all active sliders. This should still cover\n        // the most common case while only breaking multi-touch.\n        if (typeof id === 'number') {\n            point = findMatchingTouch(event.touches, id) || findMatchingTouch(event.changedTouches, id);\n        }\n        else {\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            point = event.touches[0] || event.changedTouches[0];\n        }\n    }\n    else {\n        point = event;\n    }\n    return point ? { x: point.clientX, y: point.clientY } : undefined;\n}\n/** Finds a `Touch` with a specific ID in a `TouchList`. */\nfunction findMatchingTouch(touches, id) {\n    for (let i = 0; i < touches.length; i++) {\n        if (touches[i].identifier === id) {\n            return touches[i];\n        }\n    }\n    return undefined;\n}\n/** Gets the unique ID of a touch that matches a specific slider. */\nfunction getTouchIdForSlider(event, sliderHost) {\n    for (let i = 0; i < event.touches.length; i++) {\n        const target = event.touches[i].target;\n        if (sliderHost === target || sliderHost.contains(target)) {\n            return event.touches[i].identifier;\n        }\n    }\n    return undefined;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSliderModule {\n}\nMatSliderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSliderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSliderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSliderModule, declarations: [MatSlider], imports: [CommonModule, MatCommonModule], exports: [MatSlider, MatCommonModule] });\nMatSliderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSliderModule, imports: [[CommonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSliderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule],\n                    exports: [MatSlider, MatCommonModule],\n                    declarations: [MatSlider],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n"]},"metadata":{},"sourceType":"module"}